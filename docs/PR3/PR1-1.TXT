
         сов. Характерной особенностью  этих регистров является  то, что
         благодаря им можно организовать так называемую индексную  адре-
         сацию. Если Вам надо  работать с какими-либо таблицами  данных,
         то Вы можете при разыскании и выборке нужного Вам элемента таб-
         лицы (например 55-го)  не задавать его  адрес, а хранить  в ин-
         дексном регистре адрес начала таблицы. Обращение к 55-ому  эле-
         менту выполняется путем обращения к этому индексному регистру с
         указанием величины  "смещения" нужного  Вам элемента  от начала
         таблицы, т.е. в данном случае числа 55.
              В "Спектруме" относительно регистра IY есть  неофициальное
         соглашение о том, что он содержит адрес 23610, который является
+                                 - 29 -

         адресом системной переменной ERR_NR (см. нашу разработку "БОЛЬ-
         ШИЕ ВОЗМОЖНОСТИ ВАШЕГО  СПЕКТРУМА"). Это позволяет  легко обра-
         щаться к любой системной переменной.  Первоначальную  установку
         содержимого регистра IY на этот адрес выполняет после включения
         компьютера в сеть  программа инициализации, находящаяся  в ПЗУ,
         но  Вы,  конечно,  можете  изменить  эту установку, заслав туда
         какой-либо свой  адрес, если  работаете в  машинных кодах.   Не
         забудьте восстановить исходное значение 23610, если Вы  хотите,
         чтобы Ваша программа,  исполнив машинный код,  нормально верну-
         лась в БЕЙСИК.
              Регистр IX широко используется компьютером при  исполнении
         команд загрузки/выгрузки программ: LOAD, SAVE, VERIFY, MERGE. В
         нем хранится адрес начала места загрузки (выгрузки) блока. Ког-
         да Вы выполняете загрузку/выгрузку из БЕЙСИКа, Вам об этом  ду-
         мать не надо. Процедуры, расположенные в ПЗУ, все за Вас   сде-
         лают, но если Вы выполняете эти операции из программы в  машин-
         ных кодах, то надо установить требуемое значение в этом индекс-
         ном регистре.

                        РЕГИСТР R - РЕГИСТР РЕГЕНЕРАЦИИ.
                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Это  внутренний  системный  регистр,  который используется
         процессором автоматически,  без участия  программиста. Электри-
         ческие заряды в микросхемах оперативной памяти имеют  тенденцию
         "утекать", поэтому для нормальной работы компьютера  необходимо
         производить подзарядку (регенерацию) оперативной памяти. В этих
         целях и используется регистр R.

                         РЕГИСТР I - ВЕКТОР ПРЕРЫВАНИЙ.
                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Для компьютеров иных систем, собранных на базе  процессора
         Z-80, этот регистр используется для организации обмена с  пери-
         ферийными устройствами.  В "Спектруме"  эта возможность  не ис-
         пользуется и этот регистр участвует только в формировании теле-
         визионного сигнала.



                                  - 30 -

                      АЛЬТЕРНАТИВНЫЙ НАБОР РЕГИСТРОВ.
                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Одной из отличительных черт процессора Z-80 является нали-
         чие альтернативного набора регистров. Эти регистры F', A',  B',
         C', D', E', H', L'. Они полностью идентичны регистрам F, A,  B,
         C, D, E, H, L.
              Наличие такого альтернативного набора позволяет быстро пе-
         реключаться с одного набора  на другой. Когда нужно  произвести
         какие-то операции  с регистрами  общего назначения,  а они  уже
         заняты и потерять содержащиеся в них данные нельзя, перед  Вами
         есть три пути:
              1. Отправить содержимое в память, а потом вернуть его  на-
         зад.
              2. Поместить содержимое на стек, а потом вернуть его отту-
         да.
              3. Переключиться на альтернативный набор регистров и рабо-
         тать с ним, а потом переключиться назад на основной набор.
              Третий путь самый оперативный.
              Благодаря наличию  альтернативного набора  процессор может
         одновременно обслуживать две задачи. В то время, когда Вы пере-
         ключились на  альтернативный набор,  он становится  основным, а
         бывший основным - становится альтернативным. Физически эти  на-
         боры  совершенно  идентичны  и  потому  нет никаких программных
         средств, чтобы определить, с  каким именно набором Вы  в данный
         момент работаете.  Программа может  получаться довольно  хитро-
         сплетенной и от программиста требуется определенная  вниматель-
         ность.
              В "Спектруме" есть небольшая особенность по  использованию
         альтернативных  регистров.  Она  касается  альтернативной  пары
         H'L'.  Дело  в  том,  что  для  нормальной  работы компьютера в
         БЕЙСИКе  в  этой  паре  должен  стоять  адрес   10070  (2756H в
         шестнадцатиричной системе). Поэтому при работе с альтернативным
         набором,  если  Вы  рассчитываете  впоследствии  возвратиться в
         БЕЙСИК, Вам либо  не надо трогать  содержимое H'L', либо  перед
         возвратом надо восстанавливать там число  10700.  Если же Вы  в
         БЕЙСИК возвращаться не собираетесь,  делайте с этой парой  все,
         что хотите.

                                  - 31 -

              4. ФОРМЫ ПРЕДСТАВЛЕНИЯ ЧИСЕЛ В ПРОЦЕССОРЕ Z-80.

              4.1. Числовые системы.
              ~~~~~~~~~~~~~~~~~~~~~~

              Для того, чтобы освоить программирование в машинный  кодах
         или  на  языке  АССЕМБЛЕРа,  необходимо знать, как организовано
         хранение информации в ячейках памяти и в регистрах  процессора.
         Основной единицей информации является байт, который в свою оче-
         редь состоит из восьми битов. Бит может быть включен (равен  1)
         или выключен (равен 0), т.е. может принимать только два  значе-
         ния, а байт, соответственно, может принимать 256 (два в восьмой
         степени) значений и имеет диапазон от 0 до 255.
              Те числа, с которыми мы имеем дело в повседневной  практи-
         ке, называются десятиричными. Они строятся из разрядов  (едини-
         цы, десятки, сотни и т.д.), каждый из которых может быть  выра-
         жен степенью числа 10.
              Так, 567 = 5*10^2 + 6*10^1 + 7*10^0
              Компьютеру работать в десятиричной системе очень неудобно.
         Поскольку информация в нем представлена электрическими зарядами
         и можно выделить только два устойчивых состояния - есть заряд /
         нет заряда, то самое удобное - это хранить числа в компьютере в
         двоичной системе. Например, обычное десятиричное число 156  мо-
         жет быть записано в двоичной форме как 1001 1100B. Здесь  буква
         B на  конце означает,  что число  записано в  двоичной (BINARY)
         системе.  Преобразовать его в десятиричную форму можно разложе-
         нием по степеням числа 2 так,  как мы это делали для числа  567
         выше, раскладывая его по степеням числа 10.

         10011100B = 1*2^7 + 0*2^6 + 0*2^5 + 1*2^4 + 1*2^3 + 1*2^2
                     + 0*2^1 + 0*2^0 = 128 + 0*64 + 0*32 + 16 + 8 + 4 +
                     0*2 + 0*1 = 128 + 16 + 8 + 4 = 156

              Вы видите очевидные недостатки двоичной формы записи. Во-
         первых, это очень громоздкая (длинная) запись, а потому и очень
         утомительная. Во-вторых, она с трудом переводится в привычную
         нам десятиричную форму. Все это вызывало бы массу ошибок, если
         бы программисты, разрабатывая программу, применяли бы двоичное
                                  - 32 -

         представление целых чисел.
              Гораздо удобнее  в работе  шестнадцатиричная система.  Она
         имеет в качестве основания  число 16, поэтому уже  двумя разря-
         дами можно выразить 256  целых чисел от 0  до 255 (т.к. 16^2  =
         256).
              Поскольку для шестнадцатиричной  системы не хватает  араб-
         ских  цифр,  то  для  выражения  шестнадцатиричных цифр 10...15
         приходится прибегать к буквенным обозначениям:
              0 - 0       1 - 1       2 - 2       3 - 3
              4 - 4       5 - 5       6 - 6       7 - 7
              8 - 8       9 - 9      10 - A      11 - B
             12 - C      13 - D      14 - E      15 - F
             То же самое число  156 в шестнадцатиричной форме  запишется
         как 9CH. Здесь буква H в конце числа говорит о том, что оно за-
         писано в шестнадцатиричной (HEXADECIMAL) системе.
                  9C = 9*16^1 + 12*16^0 = 144 + 12 = 156
              Перед начинающим программистом встает вопрос, в какой сис-
         теме работать - десятиричной или шестнадцатиричной? За  десяти-
         ричную есть только один довод - многолетняя привычка.  Шестнад-
         цатиричная  система  удобна  той  простотой, с которой двоичная
         форма в нее переводится,  а ведь двоичная форма  отражает физи-
         ческую  суть  операции,  что  делает  шестнадцатиричную систему
         основной для программистов-профессионалов, а также для  специа-
         листов в электронике и схемотехнике. Простота перевода из  дво-
         ичной  системы  в  шестнадцатиричную  и наоборот обеспечивается
         вследствие того, что число шестнадцать может быть выражено чет-
         вертой степенью числа два:  2^4 = 16. Поэтому,  чтобы перевести
         число  из  двоичной  формы  в  шестнадцатиричную, можно перевод
         выполнять по  каждому полубайту  (по каждым  четырем битам  от-
         дельно):
                          1001 1100 B = 9C H           /1
         ───────────────────────────────────────────────────────────────
         /1     Вы, очевидно обратили внимание  на то, что после  числа,
         записанного  в  шестнадцатиричной  системе  ставят  букву  "H".
         Иногда для  этой цели  используют символ  "хэш" ("#").  Его еще
         называют "решеткой". Тогда запись выглядит так: #9C.
                Для обозначения десятиричного  числа ставят символ  "D",
         либо ничего не ставят вообще: 156 = 156D = 9CH = #9C.
                                  - 33 -

              Таблица для связи между системами приведена ниже.
              Выбирая, в какой системе  Вам в дальнейшем работать,  надо
         также учесть, что большинство прикладных программ,  поддержива-
         ющих программирование в машинных  кодах - АССЕМБЛЕРов и  ДИСАС-
         СЕМБЛЕРов, работают в шестнадцатиричной системе.

                            Связь между системами.
        ╔════════╤═══════════╤═════════╦════════╤══════════╤════════╗
        ║ DEC    │    BIN    │   HEX   ║   DEC  │   BIN    │    HEX ║
        ╠════════╪═══════════╪═════════╬════════╪══════════╪════════╣
        ║  0     │   0000    │    0    ║    1   │   0001   │     1  ║
        ║  2     │   0010    │    2    ║    3   │   0011   │     3  ║
        ║  4     │   0100    │    4    ║    5   │   0101   │     5  ║
        ║  6     │   0110    │    6    ║    7   │   0111   │     7  ║
        ║  8     │   1000    │    8    ║    9   │   1001   │     9  ║
        ║ 10     │   1010    │    A    ║   11   │   1011   │     B  ║
        ║ 12     │   1100    │    C    ║   13   │   1101   │     D  ║
        ║ 14     │   1110    │    E    ║   15   │   1111   │     F  ║
        ╩════════╧═══════════╧═════════╩════════╧══════════╧════════╝

                  4.2 Двоичная дополнительная форма записи.
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Приведенная  выше  двоичная  форма  позволяет  работать  с
         целыми положительными числами от 0 до 255. Такая двоичная форма
         называется АБСОЛЮТНОЙ, а операции с такими числами - АБСОЛЮТНОЙ
         ДВОИЧНОЙ АРИФМЕТИКОЙ.  Рассмотрим, например,  что происходит  с
         содержимым  аккумулятора,  если  его  постоянно  увеличивать на
         единицу.

         Флаг С регистра F    Регистр А      Шестнадц.       Десятирич.
                 0            0000 0000         00               00
                 0            0000 0001         01               01
                 . . . . . . . . . . . . . . . . . . . . . . . . . .
                 0            1001 1100         9С              156
                 . . . . . . . . . . . . . . . . . . . . . . . . . .
                 0            1111 1111         FF              255
                 1            0000 0000         00               00
                 . . . . . . . . . . . и т.д. . . . . . . . . . . .
+                                 - 34 -

              В то же время, есть операции, в которых необходимо наличие
         и целых  отрицательных чисел.  Например, это  операции перехода
         (аналог GO TO). Переход может быть  как вперед на N шагов (N  -
         положительное), так и назад (N - отрицательное).
              Когда процессор встречает  такую команду, он  воспринимает
         следующий за кодом операции операнд N не как записанный в абсо-
         лютной двоичной форме, а как записанный в ДОПОЛНИТЕЛЬНОЙ ДВОИЧ-
         НОЙ ФОРМЕ. В этой форме могут записываться целые числа от 0  до
         127 и от -128 до -1. Таким образом, она может служить для запи-
         си целых чисел СО ЗНАКОМ.
              Рассмотрим наш предыдущий пример с постепенным наращивани-
         ем  содержимого  аккумулятора,  но  для двоичной дополнительной
         арифметики.
         Флаг С регистра F    Регистр А      Шестнадц.       Десятирич.
                 0            0000 0000         00               00
                 0            0000 0001         01               01
                 . . . . . . . . . . . . . . . . . . . . . . . . . .
                 0            0111 1111         7F              127
                 0            1000 0000         80             -128
                 0            1000 0000         81             -127
                 . . . . . . . . . . . . . . . . . . . . . . . . . .
                 0            1111 1111         FF               -1
                (1)           0000 0000         00                0
                 . . . . . . . . . . . и т.д. . . . . . . . . . . .
              Запомните простое правило двоичной дополнительной  арифме-
         тики: чтобы поменять знак числа, надо все его единицы  заменить
         на нули, а все нули - на единицы и к результату прибавить 1.
              + 5 - это 0000 0101B (05H)
         Тогда -5 - это 1111 1010B + 1 = 1111 1011B (FBH)
              Сложение и вычитание в этой системе выполняются как обычно
         (поразрядно), но перенос при переполнении старшего разряда  иг-
         норируется. Так +5 + (-5) = 0.
              Флаг переноса            0000 0101
              регистра F              +1111 1010
                 (1)                   0000 0000
              игнорируется


+                                 - 35 -

              Ниже показаны значения каждого бита восьмиразрядного числа
         в абсолютной и в дополнительной двоичных формах.

                                          7   6   5   4   3   2   1   0

              Абсол.двоичн.форма        128  64  32  16   8   4   2   1

              Дополнит.двоич.форма     -128  64  32  16   8   4   2   1


              4.3 Десятиричная арифметика в двоичном выражении.
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Это особый вид представления целых чисел в регистрах  про-
         цессора.  Он  называется  BCD-арифметикой.  BCD  - BINARY CODED
         DECIMAL (ДВОИЧНЫЙ КОД ДЕСЯТИРИЧНЫХ ЧИСЕЛ).
              Эта форма основана на том, что каждый разряд десятиричного
         числа можно представить в виде четырех двоичных битов:
              0 - 0000      1 - 0001      2 - 0010     3 - 0011
              4 - 0100      5 - 0101      6 - 0110     7 - 0111
              8 - 1000      9 - 1001
              Значения от 1010 до 1111 - не используются.
              Четырехбитную группу называют полубайтом и, таким образом,
         один байт в этой форме может содержать двухразрядное десятирич-
         ное число от 0 до 99.
              На рисунке показано представление в этой форме  десятирич-
         ного числа 74.

               Левый полубайт              Правый полубайт
                      ┌────────────┬────────────┐
                      │ 0  1  1  1 │ 0  1  0  0 │
                      └────────────┴────────────┘
               0+4+2+1 = 7                   0+4+0+0 = 4

              Как Вы видите, один полубайт в BCD-арифметике может содер-
         жать число  от 0  до 9,  в то  время как  в абсолютной двоичной
         ариметике - от 0  до 15. Очевидно, что  BCD-арифметика является
         довольно расточительной, но у нее есть свои преимущества.
              Для двух чисел, записанных в BCD-ариметике, обычные  прин-
+                                 - 36 -

         ципы сложения и  вычитания неприменимы. Это  происходит потому,
         что в абсолютной  двоичной арифметике полубайт  является запол-
         ненным, когда он равен 1111 и тогда выполняется переход к более
         старшему разряду. В BCD-арифметике полубайт заполнен, когда  он
         равен 1001  и уже  здесь выполняется  переход к  более старшему
         разряду.
              Абс. двоичная арифметика          BCD-ариметика
                    1111                           1001
               +       1                        +     1
                   -----                           -----
                1   0000                         1 0000

              В наборе команд процессора есть всего только три  команды,
         которые работают  с числами,  представленными в  этой форме, но
         они достаточно часто встречаются, поскольку их применение  зна-
         чительно упрощает преобразование чисел перед выдачей их на  эк-
         ран в десятиричной форме.
              В предыдущей главе мы рассматривали флаги регистра F  про-
         цессора  и указали на то, что флаги N и H программистом не  ис-
         пользуются. Они участвуют в операциях с BCD-арифметикой.
              Флаг N - флаг сложения/вычитания. Он равен 1 для всех опе-
         раций вычитания и равен 0 для всех операций сложения.
              Флаг H - флаг полупереноса. Он включается при переполнении
         младшего полубайта, когда начинается заполнение старшего  полу-
         байта.


                        5. СИСТЕМА КОМАНД ПРОЦЕССОРА.

              Система команд процессора  Z-80 довольно обширна  и потому
         наилучший способ ее изучения состоит в том, чтобы сгруппировать
         похожие по своему действию  команды и осваивать их  по группам.
         Мы выделим 19 основных групп команд, но некоторые из этих групп
         будут иметь подгруппы.
              Начиная освоение машинных кодов в главе 1 мы  использовали
         десятиричную  систему  для  записи  кодов операций, операндов и
         адресов. Это делалось для  более быстрой адаптации читателей  к
         особенностям программирования на уровне процессора. Теперь  же,
+                                  - 37 -

         когда мы установили, что профессионально эффективнее работать в
         шестнадцатиричной  системе,  мы  будем  применять ее. Указывать
         суффикс "H" в записи чисел и адресов уже не будем.

                       5.1. ЗАГРУЗКА ЧИСЛА В РЕГИСТР

                    5.1.1. Загрузка одиночного регистра.
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Эти  команды  существуют  для  всех  одиночных  регистров.
         Команды - двухбайтные. Сначала  следует код операции, за  ним -
         само число  N. При  засылке числа  в регистр,  старое значение,
         находившееся в нем, утрачивается.
              Мнемоника        Код            Мнемоника        Код
              LD A,N           3E N            LD B,N         06 N
              LD C,N           0E N            LD D,N         16 N
              LD E,N           1E N            LD H,N         26 N
              LD L,N           2E N

                     5.1.2. Загрузка регистровой пары.
                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              В регистровую пару может быть загружено двухбайтное число,
         т.е. от 0 до 65535. Эти команды для всех регистров, кроме IX и
         IY - трехбайтные. За кодом операции следуют два байта, задающие
         число. Для операций с индексными регистрами IX и IY эти команды
         - четырехбайтные, т.к. код операции включает в себя префикс DD
         (для регистра IX) или FD (для регистра IY).
              Наиболее часто двухбайтное число, засылаемое в регистровую
         пару, является адресом, но это может быть и просто целое число.
         Следует помнить,  что всегда  первый байт  числа загружается  в
         младший регистр пары, а второй - в старший.

         Мнемоника      Код          Мнемоника                 Код
         LD HL,NN       21 N N        LD BC,NN                01 N N
         LD DE,NN       11 N N        LD IX,NN                DD 21 N N
         LD IY,NN       FD 21 N N     LD SP,NN                31 N N



+                                  - 38 -

               5.2. КОПИРОВАНИЕ И ОБМЕН СОДЕРЖИМОГО РЕГИСТРОВ

                   5.2.1. Копирование одиночных регистров.
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Для аккумулятора и шести регистров общего назначения суще-
         ствуют 49 команд, позволяющих копировать содержимое одного  ре-
         гистра в другой. Ни одна из этих команд на флаги не влияет.
              Все эти команды - однобайтные. Коды этих команд приведены
         в таблице ниже.
         --------------------------------------------------------------
              LD A,r  LD H,r  LD L,r  LD B,r  LD C,r  LD D,r  LD E,r
         --------------------------------------------------------------
          A     7F      67      6F      47      4F      57       5F
          H     7C      64      6C      44      4C      54       5C
          L     7D      65      6D      45      4D      55       5D
          B     78      60      68      40      48      50       58
          C     79      61      69      41      49      51       59
          D     7A      62      6A      42      4A      52       5A
          E     7B      63      6B      43      4B      53       5B
          -------------------------------------------------------------
              Для регистров I и R существуют команды копирования только
          в паре с аккумулятором.

          Мнемоника          Код         Мнемоника            Код
             LD A,I         ED 57         LD A,R             ED 5F
             LD I,A         ED 47         LD R,A             ED 4F


                   5.2.2. Копирование содержимого регистровых пар.
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Эти команды  работают только  с указателем  стека. В  этой
         группе только  три команды.  Они также  не изменяют содержимого
         флагов.

          Мнемоника          Код         Мнемоника            Код
           LD SP,HL          F9           LD SP,IX           DD F9
           LD SP,IY          FD F9

+                                  - 39 -

              В тех случаях, когда Вам надо скопировать содержимое про-
         извольной регистровой пары в другую произвольную, например из
         BC в DE, Вы можете воспользоваться двумя командами копирования
         одиночных регистров - LD D,B и LD E,C.
              Второй способ для этой цели - произвести переброску через
         стек, но для этого надо воспользоваться командами для работы со
         стеком см. раздел 5.11.

                              5.2.3. Команды обмена.
                             ~~~~~~~~~~~~~~~~~~~~~~
              В этой подгруппе три команды:
         EX DE, HL (код ED) - обмен между собой содержимым регистров HL
                              и DE. На флаги не влияет.
         EXX (код D9)       - переключить основной набор регистров на
                              альтернативный.
         EX AF,A'F' (код 08)- переключить аккумулятор и флаговый
                              регистры на альтернативные.


                          5.3. ЗАГРУЗКА РЕГИСТРОВ ИЗ ПАМЯТИ

              Эти команды требуют  указания адреса, откуда  данные могут
         быть загружены в регистр. Существуют три основных метода  адре-
         сации:
              - прямая адресация;
              - косвенная адресация;
              - индексная адресация.
              В соответствии с этими тремя методами мы и рассмотрим  три
         подгруппы в этой группе.

                   5.3.1. Загрузка регистра прямой адресацией.
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              После кода  команды следует  двухбайтный ядрес  ячейки NN,
         содержимое которой загружается  в данный регистр.  Единственный
         случай, когда  такой командой  загружается одиночный  регистр -
         это загрузка аккумулятора, во всех остальных случаях загружают-
         ся два  байта в  регистровую пару.  Предполагается, что  второй
         байт берется  из ячейки  NN+1. При  этом содержимое  указанного
+                                 - 40 -

         адреса идет в младший регистр, а следующего - в старший.  Инте-
         ресно отметить,  что загрузка  пары HL  может выполняться двумя
         способами.
          Мнемоника          Код         Мнемоника            Код
           LD A,(NN)       3A N N         LD SP,(NN)      ED 7B N N
           LD HL,(NN)      2A N N       вторая форма  -   ED 6B N N
           LD BC,(NN)      ED 4B N N      LD DE,(NN)      ED 5B N N
           LD IX,(NN)      DD 2A N N      LD IY,(NN)      FD 2A N N

                   5.3.2. Загрузка регистра косвенной адресацией.
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Здесь не указывается, из какого адреса надо взять  данные,
         зато указывается, в какой  регистровой паре находится этот  ад-
         рес. Еще раз напомним, что загружается не этот адрес, а то, что
         в нем находится.
              Пример: LD A,(HL) - код 7E - загрузить в регистр A то
                                  число, которое находится в ячейке
                                  памяти, адрес которой находится в
                                  регистре HL.

                          Прочие команды этой подгруппы.

          Мнемоника          Код         Мнемоника            Код
            LD A,(BC)         0A          LD A,(DE)           1A
            LD H,(HL)         66          LD L,(HL)           6E
            LD B,(HL)         46          LD C,(HL)           4E
            LD D,(HL)         56          LD E,(HL)           5E

                   5.3.3. Загрузка регистра индексной адресацией.
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Этим методом из памяти могут загружаться однобайтные  дан-
         ные в аккумулятор или в регистры общего назначения. Адрес  тре-
         буемого байта задается следующим образом:
              - в регистре IX или IY находится базовый адрес таблицы или
         массива данных;
              - в команде после кода операции указывается операнд "сме-
         щение" S требуемого адреса относительно базового. Величина S
         может быть только однобайтной от 0 до 255.
+                                  - 41 -

              Обратите внимание на возможную  ошибку: если Вам надо  за-
         грузить в регистр общего назначения тот байт, который находится
         по базовому адресу таблицы, хранящемуся в IX или в IY, то  сме-
         щение ВСЕ РАВНО УКАЗЫВАТЬ НАДО. Просто в этом случае S=0.

          Мнемоника          Код         Мнемоника            Код
           LD A,(IX+S)      DD 7E S       LD A,(IY+S)      FD 7E S
           LD H,(IX+S)      DD 66 S       LD H,(IY+S)      FD 66 S
           LD L,(IX+S)      DD 6E S       LD L,(IY+S)      FD 6E S
           LD B,(IX+S)      DD 46 S       LD B,(IY+S)      FD 46 S
           LD C,(IX+S)      DD 4E S       LD C,(IY+S)      FD 4E S
           LD D,(IX+S)      DD 56 S       LD D,(IY+S)      FD 56 S
           LD E,(IX+S)      DD 5E S       LD E,(IY+S)      FD 5E S

              Ни одна из команд  загрузки регистров из памяти  не меняет
         флаги. В Справочнике (часть 3) указано время исполнения  команд
         в тактовых циклах.  При частоте 3,5  МГц один тактовый  импульс
         длится 0,000000286 сек. Минимальная продолжительность команды в
         процессоре Z-80 - 4  тактовых цикла. Из рассмотренных  в данной
         группе команд самыми быстрыми являются команды загрузки регист-
         ров косвенной адресацией. Они занимают в основном 7 циклов. Ко-
         манды загрузки прямой адресацией длятся  16 - 20 циклов, а  при
         индексной адресации - 19 циклов.

                 5.4. КОМАНДЫ ЗАПИСИ ДАННЫХ ИЗ РЕГИСТРОВ В ПАМЯТЬ

              Команды этой группы прямо противоположны командам предыду-
         щей группы. Также как и там, здесь можно выделить три подгруппы
         в зависимости от метода адресации.

                   5.4.1. Запись в память при прямой адресации.
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          Мнемоника          Код         Мнемоника            Код
           LD (NN),A       32 N N         LD (NN), SP      ED 73 N N
           LD (NN),HL      22 N N         вторая форма  -  ED 63 N N
           LD (NN),BC      ED 43 N N      LD (NN), DE      ED 53 N N
           LD (NN),IX      DD 22 N N      LD (NN), IY      FD 22 N N
              Обратите внимание на то,  что в этой подгруппе  нет команд
+                                 - 42 -

         на  запись  в  память  целых  чисел. Когда необходимо выполнить
         такую операцию,  ее делают  поэтапно. Сначала  число заносят  в
         регистр командой 1-ой группы, а затем отправляют из регистра  в
         память командой 4-й группы.
              Поскольку эти команды являются противоположными  командами
         3-й группы,  они часто  употребляются совместно.  Командами 4-й
         группы программные переменные отправляются на временное  хране-
         ние в отведенное  им в памяти  место, а командами  3-й группы -
         вызываются из памяти в процессор для обработки.

                   5.4.2. Запись в память при косвенной адресации.
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          Мнемоника          Код         Мнемоника            Код
           LD (HL),A          77          LD (BC),A            02
           LD (DE),A          12          LD (HL),H            74
           LD (HL),L          75          LD (HL),B            70
           LD (HL),C          71          LD (HL),D            72
           LD (HL),E          73          LD (HL),N            36 N

                   5.4.3. Запись в память при индексной адесации.
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Команды этой подгруппы  существуют для всех  одиночных ре-
         гистров общего назначения  и аккумулятора. Базовый  адрес может
         находиться как в регистровой паре IX, так и в IY.

          Мнемоника          Код         Мнемоника            Код
           LD (IX+S),A     DD 77 S        LD (IY+S),A       FD 77 S
           LD (IX+S),H     DD 74 S        LD (IY+S),H       FD 74 S
           LD (IX+S),L     DD 75 S        LD (IY+S),L       FD 75 S
           LD (IX+S),B     DD 70 S        LD (IY+S),B       FD 70 S
           LD (IX+S),C     DD 71 S        LD (IY+S),C       FD 71 S
           LD (IX+S),D     DD 72 S        LD (IY+S),D       FD 72 S
           LD (IX+S),E     DD 73 S        LD (IY+S),E       FD 73 S
           LD (IX+S),N     DD 36 S N      LD (IY+S),N       FD 36 S N




+                                   - 43 -

                             5.5. КОМАНДЫ СЛОЖЕНИЯ

              Назначение команд этой группы вытекает из названия -  при-
         бавить число или содержимое регистра (пары) или содержимое  ин-
         дексированного адреса к содержимому регистра (пары). Это первая
         из групп арифметических команд,  с которыми мы еще  столкнемся.
         Сразу отметим,  что команды  этой группы  работают в абсолютной
         двоичной арифметике.

                            5.5.1. Простое сложение.
                            ~~~~~~~~~~~~~~~~~~~~~~~~
              Все  команды  этой  подгруппы  влияют  на  флаг   переноса
         (С-флаг). В зависимости от того, превосходит ли результат  сло-
         жения FF (255) для однобайтногшо сложения или FFFF (65535)  для
         двухбайтного сложения содержимого двух регистровых пар,  С-флаг
         либо включается, либо выключается.

              Например: 2D + C0 = ED (45+192=237) -> C=0;
                        5D + C0 = 1D (93+192=29)  -> C=1.

                             Однобайтное сложение.
          Мнемоника          Код         Мнемоника            Код
           ADD A,N          C6 N          ADD A,A              87
           ADD A,H            84          ADD A,L              85
           ADD A,B            80          ADD A,C              81
           ADD A,D            82          ADD A,E              83
           ADD A,(HL)         86          ADD A,(IX+S)     DD 86 S
           ADD A,(IY+S)    FD 86 S

                             Двухбайтное сложение.
          Мнемоника          Код         Мнемоника            Код
           ADD HL,HL          29          ADD HL,BC            09
           ADD HL,DE          19          ADD HL,SP            39
           ADD IX,IX        DD 29         ADD IY,IY           FD 29
           ADD IX,BC        DD 09         ADD IY,BC           FD 09
           ADD IX,DE        DD 19         ADD IY,DE           FD 19
           ADD IX,SP        DD 39         ADD IY,DE           FD 39

+                                 - 44 -

                            5.5.2. Приращение.
                            ~~~~~~~~~~~~~~~~~~
              Приращение (инкремент) - это увеличение содержимого регис-
         тра или ячейки памяти на единицу. В принципе это частный случай
         сложения, но он настолько широко применяется, что для этих  це-
         лей была создана особая группа команд. Они нужны в первую  оче-
         редь для организации разного  рода счетчиков, когда при  всяком
         проходе этой операции счетчик получает приращение на единицу.
              Поскольку назначение команд  "инкремент" состоит не  в вы-
         полнении операций сложения, а  в организации счетчиков, они  не
         влияют на флаг переноса.

          Мнемоника          Код         Мнемоника            Код
           INC A              3C          INC H                24
           INC L              2C          INC B                04
           INC C              0C          INC D                14
           INC E              1C          INC (HL)             34
           INC (IX+S)        DD 34 S      INC (IY+S)       FD 34 S
           INC HL             23          INC BC               03
           INC DE             13          INC SP               33
           INC IX            DD 23        INC IY            FD 23

              Обратите внимание на разницу команд INC HL и INC (HL).
              INC HL - прямая команда для регистра HL, она гласит  "уве-
         личить на единицу содержимое регистровой пары HL"-
              INC (HL) - пример применения косвенной адресации; эта  ко-
         манда означает "увеличить на единицу содержимое ячейки  памяти,
         адрес которой находится в регистре HL".

                        5.5.3. Сложение с учетом переноса.
                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Команды этой подгруппы имеют мнемонику ADC. Она отличается
         тем, что к результату сложения двух чисел еще прибавляется еди-
         ница, если флаг переноса перед началом операции был установлен.
              После окончания операции  флаг переноса устанавливается  в
         соответствии с результатом (есть  перенос - включен, нет  - вы-
         ключен).
              Применяются они при сложении многобайтных чисел. Так,  на-
+                                 - 45 -

         пример, при сложении двухбайтных чисел 035D и A0C0:
                              03 5D
                          +   A0 C0
                            -------
                              A4 1D
         возникает  ситуация,  когда  сумма  младших  байтов дает число,
         большее 255 (FF).  В этот момент  и устанавливается флаг  пере-
         носа. При сложении  же старших байтов  эта единица будет  к ним
         прибавлена, если сложение производится командой ADC.
          Мнемоника          Код         Мнемоника            Код
           ADC A,N          CE N          ADC A,A              8F
           ADC A,H            8C          ADC A,L              8D
           ADC A,B            88          ADC A,C              89
           ADC A,D            8A          ADC A,E              8B
           ADC A,(HL)         8E          ADC A,(IX+S)       DD 8E S
           ADC HL,BC       FD 8E S        ADC HL,HL          ED 6A
           ADC HL,BC       ED 4A          ADC HL,DE          ED 5A
           ADC HL,SP       ED 7A

                          5.6. КОМАНДЫ ВЫЧИТАНИЯ
              Команды этой группы прямо противоположны командам предыду-
         щей группы. Они также работают в абсолютной двоичной  арифмети-
         ке. Их тоже можно разбить на три подгруппы.

                        5.6.1. Простое вычитание.
                        ~~~~~~~~~~~~~~~~~~~~~~~~~
              Команды этой подгруппы начинаются с мнемоники SUB и влияют
         на флаг переноса, но здесь в отличие от команд ADD флаг перено-
         са устанавливается не когда байт переполняется, а когда при вы-
         читании производится заем, т.е. когда вычитаемое больше  умень-
         шаемого.
          Мнемоника          Код         Мнемоника            Код
           SUB N            D6 N          SUB A               97
           SUB H              94          SUB L               95
           SUB B              90          SUB C               91
           SUB D              92          SUB E               93
           SUB (HL)           96          SUB (IX+S)        DD 96 S
           SUB (IY+S)      FD 96 S
+                                  - 46 -

              Обратите внимание на то, что действие всех этих команд от-
         носится к  регистру А  (аккумулятору), поэтому  в мнемониках на
         него нет указаний, это принимается по умолчанию.
              Так, SUB (HL) означает SUB A,(HL) - "вычесть из содержимо-
         го аккумулятора то число, которое находитсяв ячейке памяти, ад-
         рес которой находится в регистровой паре HL".

                        5.6.2. Уменьшение (декремент).
                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Декремент - уменьшение содержимого регистра или ячейки па-
         мяти на единицу. Операция прямо противоположна инкременту. Так-
         же, как и последняя, она служит не столько для вычитания,  ско-
         лько для организации каких-либо счетчиков, а потому она тоже не
         влияет на флаг переноса.

          Мнемоника          Код         Мнемоника            Код
           DEC A              3D          DEC H                25
           DEC L              2D          DEC B                05
           DEC C              0D          DEC D                15
           DEC E              1D          DEC (HL)             35
           DEC (IX+S)        DD 35 S      DEC (IY+S)         FD 35 S
           DEC HL             2B          DEC BC               0B
           DEC DE             1B          DEC SP               3B
           DEC IX            DD 2B        DEC IY             FD 2B

                   5.6.3. Вычитание с учетом "займа".
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Команды этой подгруппы начинаются с мнемоник SBC. По  сво-
         ему смыслу они противоположны  командам ADC. Отличие от  команд
         SUB состоит в  том, что если  флаг переноса включен,  то значит
         при вычитании младщего  разряда был сделан  заем из старшего  и
         поэтому при операции со старшим разрядом надо еще вычесть  еди-
         ницу.
              Эти команды применяются при вычитании многобайтных  (двух-
         байтных и более) чисел.



+                                 - 47 -

          Мнемоника          Код         Мнемоника            Код
           SBC A,N          DE N          SBC A,A              9F
           SBC A,H            9C          SBC A,L              9D
           SBC A,B            98          SBC A,C              99
           SBC A,D            9A          SBC A,E              9B
           SBC A,(HL)         9E          SBC A,(IX+S)       DD 9E S
           SBC (IY+S)       FD 9E S       SBC HL,HL          ED 62
           SBC HL,BC        ED 42         SBC HL,DE          ED 52
           SBC HL,SP        ED 72

                            5.7. КОМАНДЫ СРАВНЕНИЯ

              Мнемоники  команд  этой  группы  начинаются  с CP от слова
         COMPARE (сравнивать).
              Применяются эти  команды чрезвычайно  часто. С  их помощью
         можно сравнивать содержимое аккумулятора с числом, с содержимым
         регистра или с байтом оперативной памяти и по результатам срав-
         нения предпринимать те или иные действия. Поскольку эти команды
         однозначно относятся к регистру А, то в мнемониках он не указы-
         вается, это подразумевается по умолчанию.
              В  результате  операции  сравнения  значение регистра А не
         изменяется. Результат операции сказывается только на флагах ре-
         гистра F.
              Если содержимое аккумулятора больше или равно сравниваемо-
         му числу, то флаг переноса С  выключен (равен 0).  Если же  оно
         меньше - включен (равен 1).

          Мнемоника          Код         Мнемоника            Код
           CP A,N           FE N          CP A                BF
           CP H              BC           CP L                BD
           CP B              B8           CP C                B9
           CP D              BA           CP E                BB
           CP (HL)           BE           CP (IX+S)         DD BE S
           CP (IY+S)        FD BE S

                          5.8. КОМАНДЫ ЛОГИКИ

              Система команд процессора Z-80 позволяет выполнять три ви-
+                                 - 48 -

         да логических операций - логическое "И" (AND), логическое "ИЛИ"
         (OR) и "ИСКЛЮЧАЮЩЕЕ ИЛИ" (XOR). В соответствии с ними мы можем
         выделить три подгруппы в этой группе команд.
              Эти  операции  похожи  на  команды  сравнения. В них также
         участвуют два операнда, один из которых находится в аккумулято-
         ре.

                           5.8.1. Команды "И" (AND).
                           ~~~~~~~~~~~~~~~~~~~~~~~~~
              Данная команда двоичной логики дает результат, равный  од-
         ному из операндов, если оба операнда равны, а если нет, то  ну-
         ли. Таким  образом, результат  может быть  равен единице только
         если оба операнда равны единице.
              Пример: Первый операнд  1010 1010    (AA)
                      Второй операнд  1100 0000    (CO)
                      ---------------------------------
                      Результат AND   1000 0000    (B0)
              Как видите,  операция производится  побитно, т.е.  нулевой
         бит первого числа сравнивается с нулевым битом второго,  первый
         с первым, второй со вторым и т.д.
              В этой подгруппе существуют 11 операций:
          Мнемоника          Код         Мнемоника            Код
           AND N            E6 N          AND A               A7
           AND H             A4           AND L               A5
           AND B             A0           AND C               A1
           AND D             A2           AND E               A3
           AND (HL)          A6           AND (IX+S)       DD A6 S
           AND (IY+S)      FD A6 S
              С помощью команды  AND можно довольно  эффектно сбрасывать
         биты аккумулятора. Например, если Вам нужно его обнулить,  дай-
         те команду:
                                AND 0 (E6 0)
              В программах очень часто бывает нужно проверить  состояние
         некоторых битов, при этом остальные желательно занулить. Напри-
         мер, если в  игровой программе управление ведется от  Кемпстон-
         джойстика, то сигнал  от кнопки "огонь"  подается по 4-му  биту
         порта 31.

                                    - 49 -


                                  ПОРТ 31 (1F)

                       ┌───┬───┬───┬───┬───┬───┬───┬───┐
                       │ 7 │ 6 │ 5 │ 4 │ 3 │ 2 │ 1 │ 0 │
                       └─┬─┴───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴──┬┘
                         └───┬───┘   │   │   │   │    │
                             │       │   │   │   │    └─── вправо
                       не исполь-    │   │   │ влево
                         зуются      │   │   │
                                    огонь│  вниз
                                         │
                                       вверх

              Можно было бы проверить, не включена ли эта кнопка  коман-
         дой CP 10 (десятиричное 16),  но из этого ничего не  получится,
         т.к. часто кнопка  "ОГОНЬ" включается одновременно  с движением
         объекта. Например, если объект движется вправо-вверх и при этом
         "стреляет", то включены биты 1,2 и 4  и код равен 2 + 4 +  10 =
         16. Такая "проверка" показала бы, что кнопка якобы не включена.
         Поэтому перед проверкой все  остальные биты надо погасить.  Это
         легко сделает  команда AND  10, а  потом можно  давать и CP 10.
         Процесс гашения ненужных битов называется маскированием.

                       5.8.2. Команда "ИЛИ" (OR).
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~
              Эта  команда  также  исполняется  побитным сравнением двух
         двоичных чисел.  Ее результат  равен единице,  если данный  бит
         включен в  первом или  во втором  операнде или  в обоих вместе.
         Таким образом, в  результате может быть  0 только если  в обоих
         операндах 0, а в противном случае - 1.
              Пример: Первый операнд    1010 1010    (AA)
                      Второй операнд    1100 0000    (C0)
                      -----------------------------------
                      Результат OR      1110 1010    (EA)
              Эта  команда  позволяет  Вам  столь же эффективно включать
         нужные биты  в аккумуляторе  (или проверять  их включение), как
         команда AND  позволяла их  выключать. Например,  если Вам надо,
+                                 - 50 -

         чтобы в аккумуляторе были гарантированно включены биты 5, 3,  2
         - дайте команду OR 2С (20 + 8 + 4 = 2C).
          Мнемоника          Код         Мнемоника            Код
           OR N             F6 N          OR A                B7
           OR H              B4           OR L                B5
           OR B              B0           OR C                B1
           OR D              B2           OR E                B3
           OR (HL)           B6           OR (IX+S)         DD B6 S
           OR (IY+S)        FD B6 S
              Интересна команда OR A. В результате ее действия  произво-
         дится сравнение по "ИЛИ" содержимого аккумулятора с ним же  са-
         мим. Разумеется,  в результате  в аккумуляторе  ничего не изме-
         нится, но зато гарантированно будет сброшен флаг переноса (флаг
         С регистра F). Такой же результат дает и применение команды AND
         A. Обе эти команды очень часто используются в программах именно
         для этой цели.

                   5.8.3. Команды "ИСКЛЮЧАЮЩЕЕ ИЛИ" (XOR).
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              В отличие от "ИЛИ" здесь  результат равен 1, если хотя  бы
         один из операндов равен 1, но не оба вместе. В остальных случа-
         ях он равен нулю.
              Пример: Первый операнд   1010 1010  (AA)
                      Второй операнд   1100 0000  (C0)
                      --------------------------------
                      Результат XOR    0110 1010  (6A)
              Команда XOR A часто используется для обнуления аккумулято-
         ра. Это же можно сделать и командой LD A,0, но XOR короче (один
         байт вместо двух), а кроме того при команде XOR, как и при всех
         командах логики AND, OR,  XOR сбрасывается лаг переноса,  а ко-
         манды группы загрузки LD на флаги влияния не оказывают.
          Мнемоника          Код         Мнемоника            Код
           XOR N            EE N          XOR A                AF
           XOR H              AC          XOR L                AD
           XOR B              AB          XOR C                A9
           XOR D              AA          XOR E                AB
           XOR (HL)           AE          XOR (IX+S)         DD AE S
           XOR (IY+S)       FD AE S
+                                 - 51 -

                         5.9. КОМАНДЫ ПЕРЕХОДА

              Эта группа команд также относится к наиболее часто  встре-
         чающимся в программах. Переходы нужны для того, чтобы отойти от
         последовательного выполнения программы и начать выполнение  ка-
         кого-либо блока с другого местп. В значительной степени эти ко-
         манды эквивалентны командам БЕЙСИКа GO TO.

              Переходы бывают:  - условные и безусловные;
                                - относительные и абсолютные.

              УСЛОВНЫЙ переход выполняется (или не выполняется) в  зави-
         симости от того, выполняется  или нет какое-либо условие.  Ана-
         логичная конструкция БЕЙСИКа выглядит так:
                   IF .........THEN GO TO ...........
              БЕЗУСЛОВНЫЙ переход выполняется всегда, когда он встреча-
         ется в программе. Он не связан никакими условиями.
              АБСОЛЮТНЫЙ  переход  выполняется  в  заданный адрес. Адрес
         (двухбайтный) задается после кода операции.
              ОТНОСИТЕЛЬНЫЙ  переход  выполняется  на  сколько-то  шагов
         вперед или назад от адреса, в котором стоит команда,  следующая
         за командой перехода. Здесь диапазон возможных переходов  огра-
         ничен. Он может составлять от -128 до +127 байтов и  называется
         смещением. Однобайтная  величина смещения  S задается  вслед за
         кодом  операции.  Она  всегда  задана в дополнительной двоичной
         форме.
              Мнемоники команд абсолютного перехода всегда начинаются  с
         JP (JUMP  = СКАЧОК),  а относительного  перехода -  с JR  (JUMP
         RELATIVE = скачок относительный).
              Всего в этой группе 17 команд и мы рассмотрим их в четырех
         подгруппах.

                   5.9.1. Команды абсолютного безусловного перехода.
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          Мнемоника          Код         Мнемоника            Код
           JP NN           C3 N N         JP (HL)              E9
           JP (IX)         DD E9          JP (IY)             FD E9
              Команда JP NN вызывает  переход к адресу, заданному  двумя
+                                 - 52 -

         байтами NN. Этот адрес автоматически загружается в  программный
         счетчик (регистровую пару PC) и программа продолжается, начиная
         с этого адреса.
              Команды JP  (HL), JP  (IX), JP  (IY) используют  косвенную
         адресацию. Так, например, по команде JP (HL) выполняется  пере-
         ход к тому адресу, который содержится в регистровой паре HL.

                   5.9.2. Относительный безусловный переход.
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              В этой подгруппе всего одна команда: JR S, - ее код 18, за
         ним следует  величина смещения  S от  -128 до  +127, заданная в
         дополнительной двоичной  форме. Напомним,  что в  этой форме  к
         примеру FE  (254) означает  не переход  на 254  байта вперед, а
         переход на 2 байта назад, т.е. (-2).
              Другой особенностью  относительного перехода  является то,
         откуда начинает отсчитываться переход вперед или назад.  Запом-
         ните, он отсчитывается не от того адреса, в котором размещалась
         команда JR,  а от  того, в  котором стоит  следующий за ней код
         операции,  т.к.  когда  встретилась  команда  JR, в программный
         счетчик PC уже был заслан адрес начала следующей команды, и  от
         него-то и начинается отсчет. Например:
              Мнемоника    Адрес (десят.)    Код    Комментарий
              .........
              LD A,FF      60000              3E    Загрузить в акку-
                           60001              FF    мулятор число 255.
              DEC A        60002  <───┐       3D    Уменьшить акк-р на 1
              JR FD        60003      │       18    Переход назад на
                           60004      │       FD    три байта.
              NOP          60005 ─────┘       00    Пауза.
              Применение относительных переходов дает ряд ценных преиму-
         ществ по сравнению с абсолютными  как при написании, так и  при
         эксплуатации программ. Обратите внимание на то, что в  вышепри-
         веденном примере нет никаких указаний на адреса. Мы его размес-
         тили начиная с  адреса 60000, но  если его разместить  в другом
         месте, он будет точно также работать, выполняя те же  действия.
         Отсутствие абсолютных переходов делает подпрограмму  релоцируе-
         мой (перемещаемой). При наличии внутри нее абсолютных переходов
         она становится  нерелоцируемой. Правда,  надо не  забывать, что
+                                 - 53 -

         релоцируемая процедура  может не  допускать обращений  к ней из
         других частей  программы (см.  5.12), либо  перед всяким  таким
         обращением должно  быть указано,  где эта  процедура находится.
         Может быть выделена специальная программная переменная, которая
         указывает на местоположение процедуры.
              Релоцируемость удобна при написании тем, что Вы можете  не
         задумываться над вопросом о том, где процедура будет  находить-
         ся. А при эксплуатации Вы сможете отводить ей те области  памя-
         ти, которые Вам в данный момент удобны в зависимости от прочего
         окружения /1.

                   5.9.3. Команды абсолютного условного перехода.
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              С  помощью  этих  команд  выполняется переход по заданному
         адресу, если выполняется  какое-либо условие. В  системе команд
         Z-80  это  условие  связано  с  состоянием флагов регистра F, а
         именно: флаг  переноса (C),  флаг нуля  (Z), флаг  знака (S), и
         флаг переполнения/четности (P/O).
            Мнемоника       Код              Комментарий.
             JP C,NN       DA N N   Переход по заданому адресу выпол-
                                    няется, если флаг переноса включен.
         ──────────────────────────────────────────────────────────────
         /1  Справка: Известные дисассемблирующие программы тоже  бывают
         релоцируемыми и нерелоцируемыми. Так, например, для  дисассемб-
         лера MONS 3 Вы сами можете задать адрес, в который он будет за-
         гружаться и работать.  Это значит, что  либо он внутри  себя не
         содержит абсолютных переходов, либо они есть, но  настраиваются
         после старта программы  с помощью специальной  инициализирующей
         процедуры.
              Дисассемблеры MONITOR 16 и MONITOR 48 - нерелоцируемы. По-
         этому желательно иметь  и тот и  другой. Для работы  с блоками,
         загружаемыми в  верхние области  памяти, применяют  MONITOR 16,
         который загружается в нижние области, и наоборот.
              Есть, конечно,  блоки, для  которых неприменим  ни тот, ни
         другой. В этом  случае их надо  либо резать на  куски выгрузкой
         по частям  SAVE "имя:  CODE m,n,  либо применять  дисассемблер-
         MONS3, который, конечно, тоже имеет определенные пределы сво их
         возможностей.
+                                 - 54 -

            Мнемоника       Код              Комментарий.
             JP NC,NN      D2 N N   Переход по заданному адресу выпол-
                                    няется, если флаг переноса сброшен.
             JP Z,NN       CA N N   Переход по заданному адресу выпол-
                                    няется, если флаг нуля включен.
             JR NZ,NN      C2 N N   Переход по заданному адресу выпол-
                                    няется, если флаг нуля сброшен.
             JR P,NN       F2 N N   Переход по заданному адресу выпол-
                                    няется, если флаг знака включен.
             JR M,NN       FA N N   Переход по заданному адресу выпол-
                                    няется, если флаг знака сброшен.
             JP PO,NN      E2 N N   Переход по заданному адресу выпол-
                                    няется, если включено нечетное чис-
                                    ло битов или если нет переполнения.
             JP PE,NN      EA N N   Переход по заданному адресу выпол-
                                    няется, если включено четное чис-
                                    ло битов или если есть переполнение.

                 5.9.4. Команды относительного условного перехода.
                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
             Эти команды обеспечивают переход вперед или назад на задан-
         ное количество байтов в зависимости от состояния флагов C и Z.
              Мнемоника       Код              Комментарий.
               JR C,S         38 S       Переход на S байтов, если флаг
                                         C включен.
               JR NC,S        30 S       Переход на S байтов, если флаг
                                         C сброшен.
               JR Z,S         28 S       Переход на S байтов, если флаг
                                         Z включен.
               JR NZ,S        20 S       Переход на S байтов, если флаг
                                         Z сброшен.

                      5.9.5. Комментарий к работе с флагами.
                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              ФЛАГ ПЕРЕНОСА (С). Этот флаг находится в нулевом бите  ре-
         гистра F. Он показывает было или нет переполнение  аккумулятора
         в абсолютной двоичной арифметике (т.е. был ли результат  сложе-
         ния больше 255 или результат вычитания меньше 0). На  состояние
+                                 - 55 -

         этого флага влияют  далеко не все  команды. Вы можете  уточнить
         влияние команд на  различные флаги по  таблицам нашего   "Спра-
         вочника".
              В двух словах:
              1) Все команды сложения,  вычитания и сравнения ADD,  ADC,
         SUB, SBC, CP влияют на флаг переноса. Он включается, если  было
         переполнение при сложении, заем при вычитании или если при сра-
         внении содержимое  операнда оказалось  большим, чем  содержимое
         аккумулятора.
              2) Все команды логики AND, OR, XOR сбрасывают флаг перено-
         са.
              3) Команды сдвига (см.  разд. 5.14.) влияют на  флаг пере-
         носа.

              ФЛАГ НУЛЯ (Z). Этот флаг находится в шестом бите  регистра
         F.  Он включается, если результат предыдущей операции был равен
         нулю, в противном случае он выключается.
              Обратите внимание на мнемоническое противоречие. Флаг нуля
         включен и НЕ РАВЕН НУЛЮ, когда результат операции РАВЕН НУЛЮ.
              Далее кратко:
              1) При работе с одиночными регистрами на флаг нуля  влияют
         результаты операций сложения  (ADD, ADC, INC),  вычитания (SUB,
         SBC, DEC), сравнения (CP), а также логики (AND, OR, XOR).
              2)  При  работе  с  регистровой  парой на флаг нуля влияют
         только арифметические операции ADC и SBC.
              3) Команды загрузки регистров  LD не влияют на  флаг нуля,
         за исключением очень редко встречающихся для "Спектрума" команд
         LD A,I; LD A,R.
              4) На флаг нуля влияют также команды, с которыми мы позна-
         комимся несколько позже:
              - команды сдвига (разд.5.14.);
              - команды проверки битов (5.15.);
              - команды блочного поиска (5.16.).

              ФЛАГ ЗНАКА  (S). Этот  флаг находится  в старшем (седьмом)
         бите регистра F. Он включается, если результат отрицательный  и
         сбрасывается, если положительный.
              Интересно, что для операций, выполняемых в  дополнительной
+                                 - 56 -

         двоичной арифметике, он равен старшему (седьмому) биту  аккуму-
         лятора, который тоже определяет знак содержимого.
              Основные особенности:
              1) При работе с одиночными регистрами на флаг знака влияют
         результаты операций сложения  (ADD, ADC, INC),  вычитания (SUB,
         SBC, DEC), сравнения (CP), а также логики (AND, OR, XOR).
              2) При работе с регистровой парой на флаг знака влияют то-
         лько операции ADC и SBC.
              3) Команды загрузки регистров LD не влияют на флаг знака,
         за исключением команд LD A,I; LD A,R.
              4) На флаг знака влияют также команды, с которыми мы  поз-
         накомимся несколько позже:
              - команды сдвига (разд.5.14.);
              - команды блочного поиска (5.15.).

              ФЛАГ ПЕРЕПОЛНЕНИЯ/ЧЕТНОСТИ. Этот флаг находится во  втором
         бите регистра F. Он  имеет двойное назначение. Для одних команд
         он указывает  на наличие  четности числа  включенных битов, для
         других - на наличие в результате операции переполнения в допол-
         нительной двоичной арифметике.
              ПОЯСНЕНИЕ: Понятие  четности относится  здесь не  к числу,
         находящемуся  в  аккумуляторе,  а  к  количеству его включенных
         битов. Например, число 33  (0011 0011) имеет четыре  включенных
         бита, и, следовательно, флаг включен, а у числа 34 (0011  0100)
         - три включенных бита и флаг выключен.
              Понятие  "переполнение"  здесь  относится к дополнительной
         двоичной арифметике. Флаг включается, если в результате  опера-
         ции сложения возникает переход от числа, лежавшего в  диапазоне