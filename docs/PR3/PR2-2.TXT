
         660С        CD1266   CALL PRINT     Вызов подпрограммы печати
         660F        C3A765   JP   REP       Возврат на опрос джойстика
         6612  PRINT 06FF     LD   B,FF      Установка параметра
                                             замедляющего цикла 3
         6614  WAIT  10FE     DJNZ WAIT      Третий замедляющий цикл
+                                  - 179 -

         6616        3E16     LD   A,16      Управляющий код AT
         6618        D7       RST  10
         6619        3A2C66   LD   A,(YPOS)  Позиция печати по вертикали
         661C        D7       RST  10
         661D        3A2B66   LD   A,(XPOS)  Позиция печати по горизонт.
         6620        D7       RST  10
         6621        3E10     LD   A,10      Управляющий код INK
         6623        D7       RST  10
         6624        3E01     LD   A,01      Цвет символа - синий
         6626        D7       RST  10
         6627        3E8F     LD   A,8F      Cимвол █ (код 143)
         6629        D7       RST  10
         662A        C9       RET            Возврат в вызывающую
                                             программу
         662B  XPOS  00       DEFB 00        Координата X
         662C  YPOS  00       DEFB 00        Координата Y

                   4.4. Управление программой от клавиатуры.
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Это, без сомнения,  тоже задача повседневной  потребности.
         Сразу укажем на то, что существуют два различных метода  опроса
         клавиатуры - один связан с приемом и анализом данных, поступаю-
         щих от внешнего  порта, а другой  - с использованием  системных
         переменных KSTATE  или LASTK.  Мы здесь  рассмотрим оба метода,
         т.к. оба достаточно часто применяются в программах.
              Рассмотрим задачу,  аналогичную предыдущей.  Допустим, нам
         надо, чтобы  на экране  рисовались синие  квадраты при  нажатии
         следующих клавиш:
              "P" - вправо                 "Q" - вверх
              "О" - влево                  "А" - вниз
                        "0" - выход из программы
              Для усложнения задачи введем еще клавишу "ПРОБЕЛ" в качес-
         тве переключателя режимов "РИСОВАНИЕ/СТИРАНИЕ".

                                    МЕТОД 1
                                    ~~~~~~~
              Опрос клавиатуры  производится по  внешнему порту  254 (FE
         HEX). Но, поскольку адрес порта клавиатуры является двухбайтным
+                                  - 180 -

         числом, то FE - является младшим байтом адреса порта, а старший
         должен быть установлен предварительно в аккумуляторе.
              Анализируются 5  младших битов.  При этом  если клавиша не
         нажата, то бит включен  (в отличие от опроса  Кемпстон-джойсти-
         ка). Поэтому, если ни одна клавиша не нажата, то должно бы  вы-
         даваться число 255, но оно не выдается, а выдается 191. Дело  в
         том, что по  6-му биту анализируется  состояние порта входа  от
         магнитофона и если сигнал не поступает, то 6-ой бит выключен  и
         поэтому Вы получаете 191, а не 255 (255-64 = 191).

         Адрес Метка Маш.код  Мнемоника      Комментарий
         6590        3E02     LD   A,02
         6592        CD0116   CALL 1601      Открываем канал для печати
                                             на экране
         6595        0618     LD   B,18
         6597        CD440E   CALL 0E44      Очистка экрана
         659A        3E0F     LD   A,0F
         659C        325766   LD   (XPOS),A  Установка начальной колонки
                                             печати в переменной XPOS
         659F        3E0B     LD   A,0B
         65A1        325666   LD   (YPOS),A  Установка начальной строки
                                             печати в YPOS
         65A4        3E8F     LD   A,8F      Аккумулятор указывает на
                                             символ █ (143)
         65A6        325A66   LD   (SIM),A   Код символа отправляется в
                                             переменную SYM.
         65A9        CD4766   CALL PRINT     Вызов процедуры печати
                                             символа
         65AC  REP   0E4F     LD   C,4F      Установка параметра замед-
                                             ляющего цикла 1. Он взят
                                             меньше, чем в программе для
                                             джойстика, поэтому рисова-
                                             ние здесь пойдет быстрее.
         65AE  HERE  06FF     LD   B,FF      Установка параметра
                                             замедляющего цикла 2.
         65B0  PAUSE 10FE     DJNZ PAUSE     Второй замедляющий цикл
         65B2        0D       DEC  C
         65B3        20F9     JR   NZ,HERE   Первый замедляющий цикл
+                                  - 181 -

         Адрес Метка Маш.код  Мнемоника      Комментарий
         65B5        3EEF     LD   A,EF      Указание на 5-ый полуряд
         65B7        DBFE     IN   A,(FE)    Опрос 5-го полуряда
         65B9        CB47     BIT  0,A       Проверка клавиши "0"
         65BB        C8       RET  Z         Выход в БЕЙСИК, если нажата
         65BC        3E7F     LD   A,7F      Указание на 8-ой полуряд
         65BE        DBFE     IN   A,(FE)    Опрос 8-го полуряда
         65C0        CB47     BIT  0,A       Проверка клавиши "ПРОБЕЛ"
         65C2        CC2C66   CALL Z,TOGGL   Вызов подпрограммы на пере-
                                             ключение печатаемого симво-
                                             ла для обеспечения стирания
         65C5        3EDF     LD   A,DF      Указание на 6-й полуряд
         65C7        DBFE     IN   A,(FE)    Опрос 6-го полуряда
         65С9        СВ47     BIT  0,A       Проверка клавиши "P"
         65CB        2817     JR   Z,RIGHT   Вправо, если нажата
         65СD        CB4F     BIT  1,A       Проверка клавиши "O"
         65CF        2825     JR   Z,LEFT    Влево, если нажата
         65D1        3EFD     LD   A,FD      Указание на 2-й полуряд
         65D3        DBFE     IN   A,(FE)    Опрос 2-го полуряда
         65D5        CB47     BIT  0,A       Проверка клавиши "A"
         65D7        282F     JR   Z,DOWN    Вниз, если нажата
         65D9        3EFB     LD   A,FB      Указание на 3-й полуряд
         65DB        DBFE     IN   A,(FE)    Опрос 3-го полуряда
         65DD        CB47     BIT  0,A       Проверка клавиши "Q"
         65DF        2839     JR   Z,UP      Вверх, если нажата
         65E1        C3AC65   JP   RET       Если ни одна клавиша не
                                             нажата, то сначала
         65E4  RIGHT 3A5766   LD   A,(XPOS)  в акк-р идет последний
                                             столбец печати и
         65E7        3C       INC  A         увеличивается на 1
         65E8        FE1F     CP   1F        Проверка на достижение
                                             правого края
         65EA        CAAC65   JP   Z,REP     Если да, то возврат на
                                             опрос клавиатуры
         65ED        325766   LD   (XPOS),A  Если нет, то запомнить
                                             новый столбец и вызвать
         65F0        CD4766   CALL PRINT     подпрограмму печати

+                                  - 182 -

         Адрес Метка Маш.код  Мнемоника      Комментарий
         65F3        C3AC65   JP   REP       Возврат на новый опрос
                                             клавиатуры
         65F6  LEFT  3A5766   LD   A,(XPOS)  Ввод текущего столбца
                                             печати
         65F9        3D       DEC  A         Уменьшить его номер на 1
         65FA        FE00     CP   00        Проверка на достижение
                                             левого края
         65FC        CAAC65   JP   Z,REP     Если да, то возврат на
                                             опрос клавиатуры
         65FF        325766   LD   (XPOS),A  Если нет, запомнить новый
                                             столбец
         6602        CD4766   CALL PRINT     Вызов подпрограммы печати
         6605        C3AC65   JP   REP       Возврат на опрос клавиатуры
         6608  DOWN  3A5666   LD   A,(YPOS)  В акк-р идет последняя
                                             строка печати и
         660B        3C       INC  A         увеличивается на 1
         660C        FE16     CP   16        Проверка на достижение
                                             нижнего края
         660E        CAAC65   JP   Z,REP     Если да, то возврат на
                                             опрос клавиатуры
         6611        325666   LD   A,(YPOS)  Если нет, то запомнить
                                             новую строку и вызвать
         6614        CD4766   CALL PRINT     подпрограмму печати
         6617        C3AC65   JP   REP       Возврат на новый опрос
                                             клавиатуры
         661A  UP    3A5666   LD   A,(YPOS)  Ввод текущей строки печати
         661D        3D       DEC  A         Уменьшить номер строки на 1
         661E        FE00     CP   00        Проверка на достижение
                                             верхнего края
         6620        CAAC65   JP   Z,REP     Если да, то возврат на
                                             опрос клавиатуры
         6623        325666   LD   A,(YPOS)  Если нет, то запомнить
                                             новую строку
         6626        CD4766   CALL PRINT     Вызов подпрограммы печати
         6629        C3AC65   JP   REP       Возврат на опрос клавиатуры
         662C  TOGGL 3E7F     LD   A,7F      Вновь проверяем нажатие
                                             клавиши "ПРОБЕЛ", т.к. она
+                                  - 183 -

         Адрес Метка Маш.код  Мнемоника      Комментарий
         662E        DBFE     IN   A,(FE)    теперь должна быть отпущена
         6630        CB47     BIT  0,A       иначе режимы будут
                                             переключаться многократно и
                                             выход будет неопределенным
         6632        28F8     JR   Z,TOGGL   Возврат, если клавиша еще
                                             не отпущена
         6634        3A5A66   LD   A,(SYM)   Чтобы переключить режим,
                                             надо сначала определить,
         6637        FE8F     CP   8F        какой символ установлен -
         6639        2806     JR   Z,NEXT    синий квадрат (8F) или
                                             белый (80)
         663B        3E8F     LD   A,8F      Поскольку был не синий, то
         663D        325A66   LD   (SYM),A   устанавливаем в переменную
                                             SYM код синего квадрата
         6640        C9       RET            Возврат
         6641  NEXT  3E80     LD   A,80      И, наоборот, раз был синий,
         6643        325A66   LD   (SYM),A   то теперь устанавливаем
                                             белый квадрат ("СТИРАНИЕ")
         6646        C9       RET            Возврат
         6647  PRINT 06FF     LD   B,FF      Организация третьего
                                             замедляющего цикла
         6649  WAIT  10FE     DJNZ WAIT      Третий замедляющий цикл
         664B        115566   LD   DE,TEXT   Регистр DE указывает на
                                             печатный текст
         664E        010600   LD   BC,0006   Длина текста - 6 символов
         6651        CD3C20   CALL 203C      Вызов процедуры печати
                                             строки из ПЗУ
         6654        С9       RET            Возврат в вызывающую
                                             процедуру
         6655  TEXT  16       DEFB 16        Символ управления печатью
                                             AT
         6656  YPOS  00       DEFB 00        Позиция печати по горизонт.
         6657  XPOS  00       DEFB 00        Позиция печати по вертик.
         6658        10       DEFB 10        Управляющий символ INK
         6659        01       DEFB 01        Цвет символа - синий
         665А  SYM   00       DEFB 00        Код печатаемого символа.

+                                  - 183 -

                                   МЕТОД 2
                                   ~~~~~~~
              Можно проводить управление  программой от клавиатуры  и не
         опрашивая внешние порты, связанные с ней, а используя некоторые
         системные переменные "Спектрума". Поскольку программа при  этом
         очень похожа на предыдущую, то мы ее текст приводить не  будем,
         но некоторые существенные особенности имеются.

              1. Использование системной переменной LAST K.
              Эта системная переменная находится по адресу 23560. В  ней
         запоминается код  символа (токена),  находящегося на  последней
         нажатой клавише. Причем, здесь есть различия, в зависимости  от
         того, в  каком клавиатурном  регистре эта  клавиша была нажата.
         Например, после нажатия клавиши "Р" там будет помещен код 70HEX
         (символ "р"), при  нажатии CAPS SHIFT  "P" - код  50HEX (символ
         "Р"), а при нажатии SYMB SHIFT "P" - код 22HEX (символ").
              Итак, первой особенностью  является то, что  одна и та  же
         клавиша при использовании ее в разных режимах дает разные коды.
         поскольку в  программе с  равной вероятностью  клавиатура может
         быть в режиме CAPS LOCK и в обычном режиме, то при  определении
         перехода надо проверять оба  кода. Например, для клавиши  "Р" -
         переход на процедуру обработки движения вправо:
                   ..................
                   CP        70
                   JR        Z,RIGHT
                   CP        50
                   JR        Z,RIGHT
                   ..................
              2. Вторая особенность состоит  в том, что системная  пере-
         менная "помнит" факт нажатия последней клавиши. Если при опросе
         клавиатуры через внешний порт мы имели сигнал только пока  кла-
         виша нажата, то здесь код  сидит в переменной до тех  пор, пока
         не будет нажата какая-либо другая клавиша, и тогда код сменится
         другим. Это  означает, например  для предыдущей  программы, что
         стоит Вам только один раз коснуться клавиши "Р", как  рисование
         синей полосы будет идти безостановочно, пока не будет достигнут
         край экрана или пока  не произойдет нажатие другой  клавиши. Но
         такое управление тоже часто применяется в программах, и об этом
+                                  - 184 -

         надо знать.
              3. Если  этот недостаток  является существенным,  то можно
         воспользоваться  системной  переменной  KSTATE.  Она занимает 8
         байтов, начиная с адреса 23552 по 23559. Строго говоря, это  не
         просто переменная,  а это  небольшая область  памяти, в которой
         процедуры ПЗУ, отвечающие за опрос клавиатуры, организуют  свои
         временные хранилища информации. Наиболее интересен для нас  ад-
         рес клавиши, причем он хоть и "запоминается" там, но ненадолго,
         в отличие от  переменной LASTK. Здесь  Вы можете прочитать  код
         последней нажатой клавиши, причем он хоть и "запоминается" там,
         но ненадолго. Он хранится  пять циклов прерываний, а  поскольку
         в "Спектруме" прерывания происходят каждую 1/50 секунды, то код
         хранится в этой ячейке примерно 0.1 секунды.
              4. И, наконец, последнее  замечание. Для того, чтобы  сис-
         темные процедуры ПЗУ могли  производить опрос клавиатуры и  ус-
         танавливать системные  переменные LASTK  и KSTATE,  необходимо,
         чтобы маскируемое прерывание  было разрешено. Надо  убедиться в
         этом, а лучше принудительно  перед опросом клавиатуры дать  ко-
         манду EI (код FB HEX).

                    4.5. Проверка оперативной памяти компьютера.
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Приведенная ниже программа также является полезной и  поу-
         чительной. Логика ее работы такая. Перед вызовом этой процедуры
         в регистровой  паре HL  должен быть  установлен начальный адрес
         проверяемой области ОЗУ, а в паре ВС - длина этой области. Про-
         верка проводится  в пять  этапов. В  каждую ячейку записывается
         проверочный байт, а затем  проверяется, как он туда  записался.
         Если вскрывается ошибка, то программа прерывается с  включением
         флага CARRY, а содержимое  регистра HL указывает на  адрес оши-
         бочной ячейки. Если  проверка прошла нормально,  то проверяемая
         область памяти после выхода  будет содержать нули, а  если нет,
         то в аккумуляторе будет содержаться то число, которое было  за-
         писано в ячейку, но не воспроизвелось.
              Мы ассемблировали  эту программу  с адреса  26000, но  Вы,
         конечно, можете это переделать.
              На первом проходе в память записываются нули и  проверяют-
         ся.
+                                  - 185 -

              На  втором  проходе  записывается  FF.  На  третьем  -  AA
         (10101010B). На четвертом - 55 HEX (01010101B). Пятый проход  -
         проверка с "плавающим" битом.  Сначала помещается число 80  HEX
         (1000 000B), а затем  включенный бит перемещается вправо,  пока
         не пройдет полный оборот  и происходит переход к  проверке сле-
         дующего адреса.

         Адрес Метка Маш.код  Мнемоника      Комментарий
         6590        7A       LD   A,D       Проверка заданной области
                                             ОЗУ на 0
         6591        B3       OR   E
         6592        C8       RET  Z         Выход, если так
         6593        42       LD   B,D       В ВС - размер области
         6594        4B       LD   C,E
         6595  TEST1 97       SUB  A         Это то же, что и LD A,0
         6596        CDC065   CALL FILL      Вызов процедуры заполнения
                                             области байтом
         6599        D8       RET  C         Выход, если найдена ошибка
                                             (флаг С включен)
         659A  TEST2 3EFF     LD   A,FF
         659C        CDC065   CALL FILL
         659F        D8       RET  C
         65A0  TEST3 3EAA     LD   A,AA
         65A2        CDC065   CALL FILL
         65A5        D8       RET  C
         65A6  TEST4 3E55     LD   A,55
         65A8        CDC065   CALL FILL
         65AB        D8       RET  C
         65AC  TEST5 3E80     LD   A,80      В акк-р загружен байт
                                             10000000
         65AE  REP   77       LD   (HL),A    Этот байт загружен в
                                             проверяемый адрес
         65AAF       BE       CP   (HL)      И тут же проверяется
         65B0        37       SCF            Включается флаг С на случай
                                             выхода по ошибке
         65B1        C0       RET  NZ        Выход, если ошибка
         65B2        0F       RRCA           Сдвиг включенного бита
                                             вправо
+                                  - 186 -

         Адрес Метка Маш.код  Мнемоника      Комментарий
         65B3        FE80     CP   80        Сравнение нового байта с
                                             1000 0000, т.е. сделан
                                             полный оборот или нет?
         65B5        20F7     JR   NZ,REP    Если нет, то возврат и
                                             опять проверка
         65B7        3600     LD   (HL),00   Если да, то сначала
                                             обнулить проверяемую ячейку
         65B9        23       INC  HL        и перейти к проверке
                                             следующей, уменьшив счетчик
         65BA        0B       DEC  BC        проверяемых ячеек ОЗУ
         65BB        78       LD   A,B       Проверка на конец
         65BC        B1       OR   C         проверяемой области
         65BD        20ED     JR   NZ,TEST5  Переход к проверке
                                             следующей ячейки, если
                                             область не исчерпана
         65BF        C9       RET            Выход, если исчерпана


         65C0  FILL  E5       PUSH HL
         65C1        C5       PUSH BC        Запомнили на стеке HL и BC
         65С2        5F       LD   E,A       Временно освободили А для
                                             других дел
         65C3        77       LD   (HL),A    Засылка в проверяемую
                                             ячейку проверочного числа
         65С4        0B       DEC  BC        Уменьшение счетчика
                                             проверяемых ячеек
         65C5        78       LD   A,B       Проверка на то, что область
         65С6        B1       OR   C         исчерпана
         65C7        7B       LD   A,E       Восстановили аккумулятор
         65C8        2805     JR   Z,COMP    Переход на проверку, если
                                             длина проверяемой области
                                             была всего 1 байт
         65CA        54       LD   D,H       Подготовка к применению
         65CB        5D       LD   E,L       команды для быстрой
                                             переброски байта  LDIR
         65CC        13       INC  DE        Адрес приемника на единицу
                                             больше источника
+                                  - 187 -

         65CD        EDB0     LDIR           Переброска байта
         65CF  COMP  C1       POP  BC        Восстановление со стека
         65D0        E1       POP  HL        регистровых пар
         65D1        E5       PUSH HL        без изменение содержания
         65D2        C5       PUSH BC        стека
         65D3  AGAIN EDA1     CPI            Сравнение
         65D5        2007     JR   NZ,ERROR  Если сравнение не прошло,
                                             то переход на подпрограмму
                                             обработки ошибки
         65D7        EAD365   JP   PE,AGAIN  Напоминаем, что команда CPI
                                             обнуляет флаг четности, ес-
                                             ли исчерпан список сравне-
                                             ния, т.е. если BC = 0
         65DA        C1       POP  BC        Восстановление регистров BC
         65DB        E1       POP  HL        и HL перед выходом
         65DC        B7       OR   A         Выключение флага C,
                                             поскольку ошибок нет
         65DD        C9       RET            Выход
         65DE  ERROR C1       POP  BC        Восстановление регистров
         65DF        D1       POP  DE        перед выходом
         65E0        37       SCF            Включение флага "С",
                                             поскольку была ошибка
         65E1        C9       RET            Выход


              4.6. Практические приемы работы с калькулятором.
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              В части 1 мы достаточно подробно осветили принципы  работы
         встроенного калькулятора "Спектрума", а в "Справочнике"  (часть
         3) дали полную сводку  команд калькулятора с указанием  особен-
         ностей их  применения. Система  команд калькулятора  достаточно
         проста, но вместе с тем при практическом программировании начи-
         нающий пользователь  упирается в  проблему. А  как организовать
         взаимосвязь трех основных  инструментов "Спектрума" -  БЕЙСИКа,
         машинного кода и калькулятора?
              Если связь между БЕЙСИКом и машинным кодом  осуществляется
         достаточно просто через выделение области программных  перемен-
         ных, к которым БЕЙСИК  обращается через PEEK, POKE,  а машинный
+                                   - 188 -

         код через LD..., то с калькулятором могут появиться сложности.
              Вы уже должны знать, что вся работа калькулятора  строится
         вокруг специальной области памяти - стека калькулятора. Если  у
         Вас есть инструмент для  того, чтобы из БЕЙСИКа  помещать пере-
         менные на стек калькулятора  (не путать с машинным  стеком про-
         цессора), то и проблем для Вас не будет. Логика работы такая:
              - поместить данные из БЕЙСИКа на стек калькулятора;
              - перейти в машинный код;
              - перейти в калькулятор;
              - обработать данные;
              - выйти из калькулятора;
              - войти в БЕЙСИК
              Но данные на стеке калькулятора хранятся и  обрабатываются
         в пятибайтной (интегральной) форме, в этом и состоит  проблема.
         Можно,  конечно,  организовать  стек  калькулятора в нужной Вам
         области памяти, затем произвести вручную пересчет  передаваемых
         Вами данных в интегральную форму, а потом через POKE  заполнить
         стек нужным  Вам числом,  но это  очень утомительно. Существуют
         хитрые приемы и здесь мы считаем своим долгом с Вами поделиться
         специальной техникой.
              Рассмотрим простейшую БЕЙСИК-строку: LET P = Q + USR addr.
         Вы, конечно, понимаете, что по такой команде будет вызвано  ис-
         полнение программы в машинных кодах, которая записана,  начиная
         с адреса addr. А уж что будет дальше - это вопрос, который  за-
         висит от  того, что  написано в  этой машинокодовой  программе.
         Может быть после нее Вы в БЕЙСИК и не вернетесь, и до  вычисле-
         ния Q + .... дело и не дойдет. Зато вместе с запуском машинного
         кода вышеуказанная БЕЙСИК-строка делает еще одно дело. Она  по-
         мещает содержимое переменной Q на вершину стека калькулятора!!!
         И, конечно, же делает это  в пятибайтной форме. Если теперь  Вы
         организуете машинный код с адреса addr так, чтобы он  переходил
         в  калькулятор  и  производил  обработку  данных, помещенных на
         стек, то проблема решена.
              Рассмотрим конкретный пример. Допустим, Вам надо вычислить
         выражение P  = SQR(Q+1).  Допустим, мы  расположим наш машинный
         код, начиная с адреса 30000.
              Дайте команду LET P = Q + USR 30000. Q поместится на  вер-
         шину стека калькулятора, и запустится машинный код, начинающий-
+                                  - 189 -

         ся с адреса 30000.

         АДРЕС   КОД  МНЕМОНИКА    СТЕК     КОММЕНТАРИЙ
         30000   EF   RST 28        Q      Включение калькулятора, Q уже
                                           находится на стеке
         30001   A1   stk_one      Q,1     Команда калькулятора,
                                           помещающая на стек единицу
         30002   0F   add          Q+1     Команда калькулятора
                                           "сложение"
         30003   28   sqr        SQR(Q+1)  Извлечение квадратного корня
         30004   38   end calc             Выключение калькулятора
         30005   C9   RET                  Возврат в БЕЙСИК.

              А как быть, если надо передать последовательность  данных?
         А если надо передать символьный стринг?
              В этом случае можно воспользоваться оператором БЕЙСИКа DEF
         FN <имя> (). Он служит для объявления функции пользователя, ко-
         торая  в  дальнейшем  может  вызываться  на исполнение командой
         FN <имя> (). В  круглых скобках может стоять  список параметров
         функции пользователя, отделенных друг от друга запятыми.  Зада-
         ние и вызов функции пользователя выглядят по-разному в  зависи-
         мости от того, являются  ли они числовыми или  стринговыми. На-
         пример, они могут выглядеть так:
              DEF FN A(K,L,M,C$,D$...) - числовая функция
              DEF FN A$(K,L,M,C$,D$...) - символьная функция
              Аналогично выглядят и обращения к ним:
              FN A(K,L,...);      FN A$(K,L,...)
              Чтобы двигаться дальше, нам необходимо знать, как хранятся
         в БЕЙСИКе параметры функций пользователя. Для этого  выделяется
         специальная область памяти, на которую указывает системная  пе-
         ременная DEFADD, имеющая длину два байта и адреса 23563, 23564.
         Найти адрес, с которого начинается размещение параметров  функ-
         ции пользователя, несложно:
              PRINT PEEK 23563 + 256*PEEK 23564
              Каждый параметр числовой  функции пользователя занимает  8
         байтов, а  стринговой -  девять байтов,  и хранятся  они там  в
         следующем формате:

+                                  - 190 -

              Для числовой функции:
         Байт 1 - Имя функции (один символ);
         Байт 2 - код 0Е;
         Байт 3...7 - значение параметра в пятибайтной форме;
         Байт 8 - код 29, если этот параметр последний, если нет - код
                  2С;
              Для символьной функции:
         Байт 1 - Имя функции (один символ);
         Байт 2 - код 24;
         Байт 3 - код 0Е;
         Байт 4...8 - значение параметра в пятибайтной форме;
         Байт 9 - код 29, если этот параметр последний, если нет - код
                  2С.
              Теперь рассмотрим, как список параметров функции пользова-
         теля может быть использован для передачи на вершину стека каль-
         кулятора данных в пятибайтной  форме. Для этого могут  быть ис-
         пользованы конструкции:
              DEF FN A(......) = USR addr - для работы с числами;
              DEF FN A$(......) = P$ AND USR addr - для работы со
                                  стрингами.
              И теперь Ваша задача организовать, начиная с адреса addr
         такую процедуру в машинных кодах, которая прочитает передавае-
         мое в качестве параметра функции пользователя число в пятибайт-
         ной форме, поместит его на стек и перейдет к переброске следу-
         ющего числа, если данный параметр не является последним. На-
         пример, такая процедура может выглядеть так:

         2A0B5C       LD   HL,(DEFADD)   указание на адрес параметров
                                         функции пользователя DEF FN
         23      REP  INC  HL            теперь HL указывает на 2-й
                                         байт, который 0Е или 24
         7Е           LD   A,(HL)        проверка этого байта
         FE0E         CP   0E
         2801         JR   Z,NUMB        Вперед, если функция числовая
         23           INC  HL            Если символьная, то лишний байт
                                         надо пропустить
         23      NUMB INC  HL            Теперь HL указывает на
                                         пятибайтную форму
+                                  - 191 -

         CDB433       CALL 33B4          Вызов процедуры ПЗУ STACK-NUM,
                                         которая отправляет пятибайтное
                                         число на стек калькулятора
         7E           LD   A,(HL)
         FE2C         CP   2C            Проверка на то, что этот
                                         параметр последний
         28F0         JR   Z,REP         Возврат на повтор, если не так
         C9           RET                Выход в БЕЙСИК.

              Можно передавать  также и  переменные из  БЕЙСИКа на  стек
         калькулятора. Первое, что надо сделать - это поместить имя  пе-
         ременной в качестве стринга  на стек калькулятора, а  затем ис-
         пользовать команду калькулятора  "val" для числовой  переменной
         или "val$" для символьной. Однако надо помнить, что обе эти ко-
         манды являются  зависимыми от  регистра В  процессора, т.е. еще
         находясь в машинном коде, до  команды RST 28, надо в  регистр В
         поместить 1D для команды "val" или 18 для команды "val$".
              Чтобы поместить имя переменной на вершину стека в качестве
         стринга, можно поместить туда  в упакованной форме код  первого
         символа, затем конвертировать его в символ командой калькулято-
         ра chr$, затем тоже для  второго символа, слить их воедино  ко-
         мандой s_add и  т.д. в зависимости  от длины имени  переменной.
         Рассмотрим два примера - для числовой переменной и для  строко-
         вой.

                        Передача числовой переменной.
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         МАШ.КОД    МНЕМОНИКА      КОММЕНТАРИЙ
         061D       LD   B,1D      Предварительная настройка регистра B
                                   с целью последующего вызова команды
                                   калькулятора val
         EF         RST  28        Включение калькулятора
         3440В00041 stk_data 41    Поместить на стек код буквы А(41 HEX)
         2F         chr$           Преобразование кода 41 в стринг "А"
         3В         execute_b      Выполнение команды, код которой запи-
                                   сан в регистре В, т.е. преобразование
                                   переменной А в ее числовое значение
         38         end_calc       Выключение калькулятора
+                                  - 192 -

                          Передача строковой переменной.
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Пусть имя переменной B$.
         МАШ.КОД    МНЕМОНИКА      КОММЕНТАРИЙ
         0618       LD   B,18      Предварительная настройка регистра B
                                   с целью последующего вызова команды
                                   калькулятора val$
         EF         RST  28        Включение калькулятора
         3440В00042 stk_data 42    Поместить на стек код буквы B(42 HEX)
         2F         chr$           Преобразование кода 42 в стринг "B"
         3440B00024 stk_data 24    Помещение на стек кода знака $
         2F         chr$           Преобразование кода 24 в стринг "$"
         17         s_add          Слияние стрингов в стринг "В$"
         3В         execute_B      Преобразование имени стринга "B$" в
                                   его значение.
         38         end_calc       Выключение калькулятора


               4.7  Примеры использования прерываний 2-го рода.
               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              В  первой  части  этой  книги мы рассмотрели теоретические
         аспекты использования прерываний  2-го типа в  пользовательских
         программах. Здесь мы рассмотрим несколько конкретных примеров.
              Так как полное понимание концепции использования  прерыва-
         ний очень важно, ниже приведены примеры программ обработки пре-
         рываний и включения режима  "IM 2", написанные на  АССЕМБЛЕРе с
         комментариями.  Желательно  предварительно  поработать  с ними,
         прежде чем начать создавать свои программы.
              Вообще, для работы с "IM 2" необходимо создание двух прог-
         рамм сразу : включающей прерывания "IM 2" и, собственно,  прог-
         раммы обработки  прерываний.   После запуска  первой программы,
         она может быть удалена из памяти.
              Если Вы  будете пользоваться  каким-либо АССЕМБЛЕРОМ,  до-
         пускающим двойную установку адреса трансляции "ORG",  например,
         это разрешает программа "ZEUS" фирмы "CRYSTAL COMPUTING", то Вы
         можете набирать программы так, как это представлено в  листинге
         программ, иначе Вам придется разбивать программы на две части и
         транслировать их по отдельности с нового адреса  "ORG".
+                                  - 193 -

              1. Эта  программа демонстрирует  смену типов  прерываний с
         "IM 1" на "IM 2" c вызовом указателя из ПЗУ (см. ч.III, гл.5 ).
         После запуска программы в правом верхнем углу появится мигающий
         черно-белый атрибут,  свидетельствующий о  том, что  прерывания
         переключены, и до  тех пор, пока  включен "IM 2",  этот атрибут
         будет постоянно включен. При этом вы сможете работать в БЕЙСИКЕ
         или в других программах (если, конечно, они не перекрывают  об-
         ласть  памяти,  занимаемую   программой  обработки   прерываний
         "IM 2"), как и в обычном режиме.
           10          ORG 40000    ; адрес трансляции и запуска про-
           20                       ; граммы смены прерываний.
           30          DI
           40          LD A,33      ; выбираем адрес точки прерываний
           50          LD I,A       ; равным 33485 и загружаем в "I"
                                    ; новый вектор.
           60          IM 2         ; смена "IM 1" на "IM 2".
           70          EI
           80          RET

           90          ORG 33485    ; программа обработки "IM 2".
          100          DI
          110          PUSH HL
          120          LD HL,581FH  ; адрес экрана для атрибута.
          130          LD (HL),C7H  ; загружаем по адресу код атрибута.
          140          POP HL
          150          JP 0038H     ; переход для сканирования
                                    ; клавиатуры.
              2. Это программные часы,  работающие и выводящие время  на
         экран по  прерыванию. В  этой программе  имеется своя процедура
         для печати в экранную область. Вообще, если Вы хотите  что-либо
         печатать  на  экране  во  время  прерываний, то лучшим способом
         является введение своей  подпрограммы печати, т.к.  при исполь-
         зовании программ печати из ПЗУ  Вы можете запутаться  с  сохра-
         нением открытого канала печати.
              Программа  часов  использует  данные  в двоично-десятичной
         форме, именно в такой форме Вам необходимо перед запуском часов
         задать время, записав в ячейки :

+                                  - 194 -

                         63667 - часы,
                         63668 - минуты,
                         63669 - секунды.
              Для задания времени из БЕЙСИКА можно пользоваться следую-
         щим способом.  Например, Вы задаете время : 12 часов  24 минуты
         30 секунд:
              Тогда в 63667 запишем 1*16+2=18,
                      63668       - 2*16+4=36,
                      63669       - 3*16+0=48.
              Т.е. десятки умножаем на 16 и прибавляем младший разряд.
           10  HOUR   EQU 63667    ; точка хранения часов.
           20  MIN    EQU 63668    ; -/-/-/-/- минут.
           30  SEC    EQU 63669    ; -/-/-/-/- секунд.
           40  COR    EQU 63666    ; -/-/-/-/- переменной коррекции.
           50         ORG 65040    ;адрес трансляции и запуска программы
           60                      ;смены прерываний.
           70         DI
           80         PUSH HL
           90         LD A,FDH     ; адрес указателя FDFFH - 65023.
          100         LD I,A
          110         LD HL,FDFFH  ; заполняем указатель адресом старта
          120         LD (HL),F7H  ; программы обработки "IM 2" -
                                   ; F7F7H - 63479
          130         INC HL
          140         LD (HL),F7H  ;
          150         POP HL
          160         IM 2
          170         EI
          180         RET
          190         ORG 63479    ; адрес программы часов по "IM 2".
          200         PUSH IX
          210         PUSH AF
          220         PUSH BC
          230         PUSH DE
          240         PUSH HL
          250         DI
          260         LD A,(COR)   ; проверка на необходимость изменения
          270         DEC A        ; счетчика времени.
+                                  - 195 -

          280         LD (COR),A
          290         JP NZ,WRITE  ; если не ноль, то сразу на печать,
          300         LD A,32H     ; иначе восстановим переменную коррекции и
          310         LD (COR),A   ; и ведем подсчет времени.
          320         LD A,(SEC)   ; подпрограмма подсчета секунд.
          330         AND A
          340         ADC A,01
          350         DAA
          360         LD (SEC),A
          370         CP 60H       ; если не 60,
          380         JP NZ,WRITE  ; то переход на печать,
          390         XOR A        ; иначе обнуление секунд и подсчет минут.
          400         LD (SEC),A
          410         LD A,(MIN)   ; подпрограмма подсчета минут.
          420         AND A
          430         ADC A,01
          440         DAA
          450         LD (MIN),A
          460         CP 60H
          470         JP NZ,WRITE
          480         XOR A
          490         LD (MIN),A
          500         LD A,(HOUR)  ; подпрограмма подсчета часов.
          510         AND A
          520         ADC A,01
          530         DAA
          540         LD (HOUR),A
          550         CP 24H       ; проверка на 24-х часовой цикл.
          560         JP NZ,WRITE
          570         XOR A
          580         LD (HOUR),A
          590  WRITE  LD IX,4018H  ; программа вывода данных на экран,
          600                      ; в IX содержится адрес начала печати.
          610         LD A,(HOUR)  ; печатаем часы.
          620         CALL PRFP
          630         LD A,0AH     ; печатаем двоеточие.
          640         CALL PRCH
          650         LD A,(MIN)   ; печатаем минуты.
+                                  - 196 -

          660         CALL PRFP
          670         LD A,0AH
          680         CALL PRCH
          690         LD A,(SEC)   ; печатаем секунды.
          700         CALL PRFP
          710         LD HL,5818H  ; заполняем место печати времени
          720         LD B,08      ; мигающими черно-белыми атрибутами.
          730  FLAG   LD (HL),C7H
          740         INC HL
          750         DJNZ FLAG
          760         POP HL
          770         POP DE
          780         POP BC
          790         POP AF
          800         POP IX
          810         JP 0038H     ; переход для сканирования клавиатуры.
          820  PRFP   PUSH AF      ; подпрограмма печати чисел.
          830         SRL A        ; вычисляем код старшей цифры.
          840         SRL A
          850         SRL A
          860         SRL A
          870         CALL PRCH    ; печатаем старшую цифру.
          880         POP AF
          890         AND 0FH      ; вычисляем код младшей цифры.
          900         CALL PRCH    ; печатаем младшую цифру.
          910         RET
          920  PRCH   PUSH IX      ; подпрограмма печати литеры.
          930         LD HL,(5C36H); загружаем адрес знакогенератора.
          940         LD DE,0180H  ; производим необходимое смещение.
          950         ADD HL,DE
          960         EX DE,HL
          970         LD L,A       ; вычисляем по коду литеры ее адрес
          980         LD H,00      ; в таблице знакогенератора.
          990         ADD HL,HL
         1000         ADD HL,HL
         1010         ADD HL,HL
         1020         ADD HL,DE
         1030         LD DE,0100H
+                                  - 197 -

         1040         LD B,08
         1050  PSET   LD A,(HL)    ; выводим на экран литеру.
         1060         XOR FFH
         1070         LD (IX+00),A
         1080         INC HL
         1090         ADD IX,DE
         1100         DJNZ PSET
         1110         POP IX
         1120         INC IX
         1130         RET
              Вы, вероятно заметили, что в подпрограмме "PRCH" есть сме-
         щение в знакогенераторе до литеры "0", т.е. все коды литер сме-
         щены на 48 байтов по сравнению с таблицей ASCII. Возможно,  это
         неправильно, но упрощает подпрограммы печати чисел и литер.
              Предлагаемые программы можно переместить, если  рассчитать
         новые значения указателей и изменить содержимое регистра "I".


                           5.  КАНАЛЫ И ПОТОКИ

              Для  многих  начинающих  пользователей  "Спектрума"  такие
         понятия, как каналы  и потоки могут  зву чать, как  непонятные
         жаргонные  обозначения,  но  на  самом  деле за ними скрывается
         интересная концепция, которая позволит Вам взять от  компьютера
         то, что другими способами взять не так просто.
              Работая в БЕЙСИКе, Вы можете и не задумываться о потоках и
         каналах, а вот программируя в машинных кодах, без них не  обой-
         тись.
              Можете представить себе, что канал - это некоторое  техни-
         ческое  устройство,  используемое  для ввода/вывода информации.
         Надо,  правда,оговориться,  что  канал  - не всегда техническое
         устройство. Каналом,  например, может  быть файл  на диске или,
         скажем,  в  памяти  Вашего  компьютера.  В файл ведь тоже можно
         заносить информацию и можно ее оттуда считывать.
              Проще  всего  представить  концепцию  каналов и потоков на
         примере морского побережья с многочисленными заливами и  бухта-
         ми. Со стороны суши в них впадают многочисленные ручьи и  реки.
         Так вот, эти заливы  и бухты - это  каналы, а те ручьи  и реки,
+                                  - 198 -

         которые в них впадают - это потоки, подключенные к каналам.

                            5.1 Стандартные каналы.
                            ~~~~~~~~~~~~~~~~~~~~~~~~
              Стандартными  каналами  "Спектрума"  для вывода информации
         являются каналы "К" -  нижние две строки экрана  (системное ок-
         но), "S" - главная часть  экрана и "P" - стандартный  "ZX-прин-
         тер".
              К этим каналам стандартно подключены потоки:
              - поток #0 - к каналу "К";
              - поток #1 - тоже подключен к каналу "K";
              - поток #2 - подключен к каналу "S";
              - поток #3 - к каналу "P".
              Таким образом, оказываются идентичными следующие команды
         ввода/вывода:
             PRINT #0 "Hello"; A$ - то же самое, что и INPUT "Hello"; A$
             PRINT "Hello" - то же самое, что и PRINT #2 "Hello"
             LPRINT "Hello" - то же самое, что и PRINT #3 "Hello"
             Номер, стоящий  после знака  # в  вышеприведенных примерах,
         является номером потока. Поскольку эти потоки подключены  стан-
         дартно  и  переподключены  быть  не  могут, мы программируем на
         БЕЙСИКе и используем операторы INPUT, PRINT, LPRINT без  указа-
         ния номера потока.
              В  "Спектруме"  каждый  канал  имеет имя, которое выражено
         одной буквой алфавита. Так, канал "S" - это экран, потому,  что
         по-английски слово экран звучит, как "Screen".
              Оператор OPEN# служит для  того, чтобы подключить поток  к
         каналу. Так, Вы можете в БЕЙСИКе дать команду OPEN#6,"S" и  тем
         самым подключите шестой поток к экрану и тогда команда PRINT #6
         будет печатать  текст на  экране точно  так же,  как это делает
         обычная команда PRINT.
              Аналогично, Вы  можете представить,  что клавиатура  - это
         устройство, предназначенное для  ввода информации и  потому это
         тоже канал. Он  имеет имя "К"  (Keyboard - клавиатура).  К нему
         можно  подключить  поток  точно  так  же,  как  мы это делали с
         экраном. Например, OPEN #n,"K" - подключает к каналу клавиатуры
         поток номер n.
              Всего  Вы  можете  иметь  не  более  шестнадцати потоков с
+                                  - 199 -

         номерами от 0 до 15. Потока с номером 16 не существует и,  если
         Вы  попробуете  его  использовать,  то  получите  сообщение  об
         ошибке.
              Мы уже сказали о том, что потоки от 0 до 3 являются  стан-
         дартными  и  организованы  без  нашего  участия. Они стандартно
         подключены к стандартным каналам.
              Каналы "S" и "P" предназначены только для вывода  информа-
         ции, поэтому например PRINT #2 или PRINT #3 - возможны, а INPUT
         #2 или INPUT #3 - невозможны.
              В отличие  от них,  канал "К"  может использоваться  и для
         ввода и для вывода.
              INPUT  #0  -  самая  обычная  команда  INPUT, а PRINT #0 -
         выполняет печать Вашего сообщения  в нижние две строки  экрана,
         которые выполняют роль "системного окна". Это те самые  строки,
         в которых появляется информация при работе команды INPUT.


                            5.2 Прочие каналы.
                            ~~~~~~~~~~~~~~~~~~
              После подключения дополнительной периферии,  располагающей
         своим ПЗУ, к стандартным каналам могут добавляться дополнитель-
         ные. Так, например,  подключение ИНТЕРФЕЙСа-1 (ZX-INTERFACE  1)
         создает для пользователя несколько новых каналов:
              - "M" - канал микродрайва;
              - "N" - канал локальной сети;
              - "T" - канал принтера для печати программ (коды выше 165
                      интерпретируются, как токены ключевых слов
                      "Спектрума").
              - "B" - канал принтера для печати данных (все коды
                      интерпретируются по своему значению).

              Дисковые  интерфейсы  могут  добавлять  дополнительно свои
         каналы, например, канал "D" и т.п. Но у Вас есть возможность  и
         для  создания  собственных  каналов.  Вы  можете создавать их в
         оперативной памяти  и эффективно использовать. Такие  каналы мы
         будем называть пользовательскими, но для того, чтобы  научиться
         их создавать,  нам надо  ознакомиться с  ОБЛАСТЬЮ ИНФОРМАЦИИ  О
         КАНАЛАХ.
+                                  - 200 -

                       5.3 Область информации о каналах.
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Вся концепция каналов и потоков базируется на  существова-
         нии в оперативной памяти компьютера области, называемой "Облас-
         тью информации  о каналах".  Эта область  лежит непосредственно
         перед БЕЙСИК-областью, чуть ниже  ее. То есть, она  лежит между
         системными переменными и БЕЙСИКом. Начинается она с адреса,  на
         который указывает системная переменная CHANS, расположенная  по
         адресу 5C4FH  (23631) и  заканчивается байтом,  в котором стоит
         маркер 80H.  Далее уже  идет Ваша  БЕЙСИК-программа, на  начало
         которой,  как  известно,  указывает  системная переменная PROG,
         расположенная по адресу 5C53H (23635).
              Для того, чтобы создать  свой канал, Вам практически  надо
         переорганизовать данные в этой области, может быть и раздвинуть
         эту область, переместив вверх маркер и поменяв значение PROG, а
         также разместить в памяти две процедуры. Одну - для обеспечения
         ввода в Ваш канал (INPUT)  и вторую - для обеспечения  вывода -
         (PRINT).
              Каждый  канал  должен  иметь  блок  информации  о канале -
         CHANNEL INFORMATION BLOCK (CIB).  Он и располагается в  области
         информации о каналах. В  этом блоке содержится вся  информация,
         необходимая для  того, чтобы  канал мог  функционировать. Cтан-
         дартные  каналы  "K",  "S",  "P"  имеют  каждый по пятибайтному
         блоку, но это исключение. Все  остальные каналы, в том числе  и
         те, которые создадите Вы, должны  иметь в этом блоке не  менее,
         чем по 11 байтов.

                    Блок CIB для стандартного канала.
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Байты 0 и 1 - адрес процедуры вывода (PRINT # );
              Байты 2 и 3 - адрес процедуры ввода (INPUT # );
              Байт 4 - имя канала (код одной буквы - "K", "S" и т.п.).

              Блок CIB для канала, создаваемого стандартной периферией.
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Если  при  подключении  стандартных периферийных устройств
         создаются новые  каналы, то  блок информации  имеет длину  в 11
         байтов и более. Обычно адресуются к данным, имеющимся в этом
+                                  - 201 -

         блоке путем индексной адресации, поместив в регистр IX базовый
         адрес начала блока. Так, например, при подключении ИНТЕРФЕЙСа-1
         блоки дополнительных каналов имеют следующий формат:

               IX+0 (2 байта) - адрес процедуры обработки ошибок 0008.
               IX+2 (2 байта) - адрес процедуры обработки ошибок 0008.
               IX+4 (1 байт) - имя канала.
               IX+5 (2 байта) - адрес процедуры PRINT#.
               IX+7 (2 байта) - адрес процедуры INPUT#.
               IX+9 (2 байта) - длина данного блока (не менее 000BH).
               IX+0B (длина любая) - любая дополнительная информация.

                  Блок CIB для канала, создаваемого пользователем.
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
               IX+0 (2 байта) - адрес процедуры вывода (PRINT#).
               IX+2 (2 байта) - адрес процедуры ввода (INPUT#).
               IX+4 (1 байт) - имя канала.
               IX+5 (2 байта) - число "1234" - оно свидетельствует о
                                том, что канал - пользовательский.
               IX+7 (2 байта) - адрес закрывающей процедуры CLOSE#.
               IX+9 (2 байта) - длина данного блока (не менее 000BH).
               IX+0B (длина любая) - любая дополнительная информация.

                       5.4 Подключение потоков.
                       ~~~~~~~~~~~~~~~~~~~~~~~~
              Теперь, когда мы с  Вами разобрались с каналами  и поняли,
         что  это  не  так  сложно,  что  это всего лишь еще один способ
         организации памяти компьютера и взаимодействия процедур друг  с
         другом, вернемся к потокам.
              Среди  системных  переменных  компьютера,  есть переменная
         STRMS. Ее адрес  - 5C10H (23568).  Ее назначение -  указание на
         адреса каналов, подключенных к потокам.  Длина этой  переменной
         - 38  байтов и,  если говорить  откровенно, то  никакая это  не
         переменная, а самая  настоящая указательная таблица,  в которой
         каждому потоку отдано по 2 байта для того, чтобы хранить в  них
         адрес канала, к которому подключен данный поток.
              Внимательный читатель, конечно заметил, что 16 потоков  по
         2 байта на поток составляет 32 байта, а системная переменная
+                                  - 202 -

         STRMS имеет почему-то 38 байтов.  Дело в том, что  есть еще три
         системных потока, занимающиеся своими "внутренними" делами при
         работе ПЗУ.  Это "минус третий" поток (FD), "минус второй" (FE)
         и "минус первый" (FF). Таким образом, таблицу STRMS можно пред-
         ставить, как 19 двухбайтных системных переменных:
                           STRMS_FD   5C10 (23568)
                           STRMS_FE   5C12 (23570)
                           .......................
                           STRMS_0F   5C36 (23606)
              Поток FD подключен  к каналу "К"  и не должен  переподклю-
         чаться. Аналогично поток FE  подключен к каналу "S".  Интересен
         поток FF, который  подключен к "внутреннему"  каналу "R" (мы  о
         нем  не  упоминали,  поскольку  маловероятно, чтобы им пришлось
         кому-либо   пользоваться),   который   занимается  организацией
         динамического копирования информации из одних областей памяти в
         другие, производя при этом "раздвигание" информации для вставки
         новой в середину имеющейся.
              Итак,  с  помощью  таблицы  переменных  STRMS  выполняется
         привязка  потоков  к  каналам.  Если  какая-либо  переменная из
         набора  STRMS  содержит  0000,  то  это означает, что к данному
         потоку не подключен ни один канал, иначе коворя, канал  закрыт.
         Если же там не ноль, значит канал открыт и этот поток подключен
         к этому каналу.  Фактически же поток  подключен к тому  каналу,
         информационный  блок  CIB  которого  находится  по  адресу,  на
         который  указывает  системная  переменная  CHANS плюс величина,
         содержащаяся в STRMS для данного потока минус единица:
                           (CHANS) + (STRMS_n) -1

              5.5.Практические приемы работы с каналами и потоками.
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Итак, мы знаем, что информация о каналах хранится в ОЗУ, в
         ОБЛАСТИ ИНФОРМАЦИИ О КАНАЛАХ в виде блоков информации о канале.
         Конечно,  при  включении  компьютера  там  ничего  пока  нет, а
         информация  эта  содержится  только  в  ПЗУ и при инициализации
         системы  копируется  в  ОЗУ.  Такое двойное хранение информации
         сделано в качестве шага  навстречу пользователю, ведь в  ОЗУ он
         может менять  информацию так,  как ему  необходимо. Рассмотрим,
         например, как выглядит в ОЗУ блок информации по каналу "S"  (он
+                                  - 203 -

         занимает, как мы уже установили, 5 байтов).
              Адрес   Содержимое   Комментарий
              23739      244       9*256+244 = 2548 - адрес процедуры
              23740        9         обслуживания канала при выводе.
              23741      196       21*256+196 = 5572 - адрес процедуры
              23742       21         обслуживания канала при вводе.
              23743       83       Код литеры "S"
              Во многих фирменных программах для того, чтобы не искажать
         изображение  на  экране,  полученное  после  загрузки фирменной
         экранной заставки, меняют  адрес процедуры обслуживания  канала
         "S" при выводе. Это делают подачей команд:
                               POKE 23739,82
                               POKE 23740,0
               При  этом  загрузка  блока  в компьютер будет выполняться
         нормально, но  на экран  надписи program....,  bytes.... и т.п.
         выводиться не будут.
               Так происходит  потому, что  в ПЗУ  по адресу  82 (0052H)
         записана команда RET (код C9H) и обращение туда в момент вывода
         информации на  экран приводит  просто к  возврату и  все. В ПЗУ
         имеются  сотни  адресов,  в  которых  записана  команда  RET  и
         использовать здесь можно было бы любую.
              Использование же для этих целей команды CLOSE#2 - неприем-
         лимо.
              После  загрузки  всех  блоков   программы  адрес процедуры
         вывода восстанавливается.
                               POKE 23739,244
                               POKE 23740,0
              Этот нехитрый прием пользователи могут применять и в своих
         целях.
              Другое, не менее интересное применение концепции каналов и
         потоков для практических целей - для защиты своей программы  от
         несанкционированного  вмешательства.  Это  делается  изменением
         информации  о   канале  "R",   который  используется   системой
         компьютера  при   работе  внутреннего   редактора.   Достаточно
         записать:
                               POKE 23744,124
                               POKE 23745,0
         - и редактирование Вашей программы станет невозможным.
+                                  - 204 -

              Аналогичные эффекты можно получить, манипулируя не с  дан-
         ными в области  информации о каналах,  а с данными  в системной
         переменной STRMS (23568). Так  как каналы связаны с  определен-
         ными потоками, то переподключая потоки к другим каналам,  полу-
         чим новые  эффекты. Например,  чтобы запретить  вывод на  экран
         информации о  программе при  загрузке ее  с магнитофона, доста-
         точно записать в ячейку 23570 через команду POKE вместо числа 6
         число 16,  переподключив поток-2,  связанный с  каналом "S"  на
         канал "P", обеспечивающий вывод на "ZX-принтер".
              Переподключать  стандартные  каналы  к  потокам можно и из
         БЕЙСИКа  с  помощью  символа  "хэш"  -  "#".  Попробуйте ввести
         программу и запустить ее:
              10 PRINT #0; "Текст в нижней части экрана": PAUSE 0
              20 LPRINT #2; "Текст в верхней части экрана": PAUSE 0
              30 LPRINT #3: "Текст на принтере": PAUSE 0
              40 LIST #1
              Вы убедитесь, что знакомые Вам операторы БЕЙСИКа работают
         несколько необычно.
              Кроме  системных  переменных   CHANS  (23631/2)  и   STRMS
         (23568), хранящих  информацию о  каналах и  потоках, существует
         еще  системная  переменная  CURCHL  (5C51H  - 23633), в которой
         записан адрес активизированного в данный момент канала.  Именно
         значение  этой  переменной  и  используется  командой вывода на
         печать RST 10H.
              При работе со стандартными каналами компьютера, Вам  может
         потребоваться еще и  информация о некоторых  флаговых системных
         переменных:  FLAGS  (5C3BH  =  23611),  FLAGS2  (5C6AH=23658) и
         TVFLAG(5C3CH=23612).
              Нулевой бит переменной TVFLAG информирует систему о том,
         используется ли верхняя часть экрана (бит равен 0) или нижняя
         (бит равен 1).
              Первый бит  переменной FLAGS  указывает на  то, должен  ли
         символ выводиться на  принтер (бит равен  1) или на  экран (бит
         равен нулю).
              Четвертый  бит  системной  переменной  FLAGS2  определяет,
         является ли канал "K" рабочим (бит включен) или нерабочим  (бит
         выключен) в текущий момент.

+                                  - 205 -
              Выше  мы  говорили  о  том,  что  информация  о  каналах в
         компьютера записана дважды - в  ПЗУ и затем скопирована в  ОЗУ.
         Этим  можно  воспользоваться,  например  для того, чтобы вообще
         убрать из ОЗУ информацию о каналах и оставить ее только в  ПЗУ.
         А  за  счет  освободившегося  при  этом  места  можно увеличить
         БЕЙСИК-область компьютера на 21 байт. Это, конечно, немного, но
         зато интересен сам подход:

                         10 POKE 23635, PEEK 23631
                         20 POKE 23636, PEEK 23632
                         30 POKE 23631, 175
                         40 POKE 23632, 21

              Здесь в строках 10 и 20 меняется значение системной  пере-
         менной PROG, указывающей на начало БЕЙСИК-программы. Теперь она
         будет начинаться не с адреса 23755, а с адреса 23734. В строках