
              Команда e_to_fp (код 3С) совершенно бесполезна потому, что
         содержит грубую ошибку,  делающее невозможным ее  использование
         из калькулятора.
              По идее она предназначалась для того, чтобы переводить чи-
         сла из нормализованной формы  в форму с плавающей  точкой, т.е.
         вычислять  X*10^A,  где  X  - действительное число, находящееся
         на вершине стека, а А - содержимое регистра А  микропроцессора.
         Но при работе калькулятора регистр А занят другими вычислениями
+                                  - 84 -

         и потому эта команда не дает правильного результата.
              Если Вам необходимо выполнить такое действие, то Вы можете
         это сделать из машинного кода,  не входя в калькулятор, по  ко-
         манде CALL  2D4F. Результат  будет отправлен  на вершину  стека
         калькулятора.

              Команду restack (код 3D) можно представить как  противопо-
         ложность int. Она преобразует целые числа в действительные.
                  00 00 04 00 00 - целое число 4
                  83 00 00 00 00 - действительное число 4
              Эта команда переводит из одной формы в другую.

              Калькулятор имеет еще целую группу команд, предназначенных
         для  генерации  полиномов  Чебышева.  Они  применяются самим же
         калькулятором для вычисления алгебраических и  тригонометричес-
         ких фнукций. Дотошный пользователь, впрочем, может  попробовать
         использовать их для создания процедур вычисления каких-то своих
         нужных ему функций.
              На этом мы закончим рассмотрение работы с калькулятором по
         команде RST 28, но во второй части - "Практикум по программиро-
         ванию в машинных кодах Z-80" мы еще к нему вернемся и  рассмот-
         рим конкретные примеры применения калькулятора.

                            5.13.7. Команда RST 30.
                            ~~~~~~~~~~~~~~~~~~~~~~~
              Эта команда служит для создания (резервирования) свободной
         области памяти в рабочей области БЕЙСИКа. При работе в  БЕЙСИКе
         эта процедура  активно используется  как системная.  Без нее не
         обходятся  такие  операции  как  ввод  строки,   редактирование
         программы. Перед вызовом этой  процедуры в регистровой паре  ВС
         должна содержаться длина резервируемой области памяти в байтах.

                           5.13.8. Команда RST 38.
                           ~~~~~~~~~~~~~~~~~~~~~~~
              Эта процедура  служит для  обработки маскируемых  прерыва-
         ний, о которых мы будем еще говорить немного позже.  Во-первых,
         она   выполняет   наращивание   системной   переменной   FRAMES
         (23672...23674),  которая  выполняет  роль  "внутренних  часов"
+                                 - 85 -

         "Спектрума" и, во-вторых, обеспечивает сканирование  клавиатуры
         в поисках нажатой клавиши каждую пятидесятую долю секунды.

              5.13.9. Замечания к использованию команд обращения к ПЗУ.
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              ПЗУ компьютера "Спектрум" содержит 16-ти килобайтную  про-
         грамму-монитор,  обеспечивающую  функционирование   компьютера.
         Она включает в себя: интерпретатор БЕЙСИКа, программы,  обеспе-
         чивающие ввод/вывод, связь с внешними устройствами,  программу-
         калькулятор, различные таблицы, в том числе набор 96-ти  симво-
         лов и т.п.
              Монитор состоит из сотен  процедур, многими из которых  Вы
         можете активно пользоваться, что очень сильно сокращает  время,
         необходимое для  разработки программ  и уменьшает  их размер. К
         использованию процедур, содержащихся в ПЗУ, фирмы,  выпускающие
         компьютеры, практикуют различный подход.
              В  компьютерах,  имеющих  большую  оперативную память типа
         "АМИГА", "АТАРИ СТ" и т.п. использование в программах пользова-
         телей обращений к системному ПЗУ считается дурным тоном. Разра-
         ботчики компьютеров оставляют  за собой право  постоянно совер-
         шенствовать ПЗУ, а большой объем оперативной памяти всегда дает
         возможность программистам размещать необходимые им процедуры  в
         ОЗУ. Если бы коммерческие  программы имели обращения к  ПЗУ, то
         многочисленные владельцы компьютеров с новыми моделями  компью-
         теров не смогли бы ими пользоваться, т.е. использование в  ком-
         мерческих программах многочисленных обращений к ПЗУ может серь-
         езно нарушить совместимость программного обеспечения, если  ПЗУ
         постоянно или периодически дорабатывается фирмой.
              В  Синклер-компьютерах  реализован  другой  подход.  Малый
         объем оперативной памяти предполагает не только возможность, но
         и необходимость  самого широкого  использования процедур  ПЗУ в
         пользовательских программах. ПЗУ не только открыто для эксплуа-
         тации, более того, К.Синклер  включил в систему команд  команды
         группы RST, делающие этот доступ простым. Если посмотреть с та-
         ких позиций, то становится понятным, как и почему для компьюте-
         ра с  такой скромной  памятью созданы  тысячи изумительных про-
         грамм, многие из которых по своей идеологии превосходят создан-
         ное для гораздо более могучих машин.
+                                 - 86 -

              С другой  стороны, здесь  фирме пришлось  заплатить за это
         отказом от доработки ПЗУ. Выше мы говорили о том, что ПЗУ имеет
         немало ошибок и теперь Вы должны понять, что это нельзя серьез-
         но ставить в вину фирме. Фирма могла бы многократно  доработать
         ПЗУ, как и поступают все фирмы, но страдали бы от этого  потре-
         бители, т.к. от этого нарушилась бы совместимость компьютеров и
         программного обеспечения.
              Конечно, от программиста  это требует определенной  внима-
         тельности, зато  миллионы простых  пользователей по  всему миру
         очень выиграли от скромности К.Синклера. Это еще раз напоминает
         нам о том, что Синклер-компьютеры очень "дружественны" к потре-
         бителю, что и обусловило их невероятную популярность.
              Справедливости  ради,  надо  сказать,  что есть еще третий
         путь, который например был реализован в компьютерах "Коммодор".
         Здесь фирма  тоже закрывает  ПЗУ и  не рекомендует использовать
         его процедуры напрямую, периодически внося в них изменения.  Но
         зато она выделила небольшой  участок ПЗУ в качестве  своеобраз-
         ного диспетчера. Этот блок называется "керналь". В нем хранятся
         адреса основных  процедур ПЗУ.  Поэтому если  при доработке ПЗУ
         что-то изменяется   в адресах  процедур, эти  изменения тут  же
         вносятся в "керналь", который всегда находится в одном и том же
         месте. Так обеспечивается совместимость программного  обеспече-
         ния между старыми и новыми моделями. Программы пользователя  не
         входят в ПЗУ  напрямую, а входят  в "керналь", откуда  их пере-
         правляют туда,  куда надо.  К сожалению,  в "Спектруме"  такого
         блока нет.
              "ИНФОРКОМ" получает массу писем  с изложением новых и  все
         более изощренных способов доработки ПЗУ. До сих пор многие  эн-
         тузиасты  прилагают  свою  энергию  для русификации компьютера.
         Каждый делает это так,  как ему заблагорассудится -  стандартов
         нет, да  они вряд  ли и  будут. Помните,  что такая "доработка"
         серьезно нарушает совместимость компьютеров. Вы не сможете вос-
         пользоваться чужой программой, созданной на  "русифицированном"
         компьютере, отличном от Вашего. Разработанные Вами  русскоязыч-
         ные программы также  будут иметь коммерческую  ценность близкую
         к нулевой, если при русификации Вы опирались на свое измененное
         ПЗУ. Помните, что всегда есть возможность русификации при  раз-
         мещении русского шрифта в оперативной памяти. Мы об этом  неод-
+                                 - 87 -

         нократно писали в разработке "Большие возможности Вашего "Спек-
         трума" и в выпусках  "ZX-РЕВЮ".  Практикуют и  другие доработки
         (например,  встраивают  в  ПЗУ  программы  обслуживания внешних
         портов). Мы понимаем, что остановить творческий поиск невозмож-
         но, но по крайней мере не позволяйте никому брать  дополнитель-
         ную плату  за "доработки"  ПЗУ и  выдавать их  за преимущества.
         Относитесь к ним критически.
              Желающим действительно сделать ценные разработки рекомен-
         дуем делать это путем подключения замещающего ПЗУ ("ТЕНЕВОГО"),
         как это и делается в наиболее практичных периферийных устройст-
         вах.

                     5.14. КОМАНДЫ СДВИГА И РОТАЦИИ БИТОВ

              Команды этой группы работают с байтами данных,  содержащи-
         мися в  регистрах процессора,  путем перемещения  битов в  этих
         байтах. Способ перемещения битов и определяет название и назна-
         чение команды.

                          5.14.1. Команды сдвига.
                          ~~~~~~~~~~~~~~~~~~~~~~~
              Команды сдвига выполняют перемещения битов в байте на  со-
         седнее место влево  или вправо. Существуют  два типа сдвигов  -
         сдвиг логический и сдвиг арифметический. При логическом  сдвиге
         байт рассматривается как набор из восьми двоичных знаков (0 или
         1). При  арифметическом сдвиге  содержимое рассматривается  как
         число со знаком.
                               КОМАНДА SRL.
                               ~~~~~~~~~~~
              Это сокращение  от SHIFT  RIGHT LOGICAL  (ЛОГИЧЕСКИЙ СДВИГ
         ВПРАВО). Структурная схема:
                                                          Флаг  C
                     ┌───┬───┬───┬───┬───┬───┬───┬───┐    ┌──────┐
            0───────>┤ 7 │ 6 │ 5 │ 4 │ 3 │ 2 │ 1 │ 0 ├───>┤      │
                     └───┴───┴───┴───┴───┴───┴───┴───┘    └──────┘
              По этой  команде каждый  бит смещается  вправо на соседнее
         место. Нулевой бит поступает  в регистр F, где  включается флаг
         переноса, если бит 0 был включен и выключается, если бит 0  был
+                                  - 88 -

         выключен. В старший (седьмой бит) засылается 0. т.е. он  выклю-
         чается.
              Команд с мнемоникой SRL всего 10. Их коды зависят от того,
         к каким регистрам они применяются.

              Мнемоника         Код         Мнемоника        Код
              SRL A            CB 3F         SRL H          CB 3C
              SRL L            CB 3D         SRL B          CB 38
              SRL C            CB 39         SRL D          CB 3A
              SRL E            CB 3B         SRL (HL)       CB 3E
              SRL (IX+S)    DD CB S 3E       SRL (IY+S)   FD CB S 3E

                                   КОМАНДА SRA.
                                   ~~~~~~~~~~~~
              Это сокращение от SHIFT RIGHT ARITHMETIC (АРИФМЕТИЧЕСКИЙ
         СДВИГ ВПРАВО). Структурная схема:
                 ┌─────┐
                 │     │                                  Флаг  C
                 │   ┌─┴─┬───┬───┬───┬───┬───┬───┬───┐    ┌──────┐
                 └──>┤ 7 │ 6 │ 5 │ 4 │ 3 │ 2 │ 1 │ 0 ├───>┤      │
                     └───┴───┴───┴───┴───┴───┴───┴───┘    └──────┘

              Команда очень похожа на команду SRL. Единственным отличием
         является то, что бит 7 устанавливается в то же положение, в ко-
         тором он был до сдвига.  Это означает, что если в  байте содер-
         жится целое число со знаком, то знак в результате этой операции
         не  изменится.  Внимательно  приглядевшись  к этой операции, Вы
         увидите, что сдвиг вправо эквивалентен делению содержимого бай-
         та пополам. При этом если число было нечетное (бит 0  включен),
         то образуется остаток от деления, о чем свидетельствует включе-
         ние флага С регистра F.

              Мнемоника         Код         Мнемоника        Код
               SRA A            CB 2F        SRA H           CB 2C
               SRA L            CB 2D        SRA B           CB 28
               SRA C            CB 29        SRA D           CB 2A
               SRA E            CB 2B        SRA (HL)        CB 2E
               SRA (IX+S)     DD CB S 2E    SRA (IY+S)     FD CB S 2E
+                                  - 89 -

                                КОМАНДА SLA
                                ~~~~~~~~~~~~
              Это арифметический сдвиг влево. Структурная схема:

              Флаг  C
              ┌──────┐    ┌───┬───┬───┬───┬───┬───┬───┬───┐
              │      ├<───┤ 7 │ 6 │ 5 │ 4 │ 3 │ 2 │ 1 │ 0 ├<──── 0
              └──────┘    └───┴───┴───┴───┴───┴───┴───┴───┘

              По этой команде все биты сдвигаются на одну позицию влево.
         В   бит  0  (младший)  засылается  0.  Бит 7 сдвигается во флаг
         переноса. Операция  эквивалентна умножению  байта на  два. Если
         при этом образуется число большее, чем 255. включается флаг С.
              Поскольку  при  сдвиге  влево  арифметический и логический
         сдвиги совпадают, то для последнего не выделено своей команды.

              Мнемоника         Код         Мнемоника        Код
               SLA A            CB 27        SLA H           CB 24
               SLA L            CB 25        SLA B           CB 20
               SLA C            CB 21        SLA D           CB 22
               SLA E            CB 23        SLA (HL)        CB 26
               SLA (IX+S)     DD CB S 26     SLA (IY+S)    FD CB S 26

                          5.14.2. Команды ротации.
                          ~~~~~~~~~~~~~~~~~~~~~~~~
              Команды ротации  очень похожи  на команды  сдвига. Разница
         состоит в том,  что здесь тот  бит, который выходит  за пределы
         байта, поступает в байт с противоположной стороны. Более   под-
         робно эти операции показаны на структурных схемах.

                                 КОМАНДЫ RL
                                 ~~~~~~~~~~~
              Ротация влево. Структурная схема:
           ┌─────────────────────────────────────────────────────────┐
           │  ┌──────┐    ┌───┬───┬───┬───┬───┬───┬───┬───┐          │
           └──┤      ├<───┤ 7 │ 6 │ 5 │ 4 │ 3 │ 2 │ 1 │ 0 ├<─────────┘
              └──────┘    └───┴───┴───┴───┴───┴───┴───┴───┘
              Флаг  C
+                                  - 90 -

         Бит 7 перемещается во флаг переноса, а флаг переноса - в бит 0.
              Мнемоника         Код         Мнемоника        Код
               RL A             CB 17        RL H            CB 14
               RL L             CB 15        RL B            CB 10
               RL C             CB 11        RL D            CB 12
               RL E             CB 13        RL (HL)         CB 16
               RL (IX+S)      DD CB S 16     RL (IY+S)     FD CB S 16

                                  КОМАНДЫ RR
                                  ~~~~~~~~~~
              Ротация вправо Структурная схема:
            ┌──────────────────────────────────────────────────────┐
            │        ┌───┬───┬───┬───┬───┬───┬───┬───┐    ┌──────┐ │
            └───────>┤ 7 │ 6 │ 5 │ 4 │ 3 │ 2 │ 1 │ 0 ├───>┤      ├─┘
                     └───┴───┴───┴───┴───┴───┴───┴───┘    └──────┘
                                                          Флаг  C
              Бит 0 перемещается во флаг переноса, а флаг переноса - в
         бит 7.
              Мнемоника         Код         Мнемоника        Код
               RR A             CB 1F        RR H            CB 1C
               RR L             CB 1D        RR B            CB 18
               RR C             CB 19        RR D            CB 1A
               RR E             CB 1B        RR (HL)         CB 1E
               RR (IX+S)      DD CB S 1E     RR (IY+S)     FD CB S 1E

                                 КОМАНДЫ RRC
                                 ~~~~~~~~~~~
              Эта команды отличаются от команд RR тем, что флаг  перено-
         са не вовлекается  в ротацию, хотя  результат операции на  него
         влияет. Суть операции ясна из структурной схемы.

            ┌──────────────────────────────────────────┐
            │        ┌───┬───┬───┬───┬───┬───┬───┬───┐ │  ┌──────┐
            └───────>┤ 7 │ 6 │ 5 │ 4 │ 3 │ 2 │ 1 │ 0 ├─┴─>┤      │
                     └───┴───┴───┴───┴───┴───┴───┴───┘    └──────┘
                                                          Флаг  C


+                                 - 91 -

              Мнемоника         Код         Мнемоника        Код
               RRC A            CB 0F        RRC H           CB 0C
               RRC L            CB 0D        RRC B           CB 08
               RRC C            CB 09        RRC D           CB 0A
               RRC E            CB 0B        RRC (HL)        CB 0E
               RRC (IX+S)     DD CB S 0E     RRC (IY+S)     FD CB S 0E

                                 КОМАНДЫ RLC
                                 ~~~~~~~~~~~
              Эта команды отличаются от команд RL тем, что флаг  перено-
         са не вовлекается  в ротацию, хотя  результат операции на  него
         влияет. Суть операции ясна из структурной схемы.
                        ┌────────────────────────────────────────────┐
              ┌──────┐  │ ┌───┬───┬───┬───┬───┬───┬───┬───┐          │
              │      ├<─┴─┤ 7 │ 6 │ 5 │ 4 │ 3 │ 2 │ 1 │ 0 ├<─────────┘
              └──────┘    └───┴───┴───┴───┴───┴───┴───┴───┘
              Флаг  C

              Мнемоника         Код         Мнемоника        Код
               RLC A            CB 07        RLC H           CB 04
               RLC L            CB 05        RLC B           CB 00
               RLC C            CB 01        RLC D           CB 02
               RLC E            CB 03        RLC (HL)        CB 06
               RLC (IX+S)     DD CB S 06     RLC (IY+S)    FD CB S 06


                5.14.3. Однобайтные команды ротации аккумулятора.
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Поскольку регистр А широко используется во многих програм-
         мах, для него продублированы  4 команды ротации. Они  выполнены
         как однобайтные. Это  позволяет при их  использовании экономить
         память.
              Мнемоника          Код           Примечание.
              RLA                 17            = RL A
              RRA                 1F            = RR A
              RLCA                07            = RLC A
              RRCA                0F            = RRC A

+                                 - 92 -

                   5.14.4. Команды ротации полубайтов.
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              В этой подгруппе только  две команды. Они применяются  для
         работы, когда используется  двоичная форма записи  десятиричных
         чисел  (BCD-арифметика).  Напомним,  что  здесь один байт может
         представлять два  десятиричных разряда  (числа от  0 до  99), а
         каждый полубайт (4  бита) может представлять  число от 0  до 9.
         Значения от A до F  - не используются. Перенос в  старший полу-
         байт выполняется  уже тогда,  когда младший  полубайт принимает
         значение, большее 9 (в двоичной форме 1001).
              В каждой  из этих  операций участвуют  по одному  младшему
         полубайту  регистра  A  и  по  одному полному байту, взятому из
         ячейки памяти,  на адрес  которой указывает  содержимое регист-
         ровой пары HL процессора.
              В отличие от команд  ротации битов эти команды  перемещают
         сразу целый полубайт, не меняя взаимного расположения битов.
              Мнемоники этих команд - RLD и RRD.
              Мнемоника         Код        Мнемоника        Код
              RLD              ED 6F        RRD            ED 67

                        Структурная схема команды RLD.

                            ┌──>──────────────>───┐
                     ┌────┬─┴──┐           ┌────┬─┴──┐ Байт памяти, ад-
         Аккумулятор │    │    │           │    │    │ рес которого хра-
                     └────┴─┬──┘           └─┬─┬┴──┬─┘ нится в паре HL.
                            └──<───────────<─┘ └─<─┘

                        Структурная схема команды RRD.

                            ┌───<─────────<───────┐
                     ┌────┬─┴──┐           ┌────┬─┴──┐ Байт памяти, ад-
         Аккумулятор │    │    │           │    │    │ рес которого хра-
                     └────┴─┬──┘           └─┬─┬┴──┬─┘ нится в паре HL.
                            └───>─────────>──┘ └─>─┘

              Интересно отметить, что  старший полубайт в  аккумуляторе,
         как Вы  видите, этими  командами не  затрагивается. Кроме того,
+                                  - 93 -

         как  Вы  видите  из  структурных  схем, эти команды различаются
         только направлением ротации - влево или вправо, причем  понятия
         "влево" и "вправо" относятся не к аккумулятору, а к той  ячейке
         памяти, на которую указывает содержимое HL.

              Влияние команд сдвига и ротации на флаговый регистр Вы
         можете установить по таблицам "Справочника...", но основная
         суть такова:
              1) все команды, кроме RRD И RLD влияют на флаг переноса.
              2) все команды, кроме RLA, RRA, RLCA, RRCA влияют на флаг
         четности.

                      5.15. КОМАНДЫ ДЛЯ РАБОТЫ С БИТАМИ

              Процессор имеет обширный набор команд для работы с отдель-
         ными битами. Этими командами  биты могут включаться (SET),  вы-
         ключаться (RES) и проверяться (BIT).
              Надо сказать, что для стандартного БЕЙСИКа операции с  би-
         тами вообще невозможны,  хотя существуют некоторые  расширенные
         версии, предоставляющие такую возможность.

                      5.15.1. Команды включения битов.
                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Эти команды применяются программистом, когда надо  обеспе-
         чить  гарантированное  включение  какого-либо  бита в одиночном
         регистре или в  заданной ячейке памяти.  Все команды этой  под-
         группы начинаются с мнемоники SET. Примеры применения команд:
              SET 0,A - включить нулевой бит аккумулятора.
              SET 4,(HL) - включить четвертый бит в байте, адрес которо-
         го находится в регистровой паре HL.
              После включения бит принимает значение 1.
              Коды команд включения битов приведены в таблице 5.15.1.1.

                      5.15.2. Команды выключения битов.
                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Команды служат для гарантированного выключения  каких-либо
         битов в одиночном регистре или в заданной ячейке памяти. Коман-
         ды этой подгруппы начинаются с мнемоники RES. После  выключения
+                                 - 94 -

         нужный бит  равен нулю.  Машинные коды  команд выключения битов
         приведены в табл.5.15.2.1.

                            Команды включения.      Таблица 5.15.1.1
            ┌──────┬─────┬─────┬─────┬─────┬─────┬─────┬──────┬─────┐
            │      │SET 0│SET 1│SET 2│SET 3│SET 4│SET 5│SET 6 │SET 7│
            ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼─────┤
            │  A   │CB C7│CB CF│CB D7│CB DF│CB E7│CB EF│CB F7 │CB FF│                                                                                                                                                                                   │
            ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼─────┤
            │  H   │CB C4│CB CC│CB D4│CB DC│CB E4│CB EC│CB F4 │CB FC│
            ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼─────┤
            │  L   │CB C5│CB CD│CB D5│CB DD│CB E5│CB ED│CB F5 │CB FD│
            ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼─────┤
            │  B   │CB C0│CB C8│CB D0│CB D8│CB E0│CB E8│CB F0 │CB F8│
            ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼─────┤
            │  C   │CB C1│CB C9│CB D1│CB D9│CB E1│CB E9│CB F1 │CB F9│
            ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼─────┤
            │  D   │CB C2│CB CA│CB D2│CB DA│CB E2│CB EA│CB F2 │CB FA│
            ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼─────┤
            │  E   │CB E3│CB CB│CB D3│CB DB│CB E3│CB EB│CB F3 │CB FB│
            ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼─────┤
            │ (HL) │CB C6│CB CE│CB D6│CB DE│CB E6│CB EE│CB F6 │CB FE│
            ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼─────┤
            │(IX+S)│DD CB│DD CB│DD CB│DD CB│DD CB│DD CB│DD CB │DD CB│
            │      │ S C6│ S CE│ S D6│ S DE│ S E6│ S EE│ S F6 │ S FE│
            ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼─────┤
            │(IY+S)│FD CB│FD CB│FD CB│FD CB│FD CB│FD CB│FD CB │FD CB│
            │      │ S C6│ S CE│ S D6│ S DE│ S E6│ S EE│ S F6 │ S FE│
            └──────┴─────┴─────┴─────┴─────┴─────┴─────┴──────┴─────┘

                       5.15.3. Команды проверки битов.
                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Команды служат  для проверки  того, является  заданный бит
         включенным  или  выключенным.  Обычно  за этой командой следует
         условный переход, вызов подпрограммы или возврат по флагу нуля.
         Команды этой подгруппы начинаются с мнемоники BIT.
              В результате действия этой команды включается или выключа-
         ется флаг нуля (Z-флаг регистра F).
+                                 - 95 -

              Машинные   коды   команд   этой   группы   представлены  в
         табл .5.15.3.1.
                             Команды выключения.    Таблица 5.15.2.1
            ┌──────┬─────┬─────┬─────┬─────┬─────┬─────┬──────┬─────┐
            │      │RES 0│RES 1│RES 2│RES 3│RES 4│RES 5│RES 6 │RES 7│
            ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼─────┤
            │  A   │CB 87│CB 8F│CB 97│CB 9F│CB A7│CB AF│CB B7 │CB BF│                                                                 │
            ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼─────┤
            │  H   │CB 84│CB 8C│CB 94│CB 9C│CB A4│CB AC│CB B4 │CB BC│
            ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼─────┤
            │  L   │CB 85│CB 8D│CB 95│CB 9D│CB A5│CB AD│CB B5 │CB BD│
            ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼─────┤
            │  B   │CB 80│CB 88│CB 90│CB 98│CB A0│CB A8│CB B0 │CB B8│
            ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼─────┤
            │  C   │CB 81│CB 89│CB 91│CB 99│CB A1│CB A9│CB B1 │CB B9│
            ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼─────┤
            │  D   │CB 82│CB 8A│CB 92│CB 9A│CB A2│CB AA│CB B2 │CB BA│
            ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼─────┤
            │  E   │CB 83│CB 8B│CB 93│CB 9B│CB A3│CB AB│CB B3 │CB BB│
            ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼─────┤
            │ (HL) │CB 86│CB 8E│CB 96│CB 9E│CB A6│CB AE│CB B6 │CB BE│
            ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼─────┤
            │(IX+S)│DD CB│DD CB│DD CB│DD CB│DD CB│DD CB│DD CB │DD CB│
            │      │ S 86│ S 8E│ S 96│ S 9E│ S A6│ S AE│ S B6 │ S BE│
            ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼─────┤
            │(IY+S)│FD CB│FD CB│FD CB│FD CB│FD CB│FD CB│FD CB │FD CB│
            │      │ S 86│ S 8E│ S 96│ S 9E│ S A6│ S AE│ S B6 │ S BE│
            └──────┴─────┴─────┴─────┴─────┴─────┴─────┴──────┴─────┘
                                Команды проверки.   Таблица 5.15.3.1
            ┌──────┬─────┬─────┬─────┬─────┬─────┬─────┬──────┬─────┐
            │      │BIT 0│BIT 1│BIT 2│BIT 3│BIT 4│BIT 5│BIT 6 │BIT 7│
            ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼─────┤
            │  A   │CB 47│CB 4F│CB 57│CB 5F│CB 67│CB 6F│CB 77 │CB 7F│                                                                 │
            ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼─────┤
            │  H   │CB 44│CB 4C│CB 54│CB 5C│CB 64│CB 6C│CB 74 │CB 7C│
            ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼─────┤
            │  L   │CB 45│CB 4D│CB 55│CB 5D│CB 65│CB 6D│CB 75 │CB 7D│
            └──────┴─────┴─────┴─────┴─────┴─────┴─────┴──────┴─────┘
+                                  - 96 -

                                        продолжение таблицы 5.15.3.1
            ┌──────┬─────┬─────┬─────┬─────┬─────┬─────┬──────┬─────┐
            │      │BIT 0│BIT 1│BIT 2│BIT 3│BIT 4│BIT 5│BIT 6 │BIT 7│
            ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼─────┤
            │  B   │CB 40│CB 48│CB 50│CB 58│CB 60│CB 68│CB 70 │CB 78│
            ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼─────┤
            │  C   │CB 41│CB 49│CB 51│CB 59│CB 61│CB 69│CB 71 │CB 79│
            ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼─────┤
            │  D   │CB 42│CB 4A│CB 52│CB 5A│CB 62│CB 6A│CB 72 │CB 7A│
            ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼─────┤
            │  E   │CB 43│CB 4B│CB 53│CB 5B│CB 63│CB 6B│CB 73 │CB 7B│
            ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼─────┤
            │ (HL) │CB 46│CB 4E│CB 56│CB 5E│CB 66│CB 6E│CB 76 │CB 7E│
            ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼─────┤
            │(IX+S)│DD CB│DD CB│DD CB│DD CB│DD CB│DD CB│DD CB │DD CB│
            │      │ S 46│ S 4E│ S 56│ S 5E│ S 66│ S 6E│ S 76 │ S 7E│
            ├──────┼─────┼─────┼─────┼─────┼─────┼─────┼──────┼─────┤
            │(IY+S)│FD CB│FD CB│FD CB│FD CB│FD CB│FD CB│FD CB │FD CB│
            │      │ S 46│ S 4E│ S 56│ S 5E│ S 66│ S 6E│ S 76 │ S 7E│
            └──────┴─────┴─────┴─────┴─────┴─────┴─────┴──────┴─────┘

                     5.16. КОМАНДЫ ОБРАБОТКИ БЛОКОВ ПАМЯТИ

              Это очень мощные команды.  Они предназначены для работы  с
         целыми частями памяти. В  этой группе 8 команд.  Четыре команды
         предназначены  для  перемещения  блоков  памяти из одного места
         в другое и четыре команды для поиска заданного байта в заданной
         области.

                       5.16.1. Команды перемещения блоков.
                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              В этой подгруппе 4 команды: LDIR, LDI, LDDR, LDD.

                                 КОМАНДА LDIR
                                 ~~~~~~~~~~~~
              Ее код  ED B0,  т.е. это  двухбайтная команда.  Служит для
         перемещения блоков памяти. Для ее работы необходимо, чтобы:
              - в регистровой паре HL находился адрес начала перемещае-
+                                  - 97 -

         мого блока;
              - в регистровой паре  DE находился адрес того  места, куда
         должен перемещаться блок;
              - в паре BC находилась длина перемещаемого блока.
              Команда может перемещать блоки  в памяти как сверху  вниз,
         так и снизу вверх, но если перемещение памяти происходит с час-
         тичным наложением  нового блока  на старый,  то тогда  возможно
         перемещение только сверху вниз, иначе пересылаемые байты запор-
         тят те, которые еще не были пересланы.

                Перемещение без                Перемещение блоков
                наложения блоков                  с наложением
                 ╔════════════╗                ╔═══════════════╗
                 ║            ║                ║               ║
             ┌─>─╫────────────╢                ║               ║
             │   ║////////////║            ┌─>─╟───────────────╢
           ┌─┼─>─╫────────────╢            │   ║///////////////║
           │ │   ║            ║            └─<─╫───────────────╢
           │ └─<─╫────────────╢                ║XXXXXXXXXXXXXXX║
           │     ║\\\\\\\\\\\\║            ┌─>─╫───────────────╢
           └───<─╫────────────╢            │   ║\\\\\\\\\\\\\\\║
                 ║            ║            └─<─╫───────────────╢
                 ╚════════════╝                ║               ║
                                               ╚═══════════════╝

                                КОМАНДА LDDR
                                ~~~~~~~~~~~~
              Ее код ED B8, а назначение - то же, что и у команды  LDIR.
         Регистры HL,  DE, BC  - выполняют  те же  функции и должны быть
         выставлены так же, как и для команды LDIR.
              Разница состоит в  том, что если  по команде LDIR  сначала
         пересылается первый байт,  затем второй и  т.д., то по  команде
         LDDR  -  сначала  последний,  затем  предпоследний и т.д. Таким
         образом, если  перемещение идет  с наложением  нового блока  на
         старый, то этой командой можно пересылать блоки снизу вверх.



+                                  - 98 -

                                КОМАНДА LDI
                                ~~~~~~~~~~~
              Ее код ED A0. Действие этой команды такое же, как и у  ко-
         манды LDIR,  но если  команда LDIR  выполняет перемещение блока
         целиком байт за байтом до тех пор, пока в регистре BC не  будет
         достигнут ноль, то команда LDI перемещает только один байт. Ес-
         ли при этом в BC не  достигнут ноль, то флаг P/V равен  1, если
         достигнут, то флаг P/V равен нулю. По результатам проверки это-
         го флага программист может принять решение о продолжении дейст-
         вия команды  LDI или  прекращении. Одним  словом, если  команда
         LDIR выполняет перенос каждого последующего байта  автоматичес-
         ки, то LDI - неавтоматически.

                                КОМАНДА LDD
                                ~~~~~~~~~~~
              Ее код ED A8. Это такой же неавтоматический аналог LDDR,
         как LDI - аналог LDIR.
              Время выполнения команд LDD и LDI - фиксированное и  зани-
         мает 16 тактов микропроцессора. Время же действия  автоматичес-
         ких команд LDIR и LDDR  - неопределено, так как оно  зависит от
         размера блока, подлежащего перемещению. Чем он больше, тем  бо-
         льше и время, но его можно оценить - это 21 такт на перемещение
         каждого байта, кроме последнего, на который потребны 16 тактов.
         Можно оценить, например, время на переброску экрана, т.е.  6912
         байтов:  6911*21 + 16 = 145147 тактов, что при частоте 3.5  МГц
         составляет примерно 0.04 сек.

                          5.16.2. Команды поиска.
                          ~~~~~~~~~~~~~~~~~~~~~~~
              В этой подгруппе 4 команды: CPIR, CPDR, CPI и CPD.

                               КОМАНДА CPIR
                               ~~~~~~~~~~~~
              Ее код - ED B1.
              Команда просматривает  заданную область  памяти в  поисках
         первого встреченного места нахождения заданной величины. Задан-
         ный байт должен быть установлен заранее в регистре А. В  регис-
         тровой  паре  HL  устанавливается  начальный  адрес, с которого
+                                  - 99 -

         начинается поиск, а  в регистре BC  - длина блока,  подлежащего
         проверке.
              Команда исполняется  до тех  пор, пока  либо в  какой-либо
         ячейке не будет найден байт, равный содержимому регистра А, ли-
         бо пока не будет исчерпана вся заданная область и в регистре BC
         не останется ноль. Многократное повторение команды  выполняется
         автоматически.  Поиск  ведется  снизу  вверх. Если в результате
         поиска нужный байт найден, то действие команды прекращается и в
         регистре HL Вы можете найти искомый адрес, при этом  включается
         флаг нуля (Z) и выключается флаг знака (S).

                                 КОМАНДА CPDR
                                 ~~~~~~~~~~~~~
              Ее код - ED B9.
              Действие аналогично команде CPIR, но здесь блок просматри-
         вается сверху вниз. Эта команда также автоматическая.

                                  КОМАНДА CPI
                                  ~~~~~~~~~~~
              Ее код - ED A1.
              Команда аналогична CPIR, но  в отличие от нее  не является
         автоматической. Здесь после каждого сравнения очередного  байта
         программист может принять решение о прекращении или продолжении
         поиска в зависимости от состояния флагов регистра F.
              Если содержимое проверяемой  ячейки и аккумулятора  совпа-
         дут, включается флаг нуля, в противном случае он выключен. Если
         в  процессе поиска нужный  байт еще не найден, а  содержимое BC
         уменьшилось до нуля,  то включается флаг  переполнения/четности
         (P/V), в противном случае он включен.
              Поиск по команде CPI выполняется снизу вверх, как и по ко-
         манде CPIR.

                                  КОМАНДА CPD
                                  ~~~~~~~~~~~
              Ее код  ED 9.
              Действие команды   аналогично командам  CPDR и  CPI, но  в
         отличие от CPDR она неавтоматическая, а в отличие от CPI  поиск
         по блоку памяти производится не снизу вверх, а сверху вниз.
+                                  - 100 -

               5.17. КОМАНДЫ ДЛЯ РАБОТЫ С ВНЕШНИМИ УСТРОЙСТВАМИ

              Команды этой обширной группы позволяют процессору получать
         данные от внешних (периферийных) устройств и выдавать данные на
         эти устройства точно так же, как он может загружать в  регистры
         данные из ячеек оперативной памяти и отправлять их туда на хра-
         нение.
              Обратите внимание  на то,  что по  отношению к  процессору
         Z-80 такие части компьютерной системы как клавиатура,  магнито-
         фон, звуковой динамик тоже являются внешними.
              Команды этой группы начитаются с мнемоник IN (ввод) и OUT
         (вывод). В какой-то степени они аналогичны командам БЕЙСИКа IN
         и OUT.
              Данные, которые передаются по  командам IN и OUT  являются
         8-битными. Во время приема активизируются физические линии RD и
         IORQ, а во  время выдачи -  также IORQ и  WR. Кроме этих  линий
         активизируется также адресная  шина. Адрес, помещенный  на ней,
         задает адрес внешнего порта. Всего возможны 65536 адресов  пор-
         тов. Различные периферийные устройства активизируются состояни-
         ем различных адресных линий адресной шины.
              Так, например, порт 254  (FE) служит для связи  процессора
         с клавиатурой, магнитофоном, звуковым динамиком и телеэкраном.
              Для примера рассмотрим содержимое байта данных,  поступаю-
         щих или выдаваемых по этому порту.

                                 ПОРТ FE (ВВОД)
                      ┌───┬───┬───┬───┬───┬───┬───┬───┐
                      │ 7 │ 6 │ 5 │ 4 │ 3 │ 2 │ 1 │ 0 │
                      └───┴─┬─┴─┬─┴───┴───┴───┴───┴─┬─┘
                            │   └─────────┬─────────┘
                            А             │
                                          Б
              А. Шестой бит указывает на наличие сигнала на  магнитофон-
         ном разъеме EAR (вход  в компьютер). 1 -  нет сигнала, 0   есть
         сигнал.
              Б. Младшие пять битов определяют какая из пяти клавиш каж-
         дого полуряда клавиатуры была нажата. Бит равен нулю, если кла-
         виша была нажата и 1, если нет.
+                                  - 101 -

                               ПОРТ FE (ВЫВОД)
                     ┌───┬───┬───┬───┬───┬───┬───┬───┐
                     │ 7 │ 6 │ 5 │ 4 │ 3 │ 2 │ 1 │ 0 │
                     └───┴───┴───┴─┬─┴─┬─┴─┬─┴───┴─┬─┘
                                   │   │   └───┬───┘
                                               │
                                   A   Б       В

              А. По четвертому биту выдается сигнал на звуковой динамик.
              Б. По третьему биту выдается  сигнал на разъем MIC (выход
         на магнитофон).
              В. По младшим трем битам выдается сигнал на установку цве-
         та бордюра (один из возможных восьми цветов BORDER).

              Для тех, кто не имеет книги Виккерса, напомним, как зада-
         ются адреса портов при опросе клавиатуры.
              1. Мы указали,  что 16-разрядная адресная  шина (от А0  до
         А15) указывает на адрес внешнего порта.
              2. Порт FE задается состоянием адресных линий А0...А7. При
         этом А0 - включена, А1...А7 - выключены:
                                     1111 1110
              Об остальных адресных линиях А8...А15 мы пока не говорим.
              3. В то же время, мы указали, что клавиши полуряда опраши-
         ваются  по  пяти  битам  данных,  поступающим  с  этого   порта
         (D0...D5).
              4. При этом адресные линии А8...А15 могут указывать о  ка-
         ком именно полуряде идет речь.
              Клавиатура  "Спектрума"  имеет  40  основных  клавиш.  Они
         разбиты на 8 полурядов по 5 клавиш в каждом.
                   ┌────────────────────┬───────────────────┐
                   │ 1................5 │ 6...............0 │
                   ├────────────────────┼───────────────────┤
                   │ Q................T │ Y...............P │
                   ├────────────────────┼───────────────────┤
                   │ A................G │ H...........ENTER │
                   ├────────────────────┼───────────────────┤
                   │ C.SHIFT..........V │ B...........SPACE │
                   └────────────────────┴───────────────────┘
+                                  - 102 -

              Этим полурядам соответствует следующее состояние адресных
         линий А8...А15.
                   ┌────────────────────┬───────────────────┐
                   │ 1111 0111 = 247    │ 1110 1111 = 239   │
                   ├────────────────────┼───────────────────┤
                   │ 1111 1011 = 251    │ 1101 1111 = 223   │
                   ├────────────────────┼───────────────────┤
                   │ 1111 1101 = 253    │ 1011 1111 = 191   │
                   ├────────────────────┼───────────────────┤
                   │ 1111 1110 = 254    │ 0111 1111 = 127   │
                   └────────────────────┴───────────────────┘
              Таким образом, для опроса произвольного полуряда адрес его
         порта равен:
                              256*(255-2^n)  + 254
                            └──────┬────────┘ └─┬─┘
                                   │            │

                              А8...А15       А0...А7
         Здесь n - номер полуряда.
              Например, опросить клавиши от 1 до 5 можно следующей ко-
         мандой из Бейсика:
              PRINT IN (256*(255-2^3)+254)   или проще:
              PRINT IN 63486
              Младшие пять битов того  байта, который поступает с  этого
         порта, указывают,  какая именно  клавиша была  нажата. При этом
         следует помнить:
              - самый младший бит соответствует внешней клавише полуря-
         да;
              - при нажатой клавише соответствующий ей бит  выключается,
         т.е. если ни одна клавиша  не была нажата, то все  пять младших
         битов включены, и Вы получите 255.

              Среди команд ввода/вывода есть команды простого (однобайт-
         ного) ввода/вывода и есть команды блочного ввода/вывода, кото-
         рые бывают как автоматическими, так и неавтоматическими. Далее
         мы рассмотрим все эти команды по подгруппам.


+                                  - 103 -

                       5.17.1. Команды простого ввода.
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

              Мнемоника      Код       Комментарий
              IN A,(N)       DB N      Поместить в регистр А то число,
                                       которое поступает с порта N.
              IN A,(C)       ED 78     Поместить в регистр А то число,
                                       которое поступает с порта, номер
                                       которого находится в регистре С.
              IN H,(C)       ED 60     То же, но в регистр H.
              IN L,(C)       ED 68     То же, но в регистр L.
              IN B,(C)       ED 40     То же, но в регистр B.
              IN C,(C)       ED 48     То же, но в регистр C.
              IN D,(C)       ED 50     То же, но в регистр D.
              IN E,(C)       ED 58     То же, но в регистр E.
              IN F,(C)       ED 70     Служит для выставления флагов в
                                       регистре F без изменения
                                       содержимого числовых регистров.

              По командам этой подгруппы необходимо сделать ряд примеча-
         ний. Мы говорили о том, что адрес порта может задаваться 16-би-
         тным числом, находящимся  на адресной шине.  В то же  время, во
         всех  этих  командах  адрес  порта задается однобайтным числом,
         т.е. определяется состоянием адресных линий А0...А7. В тех слу-
         чаях, когда для функционирования внешних устройства этого  дос-
         таточно,  линии  А8...А15  могут  быть  проигнорированы, но как
         быть, когда этого недостаточно, например при вводе с  заданного
         полуряда клавиатуры, о чем мы только что писали?
              Для команды  IN A,(N)  биты адреса  порта А0...А7 задаются
         числом N, следующим за  кодом операции, а биты  адреса А8...А15
         должны быть предварительно выставлены в самом же регистре А.
              Для команд IN A,(C) и других подобных биты адреса  А0...А7
         задаются содержимым  регистра С,  а биты  А8...А15 должны  быть
         предварительно помещены в регистр В.




+                                 - 104 -

                           5.17.2. Команды простого вывода.
                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
           Мнемоника    Код     Комментарий
           OUT (N),A    D3 N    Выдать содержимое аккумулятора по порту
                                N. Если адрес порта - двухбайтная  вели-
                                чина, то старший байт адреса должен быть
                                предварительно помещен в регистр А.
           OUT (C),A    ED 79   Передать содержимое аккумулятора на вне-
                                шний порт,  номер которого  содержится в
                                регистре C. Если адрес порта - двухбайт-
                                ная  величина,  то  старший  байт должен
                                быть предварительно помещен в регистр В.
           OUT (C),H    ED 61   То же, но для регистра H.
           OUT (C),L    ED 69   То же, но для регистра L.
           OUT (C),B    ED 41   То же, но для регистра B.
           OUT (C),C    ED 49   То же, но для регистра C.
           OUT (C),D    ED 51   То же, но для регистра D.
           OUT (C),E    ED 59   То же, но для регистра E.

                      5.17.3. Команды блочного ввода/вывода.
                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Эти команды служат для организации ввода/вывода сразу  це-
         лых блоков информации. Здесь так  же, как и для простых  команд
         ввода/вывода, младший байт адреса порта предварительно  помеща-
         ется в регистр С. Если нужен и старший байт, то он располагает-
         ся в регистре В. В  регистре HL размещается начальный адрес,  в
         который начинается загрузка или из которого начинается выгрузка
         (аналогично командам перемещения блоков). В регистре В находит-
         ся количество байтов, подлежащих вводу/выводу.
              Среди этих команд  есть автоматические, выполняющие  сразу
         прием и размещение целого блока (аналогично LDIR и LDDR) и  не-
         автоматические, выполняющие прием по одному байту (далее по ре-
         зультатам проверки флага нуля,  который включается, если в  ре-
         гистре В оказывается в результате операции 0, программист может
         принять решение продолжить ввод или прервать его).  Неавтомати-
         ческие команды аналогичны LDI и LDD.
              Сразу  отметим,  что  автоматические  команды ввода/вывода
         имеют для "Спектрума" очень ограниченное применение, т.к. необ-
+                                   - 105 -

         ходимо, чтобы внешнее периферийное устройство оперировало с той
         же скоростью, что и сам Z-80, а к большинству употребляемых ус-
         тройств это не относится (принтер, магнитофон, клавиатура,  ин-
         терфейс джойстика и т.д.).
            Мнемоника   Код     Комментарий
            INIR        ED B2   Автоматическая команда блочного ввода.
                                Первый  поступающий  байт   направляется
                                туда, куда указывает  адрес, находящийся
                                в регистре HL. Следующий байт размещает-
                                ся за ним и так далее снизу вверх.
            INDR        ED BA   То же, но размещение байтов в памяти
                                идет сверху вниз.
            OTIR        ED B3   То же, что и INIR, но не для ввода, а
                                для вывода.
            OTDR        ED BB   То же, что и INDR, но не для ввода, а
                                для вывода.
            INI         ED A2   То же, что и INIR, но неавтоматическая
            IND         ED AA   То же, что и INDR, но неавтоматическая
            OUTI        ED A3   То же, что и OTIR, но неавтоматическая
            OUTD        ED AB   То же, что и OTDR, но неавтоматическая

                        5.18. КОМАНДЫ ПРЕРЫВАНИЙ

              Команды прерываний  позволяют с  помощью внешних  сигналов
         прерывать  последовательность  исполнения  команд в процессоре.
         Процессор Z-80 имеет  три режима прерываний  - режимы 0,1  и 2.
         Сразу оговоримся,  что не  все они  реализованы в  "Спектруме",
         хотя мы осветим все.
              Когда процессор получает прерывание, то если оно  разреше-
         но, нормальный ход исполнения программы прерывается и  управле-
         ние передается  в специальную  программу обработки  прерываний.
         Место  расположения  этой  обрабатывающей  программы зависит от
         того, какой режим прерывания включен. Программа обработки  пре-
         рывания прекращает свою работу, когда встречает специальную ко-
         манду возврата, после чего управление вновь передается той про-
         грамме, которая была прервана.
              В этой группе всего 7 команд и мы последовательно их  рас-
         смотрим.
+                                 - 106 -

              Команда EI.
              ~~~~~~~~~~
              Код   FB. Назначение  - разрешение прерывания. После  про-
         хождения этой команды обработка прерываний разрешена.

              Команда DI.
              ~~~~~~~~~~~
              Код -  F3. Назначение  - запрет  прерываний. Она запрещает
         прерывания до тех пор, пока не пройдет команда EI.

              Команда IM0.
              ~~~~~~~~~~~~
              Код - ED 46. Назначение - включение прерываний в режиме 0.
         О режимах прерываний см. несколько ниже.

              Команда IM1.
              ~~~~~~~~~~~~
              Код  -  ED  56.  Назначение  - включение режима прерываний
         первого типа (см. ниже).

              Команда IM2.
              ~~~~~~~~~~~~
              Код  -  ED  5E.  Назначение  - включение режима прерываний
         второго рода (см. ниже).

              Команда RET I.
              ~~~~~~~~~~~~~~
              Код - ED 4D.  Эта команда аналогична команде  RET (возврат
         после вызова подпрограммы), но выполняет двойную функцию:
              - возврат из подпрограммы, обслуживающей маскируемое  пре-
         рывание;
              -  разрешение  маскированного  прерывания  (ведь  во время
         работы  обслуживающей  программы  оно  запрещалось, иначе новое
         прерывание могло бы прервать обработку прерывания и т.д.).

              Команда RET N.
              ~~~~~~~~~~~~~~
              Код - ED 45. Она аналогична команде RET I, но обеспечивает
+                                 - 107 -

         возврат при выходе из обработки немаскированного прерывания.

                 ПРЕРЫВАНИЯ В "СПЕКТРУМЕ"  И  ИХ  ИСПОЛЬЗОВАНИЕ
                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

              По своей архитектуре микропроцессор Z-80 имеет возможность
         обработки двух видов прерываний  - маскируемых и немаскируемых.
         Маскируемые прерывания делятся на три типа - прерывания типа 0,
         1 и  2. Тип  маскируемого прерывания  устанавливается с помощью
         команд АССЕМБЛЕРА:
                             IM 0 - код ED 46H
                             IM 1 - код ED 56H
                             IM 2 - код ED 5EH.
              IM - аббревиатура от английского INTERRUPT MODE - тип пре-
         рывания.
              Z-80 имеет  два входа  для сигналов  запроса прерываний  -
         входы "INT" и "NMI".
              На входе линии запроса  прерывания "INT" (16 ножка  микро-
         схемы) внешнее устройство формирует сигнал низкого уровня,  об-
         ращая "внимание"  микропроцессора на  этот сигнал.  В СПЕКТРУМЕ
         сигнал "INT" формируется 50 раз в секунду. Если флаг прерывания
         сброшен (лог."0"), запрос воспринимается и микропроцессор  пре-
         рывает обычную обработку  и переходит к  выполнению необходимой
         процедуры прерывания. Реакция на запрос прерывания определяется
         флагом прерывания, поэтому прерывание может быть замаскировано.
         В программу вводятся команды, которые устанавливают или сбрасы-
         вают флажок прерывания и, следовательно, разрешают или запреща-
         ют его обработку. В Z-80 таких команд две:
              "DI" ( DISABLE INTERRUPTS ) - запрещение прерываний.
              "EI" ( ENABLE INTERRUPTS ) - разрешение прерываний.
              Такой способ позволяет  гибко реагировать на  прерывания -
         мы сами определяем, воспринимать их или игнорировать.
              Однако, в некоторых ситуациях требуется, чтобы  прерывания
         обслуживались незавимо от текущих действий микропроцессора. Для
         этих целей предусмотрена отдельная линия немаскируемого  преры-
         вания "NMI".Когда на ней  появляется сигнал низкого уровня,  то
         по фронту этого сигнала выполнение программы прерывается  неза-
         висимо от состояния флага прерываний, т.e. независимо от  того,
+                                 - 108 -

         разрешены  прерывания  или  запрещены.  При этом микропроцессор
         Z-80 начинает обработку процедуры с адреса 0066Н.
              К сожалению, в ПЗУ  "СПЕКТРУМА" в процедуре обработки  не-
         маскируемого  прерывания  "NMI"  содержится  грубая ошибка (кто
         знает -  случайна ли  она?), благодаря  которой обработка "NMI"
         или приводит к  рестарту компьютера с  нулевого адреса, или  не
         дает никаких  результатов, производя  обычный возврат  в точку,
         откуда было вызвано прерывание.
              Однако, если Вы работаете или в дальнейшем собираетесь ра-
         ботать с видоизменным или теневым ПЗУ, то можете с адреса 0066Н
         разместить свою программу обработки "NMI" или исправить  ошибку
         в стандартной программе. Для  этого необходимо по адресу  006DH
         заменить код 020Н (JP NZ,) на  код 028H (JP Z,). В этом  случае
         программа будет проверять системную переменную "NMIADD" (адреса
         23728 и 23729 -  5CB0H и 5CB1H) и,  если там не ноль,  то будет
         произведен переход по  адресу, содержащемся в  этой переменной.
         Таким образом, Вы сможете расположить свою  программу обработки
         "NMI" по любому необходимому адресу.
              Если Вы хотите работать с "NMI", Вам необходимо будет про-
         извести небольшую доработку компьютера. Дело в том, что на вход
         "NMI" (17 ножка) Z-80 в "СПЕКТРУМЕ" постоянно подано +5В (если,
         конечно, у Вас не подключен контроллер дисковода, где этот вход
         уже используется кнопкой  "MAGIC"). Вам необходимо  будет отре-
         зать  вход  "NMI"  от  +5В  и  подключить его к своему внешнему
         устройству (в самом простом варианте - это будет кнопка), с по-
         мощью которого Вы в нужное время будете подавать сигнал низкого
         уровня на этот вход и включать, тем самым, свою процедуру обра-
         ботки немаскируемого прерывания.
              Обычно запросы  "NMI" используются  для прерывания  работы
         микропроцессора  при  "катострофических"  событиях,   требующих
         немедленной реакции, таких,  как аварийное пропадание  питания,
         обнаружение ошибки памяти  и т.д. Однако, все зависит еще и  от
         Вашей фантазии. Так, например,  нередко делают с помощью  "NMI"
         распечатку любой понравившейся картинки на принтере.
              Для возврата из программы обработки немаскируемого  преры-
         вания используйте  команду АССЕМБЛЕРА  - RETN  (RETURN FROM NON
         MASKABLE INTERRUPT ) - код ED 45H.

+                                 - 109 -

              Теперь рассмотрим виды маскируемых прерываний, обрабатыва-
         емых по запросу на линии "INT".

              "IM 0".
              ~~~~~~~
              Прерывания нулевого типа. В "СПЕКТРУМЕ" этот тип  прерыва-
         ния не реализован вообще. Поэтому мы рассмотрим его вкратце.
              С помощью режима  "IM 0" возможно  аппаратное переключение
         вектора прерывания, т.e. адреса программы обработки прерываний.
         Для этого вводится контроллер прерываний, который отсутствует в
         "СПЕКТРУМЕ". Такое устройство  несложно организовать на  основе
         БИС КР580ИК14 или КР580ВН59, которые по сути являются уже гото-
         выми контроллерами прерываний. Как это организовать, Вы  можете
         узнать из литературы по микропроцессорному комплекту КР580.
              Всего векторов прерываний обычно восемь, в стандартном ва-
         рианте, при использовании адресных линий А0-А2 эти вектора  по-
         падают на адреса рестартов процессора, т.e. на "RST0 - RST38H",
         которые уже задействованы в  ПЗУ "СПЕКТРУМА", причем одна  про-
         цедура "RST38H" служит для обработки прерываний. Xотя, конечно,
         можно это и обойти, используя другие адресные линии.
              Кстати, без контроллера  прерываний включение "IM  0" рав-
         носильно включению "IM 1".

              "IM 1".
              ~~~~~~~~
              После  включения  питания   в  "СПЕКТРУМЕ" устанавливается
         режим прерываний 1. "IM 1" - называется маскируемым прерыванием
         первого типа и выполняет обращение по адресу 0038Н, что обеспе-
         чивает сканирование клавиатуры и изменение встроенного  систем-
         ного таймер,  но если  подключено  ПЗУ  контроллера  дисководов
         или интерфейса микродрайва, то все, что делается при  включении
         прерывания- это немедленный возврат без сканирования клавиатуры
         или каких-либо других действий, т.e. по адресу 0038Н в этих ПЗУ
         записан  код  возврата  из   прерывания  "RETI"  (RETURN   FROM
         INTERRUPT) - ED 4DH.
              Поскольку "IM 1" использует "RST38H", а программа, находя-
         щаяся по адресу 0038Н, уже хорошо сформирована и вряд ли требу-
         ет каких-либо изменений и дополнений, то и интерес к прерывани-
+                                 - 110 -

         ям первого типа носит, скорее всего, познавательный характер.
              Для радиолюбителей и программистов гораздо интереснее пре-
         рывания второго  типа, таящие  в себе  воистину богатейшие воз-
         можности.
              Но прежде, чем перейти к прерываниям второго типа, мы  не-
         много отвлечемся в сторону и поговорим о формировании телевизи-
         онного изображения в "СПЕКТРУМЕ".
              Все нижеописанное справедливо для фирменного  "СПЕКТРУМА",
         т.к. речь пойдет о контроллере дисплея на микросхеме "ULA", но,
         по-видимому, должно представлять  интерес для всех  поклонников
         "СПЕКТРУМА", интересующихся этим режимом прерываний, независимо
         от того, какой версией компьютера они пользуются, ведь во  всех
         версиях есть контроллеры дисплея, собранные на дискретных  эле-
         ментах, ПЗУ или ПЛМ, и кто знает, насколько близки эти контрол-
         леры к оригинальной "ULA"-версии. Это во-первых.  А  во-вторых:
         владение этими знаниями, возможно, поможет стандартизации  оте-
         чественного программного обеспечения.
              При инициализации  "СПЕКТРУМА" в  регистре прерываний  "I"
         помещается число 63 (03FH) и устанавливается первый тип  преры-
         ваний. В принципе, задавать регистр "I" необязательно, т.к. ре-
         жим "IM 1" его не использует, потому что любые прерывания  идут
         через "RST38H". Но регистр "I" в фирменном "СПЕКТРУМЕ" дополни-
         тельно участвует в формировании телевизионного сигнала.   "ULA"
         задействует биты 6 и 7 регистра "I".
              При каждом цикле машинных команд Z-80 обращается к  ячейке
         памяти, адресуемой регистром "I",  выводя его в старшие  восемь
         битов адресной шины, а линия запроса памяти "MREQ"  активизиру-
         ется. "ULA" генерирует прерывания каждый раз, когда  необходимо
         изменить содержимое экрана. Это заставляет Z-80 запустить  про-
         грамму обработки прерываний,  при условии, что  прерывания под-
         ключены.
              Когда программа обработки прерываний выполнена,  процессор
         возвращается в точку, в которой он был при прерывании. Если это
         команды считывания/записи в память между 16384 (4000H) и  32767
         (7FFFH), что  "ULA" проверяет,  просматривая две  старшие линии
         адресной шины и линию "MREQ", то "ULA" приостанавливает  микро-
         процессор до окончания изменения экрана.
              Если старший бит регистра "I" сброшен, а бит 6 активизиро-
+                                 - 111 -

         ван, то "ULA"  может запутаться из-за  регенерации динамической
         памяти. Активизируется линия "MREQ", и регистр "I" помещается в
         старшие восемь  битов адресной  шины. Далее  "ULA" думает,  что
         процессор производит запись или  считывание в эту область  ОЗУ,
         и при попытке это  предотвратить, "ULA" пропускает свое  собст-
         венное обращение для изменения дисплея, что приводит к  развалу
         картинки. Поэтому  в регистре  "I" не  должно содержаться любое
         число от 64  до 127 (040H  до 07FH) включительно,  т.e. c двумя