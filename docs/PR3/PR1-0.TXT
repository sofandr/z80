
                           <<  И Н Ф О Р К О М >>









                           ПЕРСОНАЛЬНЫЙ  КОМПЬЮТЕР

                                "ZX-SPECTRUM"                

                       Программирование в машинных кодах

                            и на языке АССЕМБЛЕРА





                                   Часть 1.
                        " Первые шаги в машинных кодах"

                                   Часть 2.
                 "Практикум по программированию в машинных кодах"

                                   Часть 3.
                "Справочник по программированию в машинных кодах"







                                 Москва 1993

+                                            









              Книга является наиболее доступным изданием по программиро-
         ванию в машинных кодах для широко распространенных персональных
         компьютеров "ZX-Spectrum" (система "Синклер"). В доступной  для
         начинающих форме рассмотрена система команд процессора,  описан
         встроенный калькулятор, разобраны многочисленные примеры. Книга
         содержит интересные  рекомендации по  просмотру машинного  кода
         фирменных программ.
              Предназначена для самостоятельного обучения.






















+                                - 3 -

                              ОТ    АВТОРОВ

              Книга, которую  Вы держите  в руках,  уже получила широкую
         известность, как самый доступный самоучитель для тех, кто хочет
         преодолеть психологический барьер и перейти от программирования
         на  БЕЙСИКе  к  программированию  в  машинном  коде или  просто
         хочет понимать машинный код фирменных программ.
              Первое издание этой книги  мы выпустили два года  назад, в
         1990 году, и сейчас в стране уже есть тысячи любителей  бытовых
         персональных компьютеров типа ZX_Spectrum (система  "Синклер"),
         самостоятельно освоивших тонкости машинного программирования по
         этой книге. Первое издание  было выпущено в трех  томах. Сейчас
         мы объединили все три тома (учебник, практикум и справочник)  в
         рамках единой книги, несколько подкорректировали и  значительно
         (примерно на  20%) дополнили  содержание. Основным  дополнением
         стали разделы, посвященные  описанию системы прерываний  компь-
         тера, разбору концепции потоков и каналов, понятию о директивах
         АССЕМБЛЕРа и вопросам, связанным со стандартизацией русификации
         компьютеров. Как показал первый опыт, именно эти вопросы нужда-
         лись в усиленном освещении.
              "ИНФОРКОМ"  продолжает  работу  над  книгами, посвященными
         компьютерам "Спектрум" и совместимым с ними. В настоящий момент
         начат выпуск многотомного издания, посвященного работе с графи-
         кой "Спектрума". Несмотря на то, что каждый из этих томов явля-
         ется самостоятельной  учебной единицей  и может  быть использо-
         ван независимо от прочих, тем не менее, их можно считать  логи-
         ческим продолжением  данного издания  уже хотя  бы потому,  что
         "Первые шаги в машинном  коде Z-80" в силу  естественных причин
         стали базовой книгой для наших последующих разработок.
              "ИНФОРКОМ" благодарит всех читателей первого издания, при-
         славших свои отзывы, пожелания и рекомендации и особо выражает
         персональную признательность своим корреспондентам Баянову К.Н.
         за подготовку разделов I.5.18, II.4.4.7, III.5 и Пашорину В.И.
         за подготовку раздела II.5.5.
                                                 "ИНФОРКОМ".
                                              Москва, август 1992.


+                                    - 4 -

                             С О Д Е Р Ж А Н И Е

              ВВЕДЕНИЕ...............................................  8


                                 Часть. I.

                         ПЕРВЫЕ ШАГИ В МАШИННЫХ КОДАХ

         1.   Самый-самый первый шаг................................. 10
         2.   Зачем изучать программирование в машинных кодах........ 17
         3.   Архитектура процессора Z-80............................ 23
         4.   Формы представления чисел в процессоре Z-80............ 31
              4.1   Числовые системы................................. 31
              4.2   Двоичная дополнительная форма записи............. 33
              4.3   Десятиричная арифметика в двоичном исчислении.... 35
         5.   Система команд процессора.............................. 36
              5.1   Загрузка числа в регистр......................... 37
              5.2   Копирование и обмен содержимого регистров........ 38
              5.3   Загрузка регистров из памяти..................... 39
              5.4   Команды записи из регистров в память............. 41
              5.5   Команды сложения................................. 43
              5.6   Команды вычитания................................ 45
              5.7   Команды сравнения................................ 47
              5.8   Команды логики................................... 47
              5.9   Команды перехода................................. 51
              5.10  Операции в цикле................................. 57
              5.11  Команды работы со стеком......................... 58
              5.12  Вызов подпрограмм................................ 60
              5.13  Команды обращения к ПЗУ.......................... 62
                       Работа со встроенным калькулятором, интеграль-
                     ная (пятибайтная) форма записи чисел, интеграл-
                     ная упакованная форма, система команд калькуля-
                     тора, примеры................................... 63
              5.14  Команды сдвига и ротации......................... 87
              5.15  Команды для работы с битами...................... 93
              5.16  Команды обработки блоков памяти.................. 96
              5.17  Команды для работы с внешними устройствами.......100
+                                  - 5 -

              5.18  Команды прерываний...............................105
                        Прерывания в "Спектруме" и их использование..107
              5.19  Прочие команды...................................114
         6.   Заключение.............................................116



                                     Часть. II

                            ПРАКТИКУМ ПО ПРОГРАММИРОВАНИЮ
                                 В  МАШИННЫХ  КОДАХ

              Введение...............................................117
         1.   Особенности процессора Z-80............................118
         2.   Расширение системы команд процессора...................123
              2.1  Арифметические конструкции........................124
              2.2  Логические конструкции............................135
              2.3  Конструкции передачи данных.......................142
              2.4  Конструкции ветвления.............................147
              2.5  Конструкции вызова подпрограмм....................158
              2.6  Конструкции возврата..............................159
              2.7  Прочие конструкции................................160
         3.   Директивы АССЕМБЛЕРа...................................163
              3.1  Комментарии.......................................163
              3.2  Метки.............................................164
              3.3  Директива EQU.....................................165
              3.4  Директивы DEFB, DEFW, DEFM........................166
              3.5  Директивы ORG, END................................168
         4.   Разбор программ в машинных кодах.......................169
              4.1  Вывод на бордюр цветных полос.....................169
              4.2  Вывод данных на экран из машинного кода...........172
              4.3  Управление программой от Кемпстон-джойстика.......176
              4.4  Управление программой от клавиатуры...............179
              4.5  Проверка оперативной памяти компьютера............184
              4.6  Практические приемы работы с калькулятором........187
              4.7  Примеры использования прерываний 2-го рода........192
         5.   Каналы и потоки........................................197
              5.1  Стандартные каналы................................198
+                                    - 6 -

              5.2  Прочие каналы.....................................199
              5.3  Область информации о каналах......................200
              5.4  Подключение потоков...............................201
              5.5  Практические приемы работы с каналами и потоками  202
         6.   Практические рекомендации по просмотру машинного кода
              фирменных программ.....................................208
         7.   Обзор типичных ошибок, возникающих при программировании
              в машинных кодах.......................................217


                                  Часть. III

                         СПРАВОЧНИК ПО ПРОГРАММИРОВАНИЮ
                              В  МАШИННЫХ  КОДАХ

              Введение...............................................222
         1.   Система команд компьютеров типа "ZX-Spectrum"..........223
         2.   Система команд процессора Z-80 ........................229
              2.1 Команды загрузки числа в регистр...................229
              2.2 Команды загрузки числа в регистровую пару..........230
              2.3 Команды копирования одиночных регистров............230
              2.4 Копирование содержимого регистровых пар............232
              2.5 Загрузка регистров из памяти прямой адресацией.....232
              2.6 Загрузка регистров из памяти косвенной адресацией..232
              2.7 Загрузка регистров из памяти индексной адресацией..233
              2.8 Команды обмена.....................................233
              2.9 Запись в память прямой адресацией..................233
             2.10 Запись в память косвенной адресацией...............234
             2.11 Запись в память индексной адресацией...............234
             2.12 Команды простого сложения..........................235
             2.13 Команды приращения (инкремент).....................235
             2.14 Команды сложения с учетом флага переноса...........236
             2.15 Команды простого вычитания.........................236
             2.16 Команды уменьшения (декремент).....................237
             2.17 Команды вычитания с учетом флага переноса..........237
             2.18 Команды сравнения..................................238
             2.19 Команды логики.....................................238
             2.20 Команды перехода...................................240
+                                   - 7 -

             2.21 Команды работы со стеком...........................240
             2.22 Команды обращения к ПЗУ............................241
             2.23 Команды вызова подпрограмм и возврата..............241
             2.24 Команды сдвига битов...............................242
             2.25 Команды ротации битов..............................243
             2.26 Команды включения битов............................244
             2.27 Команды выключения битов...........................246
             2.28 Команды проверки битов.............................249
             2.29 Команды перемещения блоков.........................251
             2.30 Команды блочного поиска............................251
             2.31 Команды ввода от внешних устройств.................252
             2.32 Команды вывода на внешние устройства...............252
             2.33 Команды обработки прерываний.......................253
             2.34 Прочие команды.....................................254
         3.  Система команд калькулятора.............................254
         4.  Словарь мнемоник АССЕМБЛЕРа.............................259
         5.  Таблица указателей адресов перехода по IM2..............262
         6.  Справочные таблицы по русификации компьютера............263
             6.1 Русификация с использованием символов UDG...........264
             6.2 Русификация с заменой "знакогенератора".............265
                 6.2.1 Русификация "под принтер".....................265
                 6.2.2 Русификация "под пишущую машинку".............267
             6.3 Полезные советы.....................................268
         7.  Заключение..............................................270














+                                    - 8 -

                                    ВВЕДЕНИЕ

              Проведенное в начале 1990 года анкетирование наших  заказ-
         чиков показало их  глубокую заинтересованность в  освоении про-
         граммирования в машинных кодах для Синклер-совместимых  компью-
         теров,  получивших  в  нашей  стране наибольшее распространение
         среди ПЭВМ бытового класса.
              Процессор Z-80, на  базе которого собраны  компьютеры этой
         системы, приобрел широкую  популярность в мире  благодаря своей
         универсальности, наличию обширной системы команд и  технологич-
         ности производства, обеспечившей ему большие объемы выпуска при
         сравнительно невысокой цене.
              Этот процессор применяется не только в многочисленных ком-
         пьютерах, входящих в систему "Синклер-Спектрум", но и в компью-
         терах других систем. Среди них компьютеры семейства MSX  ("ЯМА-
         ХА", "СПЕКТРОВИДЕО", "ТОШИБА",  "ПАНАСОНИК" и др.),  компьютеры
         систем "ЭНТЕРПРАЙЗ", "ШАРП", многие компьютеры фирмы  "АМСТРАД"
         и пр.  В принципе, материалы  этой книги могут быть на 90%  ис-
         пользованы и теми, кто работает с компьютерами этих систем.
              В настоящее время процессор Z-80 очень хорошо документиро-
         ван в  мировой литературе.  Наиболее фундаментальными   трудами
         для программистов любого  уровня являются монографии  Лэнса Ле-
         венталя  (LANCE  A.LEWENTHAL)  "Программирование  на Ассемблере
         Z-80" ("Z-80 ASSEMBLY PROGRAMMING"), а также "Процедуры на  Ас-
         семблере для процессора Z-80" ("Z-80 ASSEMBLY LANGUAGE  SUBROU-
         TINES).
              Эти очень хорошие книги,  к сожалению, весьма объемны  (по
         500-600 стр.) и не переведены на русский язык, что делает  сом-
         нительной возможность их широкого распространения у нас в  бли-
         жайшие годы.
              Многочисленные прочие книги зарубежных авторов,  посвящен-
         ные  программированию  для  Синклер-совместимых  компьютеров  в
         машинном коде, имеют в качестве недостатков либо  недостаточную
         систематичность изложения, либо повышенную инструктивность  по-
         дачи материала. В первом  случае они оказываются неплохим  под-
         ручным справочником, а во  втором - неплохим учебником,  но для
         тех, кто уже в принципе подготовлен. Учебником же для тех,  кто
         самостоятельно начинает разбираться с самого начала, они  могут
+                                     - 9 -

         служить очень ограниченно.
              В своей книге,  предлагаемой Вашему вниманию,  мы постара-
         лись, как сумели, сочетать популярность, систематичность и  ин-
         формативность изложения.  Те, кто  не нуждаются  в элементарном
         освоении программирования в  машинных кодах, могут  сразу обра-
         титься  ко  второй  части  "Практикум...". Чтобы не дублировать
         справочный материал, который необходим как тем, кто работает  с
         первой частью, так  и тем, кто  работает со второй,  мы вынесли
         его отдельно, в третью часть.
              Мы  очень  рекомендуем  сопровождать  чтение  этой   книги
         самостоятельным просмотром  кода фирменных  программ с  помощью
         какой-либо дисассемблирующей программы, например MONITOR 16/48,
         MONS 3, ULTIMON и т.п.
              Мы  должны  также порекомендовать Вам  наше  периодическое
         издание "ZX-РЕВЮ". На его страницах Вы сможете найти почти все,
         что Вам может потребоваться из программного и   информационного
         обеспечения компьютеров системы "Синклер" и кое-что,  связанное
         с аппаратными вопросами.
              У   нас   возможно приобретение  полных годовых комплектов
         "ZX-РЕВЮ" за 1991 и за  1992 год, выполненных в виде  отдельной
         книги.  Выходят и выпуски  1993 года. Для справки укажем,   что
         объем  одного полного  годового комплекта "ZX-РЕВЮ" примерно  в
         5 раз превосходит объем данной книги.
              Свои пожелания, замечания  и предложения Вы  можете напра-
         вить нам  по адресу  121019, Москва,  Г-19, а/я  16. Вы  всегда
         сможете выбрать  из списка  выпущенной нами  литературы то, что
         Вам будет по душе.











+                                  - 10 -


                       I. ПЕРВЫЕ ШАГИ В МАШИННЫХ КОДАХ


                         1. САМЫЙ - САМЫЙ ПЕРВЫЙ ШАГ...

              Многие любители не испытывают серьезных трудностей в овла-
         дении БЕЙСИКом. Для этого достаточно сравнительно немного прак-
         тики. Но рано или поздно они приходят к барьеру "машинного  ко-
         да". Как это ни печально, но некоторые так перед ним и останав-
         ливаются. Это ни в коей  мере не связано с отсутствием  желания
         или способностей, просто многие  не знают, с чего  начать. Если
         в БЕЙСИКе можно  начинать с чего  угодно (при ошибке  компьютер
         сам Вас поправит), то  здесь Вы оказываетесь с  процесором один
         на один, и такой метод проб и ошибок не срабатывает.
              Одним словом, есть  некий психологический барьер,  который
         бывает трудно  преодолеть в  одиночку. Известно,  что для того,
         чтобы научиться программировать, надо взять и начать программи-
         ровать. "ИНФОРКОМ" предлагает Вам следующий компромиссный  под-
         ход - сначала в рамках этой главы мы, беря "быка за рога", про-
         сто начнем программировать,  а затем посвятим  оставшуюся часть
         книги систематическому изложению материала.
              Итак, давайте  напишем первую  программу в  машинном коде.
         Прежде всего, выделим  для нее область  памяти. Если Вы  читали
         нашу книгу "Большие возможности Вашего "Спектрума", то  знаете,
         что для  БЕЙСИКа в  оперативной памяти  компьютера отведена об-
         ласть памяти, начинающаяся с адреса, на который указывает  сис-
         темная переменная PROG и заканчивается адресом, на который ука-
         зывает системная переменная RAMTOP. Предположим, что Вы  хотите
         записать программу  в машинных  кодах, начиная  с адреса 30000.
         Дайте команду CLEAR 29999. Эта команда установит RAMTOP в 29999
         и Ваша программа будет защищена от возможной порчи из  БЕЙСИКа.
         Даже если  Вы дадите  команду NEW,  области памяти, находящиеся
         выше RAMTOP, не будут поражены.
              Теперь дайте две прямые команды одну за другой:

                               POKE 30000,0
                               POKE 30001,201
+                                   - 11 -

              Мы сейчас записали два числа в нужные нам адреса. Они  об-
         разуют  простейшую  программу.  Выполнить  ее  можно   командой
         RANDOMIZE  USR  30000.  Попробуйте  сами...  Вам покажется, что
         ничего не произошло, но это не так. Сначала процессор обратился
         по адресу 30000 и нашел там число 0, которое обозначает  машин-
         ный код операции NOP.  Операция NOP (NO OPERATION - нет  опера-
         ции)  дает  команду  процессору,  что  ничего делать не надо. В
         течение 0,0000014  сек. он  действительно ничего  не делает,  а
         затем переходит к следующему адресу, где находит число 201.
              Это команда  RET (RETURN  - возврат).  Она дает процессору
         указание прекратить в этом  месте программу в машинных  кодах и
         вернуться туда, откуда она вызывалась, т.е. в нашем случае -  в
         БЕЙСИК.  Это  самое  процессор  и  сделал,  о  чем  Вы получили
         сообщение БЕЙСИКа "О.К.".
              Если все, что Вы здесь  прочитали, Вам понятно, то Вы  уже
         поняли,  как  составляются  программы  в машинных кодах. Можно,
         конечно,  возразить,  что  пользы  от  такой программы не очень
         много, но сейчас  не в этом  суть. Важно, чтобы  Вы поняли, что
         некая последовательность  чисел может  быть последовательностью
         команд для процессора Z-80.
              К сожалению, для нас мало что говорит простая последова-
         тельность чисел вроде таких, как 0 и 201. Держать в памяти коды
         всех команд процессора (а их около семисот) непросто, но дело
         упрощается тем, что есть промежуточный язык между процессором и
         человеком - язык АССЕМБЛЕРа. У каждого кода есть своя мнемоника
         АССЕМБЛЕРа. Мнемоника - это набор букв, являющихся сокращением
         английских слов. Для нашего примера программа на АССЕМБЛЕРе
         выглядит так:
                                NOP
                                RET
              Перевод этих мнемоник в машинные коды тоже можно  поручить
         компьютеру. Для этого существуют специальные программы, которые
         тоже называют АССЕМБЛЕРами. Есть и противоположные программы  -
         ДИСАССЕМБЛЕРы. Они наоборот переводят машинные коды в мнемоники
         АССЕМБЛЕРа.
              И  тех  программ  и  других  достаточно  много.  Часто они
         объединяются в пакеты. Широко распространены пакеты GENS3/MONS3
         фирмы HISOFT  и EDITAS/MONITOR  16/48 фирмы  PICTURESQUE. Здесь
+                                 - 12 -

         GENS3 и EDITAS - АССЕМБЛЕРы, а MONS3, MONITOR 16 и MONITOR 48 -
         ДИСАССЕМБЛЕРы.
              Теперь давайте вернемся к нашей первой программе и  попро-
         буем ее несколько развить, чтобы она все же что-то делала. Про-
         цессор Z-80 имеет несколько  регистров, у которых есть  имена -
         "А", "В", "С" и т.д. Каждый из них может содержать одно  какое-
         либо целое число от 0 до 255 (т.е. один байт).
              Существуют  десятки  команд  процессора, которые позволяют
         копировать содержимое регистров из одного в другой, а также вы-
         полнять связь с внешним миром, в т.ч. и с оперативной памятью.
              Так, например, команда АССЕМБЛЕРа  LD B,A (машинный код  -
         71) означает "загрузить содержимое регистра А в регистр В".  LD
         - это сокращение от LOAD (LOAD - ЗАГРУЗКА).
              Точно так же LD C,B (машинный код 72) означает  "загрузить
         в регистр С содержимое регистра В". Можно загружать в  регистры
         и целые числа. Например, LD A,N - означает "загрузить в регистр
         А целое число N, где N может быть числом от 0 до 255". До этого
         все команды  были однобайтными.  Эта же  команда - двухбайтная.
         Сначала идет машинный код - 62,  а за ним само число -  N. Так,
         например, LD A,77 (загрузить в регистр А число 77) будет выгля-
         деть так: 62,77. Здесь 62 - код операции, - он сообщает процес-
         сору, что надо сделать, а  77 - это операнд. Заметим  здесь же,
         что бывают  операции и  трехбайтные и  четырехбайтные.   Первый
         байт, как правило, - код операции, а следующие за ним - операн-
         ды. Мы говорим "как правило" потому, что есть некоторые  опера-
         ции, код которых записывается двумя байтами  /1.
              Итак, мы уже готовы к тому, чтобы написать программу,  ко-
         торая будет перебрасывать  какое-либо число из одного регистра
         процессора в другой.
         ───────────────────────────────────────────────────────────────
         /1  ИСТОРИЧЕСКАЯ СПРАВКА: Процессор Z-80 разрабатывался на  ос-
         нове своего предшественника,  процессора 8080. Большинство  ко-
         манд у них совпадают, но для Z-80 было добавлено несколько  де-
         сятков новых команд. Чтобы их отличить от команд 8080, они  на-
         чинаются с префикса 203, 221, 237 или 253 (в  шестнадцатиричном
         коде, соответственно:  CB, DD,  ED или  FD). Поэтому  появились
         операции, код которых состоит из двух байтов, за которыми  сле-
         дуют операнды.
+                                 - 13 -

                   АССЕМБЛЕР                   МАШИННЫЙ КОД
                   NOP                         30000      0
                   LD A,77                     30001      62
                                               30002      77
                   LD B,A                      30003      71
                   LD C,B                      30004      72
                   RET                         30005      201
              Гораздо интереснее было  бы организовать обмен  между про-
         цессором  и  оперативной  памятью  компьютера.  Команд, которые
         позволяют это сделать, тоже очень много. Например, это  команда
         LD  (NN),A.  Ее  машинный  код  -  50.  Она означает следующее:
         "Загрузить  в  ячейку  памяти,  адрес которой задан двухбайтным
         числом NN,  содержимое регистра A". Эта команда -  трехбайтная.
         Первым идет код операции (50),  а за ним - двухбайтный  операнд
         NN, который задает нужный  Вам адрес. Например, если  Вам нужен
         адрес  30008,  то  тогда  операнд  NN  будет иметь вид: 56, 117
         потому, что 117*256 + 56 = 30008.
              Этот двухбайтный  операнд имеет  старшую часть  и младшую.
         Запомните, что двухбайтные числа (как правило, это адреса) хра-
         нятся в памяти всегда в обратном порядке, т.е. сначала  младший
         байт, а потом старший /1.
              Таким образом, команда АССЕМБЛЕРа LD (30008),A в  машинных
         кодах запишется так: 50, 56, 117.
              Существует и противоположная команда LD A,(NN)  -  "Загру-
         зить в  регистр А  содержимое ячейки  памяти, заданной  адресом
         NN". Ее код - 58, за которым следуют два байта, указывающие  на
         адрес: сначала младший, а  потом - старший. Тогда  LD A,(30007)
         запишется так:  58, 55, 117.
              Теперь мы уже можем перемещать содержимое ячеек памяти из
         одной в другую, копируя его через регистр А процессора.
         ───────────────────────────────────────────────────────────────
         /1  ИСТОРИЧЕСКАЯ СПРАВКА: Наш житейский опыт учит, что  сначала
         идут старшие разряды,  а потом младшие.  Например, в числе  567
         сначала идут сотни (5), потом - десятки (6) и только затем еди-
         ницы (7). В компьютере - наоборот. Это связано с тем, что  пер-
         вые компьютеры имели такую маленькую память, что о старших раз-
         рядах речь тогда и не шла. Они явились более поздним дополнени-
         ем и им пришлось занять не первое место.
+                                 - 14 -

              Теперь мы уже можем перемещать содержимое ячеек памяти из
         одной в другую, копируя его через регистр А процессора.

                                До операции
           ┌───────┐                                        ┌───────┐
           │ 30007 │                                        │ 30008 │
           ├───────┤      ┌───┬──┬──┬──┬──┬──┬──┬──┬──┐     ├───────┤
           │   N   │      │ A │. │. │. │. │. │. │. │. │     │   -   │
           └───────┘      ├───┴──┴──┴──┴──┴──┴──┴──┴──┤     └───────┘
                          │ П  Р  О  Ц  Е  С  С  О  Р │
                          └───────────────────────────┘
                               После операции
           ┌───────┐                                        ┌───────┐
           │ 30007 │                                        │30008  │
           ├───────┤                                        ├───────┤
           │   N   │                                        │  N    │
           └───────┘                                        └───────┘

                    АССЕМБЛЕР                  МАШИННЫЙ КОД

                    LD A,(30007)                30000    58
                                                30001    55
                                                30002    117
                    LD (30008),A                30003    50
                                                30004    56
                                                30005    117
                    RET                         30006    201

              Можно еще несколько  усложнить задачу и  попытаться выпол-
         нить сложение содержимого двух каких-либо ячеек памяти и отпра-
         вить результат на хранение в какую-либо ячейку. Для  выполнения
         арифметических действий, например сложения, процессор Z-80 так-
         же имеет несколько команд.  Рассмотрим команду ADD A,B  (ее ма-
         шинный код - 128). ADD = ADDITION = СЛОЖЕНИЕ.
              ADD A,B означает следующее: "Прибавить содержимое регистра
         B процессора к  содержимому регистра А  и результат оставить  в
         регистре А".
              Как видите, эта команда однобайтная, т.к. все указания  на
+                                   - 15 -

         то, что откуда  взять, что с  ним сделать и  куда отправить ре-
         зультат, в ней есть уже сами собой.
              Предположим, что Вы хотите сложить содержимое ячеек  30013
         и 30014, а результат поместить а ячейку 30015. Тогда  программа
         на АССЕМБЛЕРе и в машинных кодах будет иметь вид:

         АССЕМБЛЕР           МАШИННЫЙ КОД      КОММЕНТАРИЙ
         LD A,(30013)        30000    58       Загрузить в регистр А
                             30001    61       число, содержащееся в
                             30002    117      адресе 30013.
         LD B,A              30003    71       Загрузить в регистр В
                                               содержимое регистра А
         LD A,(30014)        30004    58       Загрузить в решистр А
                             30005    62       число, содержащееся в
                             30006    117      адресе 30014.
         ADD A,B             30007    128      Прибавить к содержимому А
                                               содержимое регистра В.
         LD (30015),A        30008    50       Выгрузить содержимое
                             30009    63       регистра А в адрес 30015.
                             30010    117
         NOP                 30011    0        Нет операции. Пауза.
         RET                 30012    201      Возврат туда, откуда эта
                                               программа вызывалась.

              Попробуйте эту программу в работе. Пусть Вы хотите сложить
         два числа, скажем 50 и 70. Сначала выделим память для этой про-
         граммы в машинных кодах.

         10 CLEAR 29999

              Теперь введем  эту программу  в память,  начиная с  адреса
         30000.

         20 FOR i=30000 TO 30012: READ q: POKE i,q: NEXT i
         30 DATA 58, 61, 117, 71, 58, 62, 117, 128, 50, 63, 117, 0, 201

              Запишем в ячейки 30013 и 30014 те два числа, которые мы
         желаем сложить:
+                                 - 16 -

         40 POKE 30013, 50: POKE 30014, 70

              Введем команду  на исполнение  нашей программы  в машинных
         кодах.

         50 RANDOMIZE USR 30000

              И, наконец, стартуем нашу БЕЙСИК-программу - RUN.
              Через долю секунды она отработает и на экране появится со-
         общение О.К. Вроде бы ничего не изменилось, но если Вы провери-
         те, что находится в ячейке  30015, то убедитесь, что там  нахо-
         дится результат сложения, т.е. число 120.

                 PRINT PEEK 30015   даст Вам:     120   О.К.

              Итак, мы уже познакомились с несколькими командами процес-
         сора Z-80. Теперь  нам придется прервать  такое сверхпопулярное
         изложение, поскольку система  команд этого процессора  довольно
         обширна и при таком подходе пришлось бы отвести ей около тысячи
         страниц. Мы надеемся, что психологический барьер Вы уже преодо-
         лели и  далее мы  переходим к  систематическому и  постепенному
         освоению системы команд процессора.
              Вы, по-видимому, поняли, что всякой команде в машинных ко-
         дах соответствует своя мнемоника  АССЕМБЛЕРа, в которой в  нес-
         кольких буквах зашифрована  суть операции. К  сожалению, обычно
         литературу пишут профессионалы для профессионалов и они не  ут-
         руждают себя переводом мнемоник на русский язык, тем более, что
         по Z-80 книг на русском языке почти нет (есть несколько  ведом-
         ственных переводов). Поэтому "Инфорком" в своем "Справочнике.."
         (часть 3) уделил место словарю для перевода мнемоник АССЕМБЛЕРа
         в нормальный английский, а через него и в русский язык.
              В заключение этой главы несколько общих замечаний. Различ-
         ные процессоры имеют различные системы команд.  Знание  системы
         команд процессора Z-80 еще  не означает, что Вы  сможете разби-
         раться в машинном коде других компьютеров, собранных на  других
         процессорах, но совершенно точно, что их освоение пройдет у Вас
         в десятки раз быстрее.
              Даже для  одного только  процессора Z-80  мнемоники до сих
+                                 - 17 -

         пор не стандартизированы. Многие ассемблирующие программы,  на-
         пример, EDITAS,  ZEUS, GENS1...GENS3  и др.  имеют отклонения в
         форме записи мнемоник, но они незначительны и всегда оговарива-
         ются в сопроводительной инструкции к программе.

              2. ЗАЧЕМ ИЗУЧАТЬ ПРОГРАММИРОВАНИЕ В МАШИННЫХ КОДАХ

              Законный вопрос - зачем изучать программирование в  машин-
         ных кодах, когда  существует столько разнообразных  языков про-
         граммирования, рассчитанных  на любые  вкусы и  интересы? Разве
         это не возврат на тридцать пять лет назад, когда программирова-
         ли только в кодах и языков программирования еще не  существова-
         ло? Разве писать программу в машинном коде это не то же  самое,
         что высекать дом в скале с помощью напильника?  Чтобы  ответить
         на эти вопросы, надо рассмотреть, что же такое языки программи-
         рования и как они обеспечивают общение человека с компьютером.
              Процессор -  это микросхема,  которая не  понимает никаких
         языков программирования, воспринимает только машинные коды, по-
         скольку  они  представлены  электрическими импульсами. Поэтому,
         когда мы запускаем  программу в машинных  кодах, то работаем  с
         процессором напрямую, без каких-либо посредников, какими  явля-
         ются языки программирования. Для компьютера язык программирова-
         ния сам по себе ничего не говорит. Ему нужна системная програм-
         ма, которая прочитает операторы Вашей программы и переведет  их
         (транслирует) в  машинный код.  Такие программы  существуют, их
         называют трансляторами.
              Трансляторы бывают двух типов - ИНТЕРПРЕТАТОРЫ и  КОМПИЛЯ-
         ТОРЫ.
              Интерпретатор переводит  Вашу программу  с языка  высокого
         уровня (например, БЕЙСИКа) в машинный код последовательно стро-
         ку за строкой. Он работает примерно так: прочитал строку,  про-
         верил нет ли в ней ошибок, перевел ее в машинный код,  выполнил
         команды машинного кода, запомнил где нужно результат и  перешел
         к следующей строке. Чтобы сделать, например, операцию

                         10 PRINT  2 + 2,
         интерпретатор обращается  к процессору  несколько сот  раз. Вам
         этого не видно,  все равно результат  появится на экране  через
+                                 - 18 -

         доли секунды, но это так.
              Если же Вам позже придется вернуться к этой строке (напри-
         мер, с помощью GO TO 10), то все эти действия будут  повторены.
         А ведь многие операции выполняются в циклах.
              Таким  образом,  интерпретатор  работает  крайне медленно.
         Зато имеется  возможность работы  в диалоговом  режиме. Так, на
         Бейсике, когда Вы набираете программу, каждая строка сразу же и
         проверяется  на  правильность  синтаксиса  и,  если Вы сделаете
         ошибку, то строка не будет введена в программу нажатием клавиши
         ENTER до тех  пор, пока Вы  эту ошибку не  устраните. Вы всегда
         можете прервать работу программы, внести изменения и стартовать
         опять, причем с той строки,  с какой хотите. Работать с  интер-
         претатором  БЕЙСИКа  настолько  удобно  для  начинающих, что на
         многих моделях персональных ЭВМ, в том числе и на  "Спектруме",
         он уже  "зашит" в  постоянное запоминающее  устройство (ПЗУ)  и
         служит не только языком программирования, но и выполняет  функ-
         ции операционной системы компьютера. При включении компьютера в
         сеть он сразу готов к выполнению команд БЕЙСИКа.
              В  отличие  от  интерпретатора,  компилятор переводит Вашу
         программу  с  языка  высокого  уровня  (например  ПАСКАЛя   или
         ФОРТРАНа) в машинные коды всю целиком. После того, как програм-
         ма написана, она компилируется в машинный код. Программа, напи-
         санная  Вами  на  языке,  называется исходным текстом (исходным
         модулем, исходным блоком, исходным файлом). То, что Вы получае-
         те в результате  компиляции, называется объектным  кодом (моду-
         лем). Вы можете выгрузить объектный код на ленту, а потом снова
         загрузить. Можете запустить его  на исполнение, но здесь  у Вас
         уже нет  возможности во  время работы  программы ее остановить,
         внести изменения и снова запустить с произвольно взятого места.
         Если такая необходимость  возникает, надо заново  загрузить ис-
         ходный текст программы, внести изменения, а потом опять  отком-
         пилировать его в машинный код.
              Поскольку здесь компиляция  выполняется для каждой  строки
         только один раз, а потом полученный машинный код можно  исполь-
         зовать хоть всю жизнь,  то здесь скорость работы  программы го-
         раздо выше  и лишь  немного уступает  скорости программ,  сразу
         написанных на АССЕМБЛЕРе. Те все же быстрее, т.к. как бы  хорош
         компилятор ни был, он все  же не в состоянии сделать  объектный
+                                  - 19 -

         код оптимальным  по быстродействию  и по  объему занимаемой па-
         мяти.
              К недостаткам компиляторов относится и то, что здесь  про-
         цесс составления  и отладки  программ более  трудоемкий и менее
         очевидный, т.к. между внесением изменений в программу и резуль-
         татом  запуска  есть  еще  промежуточный  процесс - компиляция.
         Кроме того, компиляторы часто накладывают ограничения на приме-
         нение тех или иных операторов языка программирования.
              Итак, программирование в машинном коде (или на АССЕМБЛЕРе,
         что то же самое)  позволяет повысить скорость работы  программы
         по сравнению с работой через  интерпретатор в 50...200 раз и  в
         1,5...3 раза  по сравнению  с кодом,  прошедшим компиляцию. Это
         бывает чрезвычайно важно, если в программе есть  многочисленные
         вложеннные  друг  в  друга  циклы, если многократно выполняются
         поиск и выбор данных из обширных областей памяти. Много времени
         занимают операции, связанные с обработкой графических изображе-
         ний на экране. Эффект плавного и быстрого перемещения (и  изме-
         нения  формы)  объектов  в  компьютерных видеоиграх практически
         всегда создается программированием в машинном коде.
              Второй важный момент состоит в сокращении объема  занимае-
         мой памяти. Казалось бы, что 48 килобайтов в "Спектруме" -  это
         немало. Тем не менее, если учесть, что почти 7К занимает экран-
         ная область памяти, то при создании красочных программ,  содер-
         жащих несколько десятков экранов, на их хранение даже и в  ком-
         прессированном виде  уходит несколько  десятков К,  а надо  еще
         выделить место для хранения таблиц данных, переменных,  текстов
         сообщений и т.п.  Поэтому в лучших  программах на сам  машинный
         код, по которому они  работают, остается всего 4...8К.  Здесь и
         проявляется  мастерство  программиста,  сумевшего  обеспечить в
         столь малом объеме богатое многообразие вариаций игры,  палитру
         цветов и гамму звуков.
              Сравним расход памяти при  работе на БЕЙСИКе и  в машинных
         кодах. Программа на БЕЙСИКе  размером в 30 строк  занимает при-
         мерно 1К памяти.
              Аналогичная  ей,  выполняющая  те  же  задачи, программа в
         машинных  кодах  будет  иметь  примерно  150 строк (команд), но
         занимают они всего 200...250 байтов оперативной памяти.

+                                 - 20 -

              В нашей стране есть еще две объективные причины,  вызываю-
         щие повышенный интерес к программированию в машинных кодах.
              Дело в том, что наибольшее число пользователей этого клас-
         са компьютеров у нас составляют радиолюбители и специалисты  по
         электронике, самостоятельно собравшие компьютер. Обычно они  не
         останавливаются на достигнутом, а развивают свое хобби  дальше,
         ищут пути усовершенствования машины, пути подключения  дополни-
         тельных устройств: интерфейсов принтера, дисковода,  джойстика,
         светового пера, программатора, контроллеров бытовой аппаратуры,
         бытовых систем,  систем управления  различными моделями  и т.д.
         вплоть до систем управления технологическими процессами промыш-
         ленных предприятий. В конце 80-х годов в Душанбе на базе  этого
         компьютера  была  сделана  система голосования республиканского
         парламента.  Работают  под  управлением  "Спектрума"  и   очень
         интересные системы  управления сельскохозяйственными  предприя-
         тиями  (фермами  и  птицефермами). Интересны автоматизированные
         системы диагностирования автомобиля, системы контроля состояния
         спортсменов и многое многое другое. Поскольку процедуры, управ-
         ляющие работой  всех этих  устройств (их  называют драйверами),
         обычно пишутся  в машинных  кодах, то  их надо  знать и уметь с
         ними работать.
              Другая особенность состоит в том, что основная масса  про-
         грамм для Синклер-компьютеров  написана в Англии  на английском
         языке. Желание  адаптировать эти  программы на  русский язык во
         многих случаях  упирается в  необходимость понимания  структуры
         программы,  а  большинство  лучших  программ  написано именно в
         машинных кодах.
              "ИНФОРКОМ" получает множество писем с вопросами по  поводу
         переделки системы  загрузки блоков  фирменных программ.  Мы так
         понимаем, что многие уже обзавелись дисководом с Бета-диск  ин-
         терфейсом, и теперь перед ними стоит задача переписывания  про-
         грамм на диск. При  этом пользоваться "магической кнопкой"  они
         не хотят, т.к.  при этом любая,  даже самая короткая  программа
         будет занимать на диске 48К, а хотят ее переписать на диск блок
         за блоком и сопроводить загрузчиком с диска. На все эти вопросы
         ответ может быть  только один. Поскольку  разные фирмы в  своих
         программах  применяют  разные  системы загрузки, универсального
         решения здесь не существует. К каждой программе нужен индивиду-
+                                 - 21 -

         альный подход.  Надо прочитать  загрузчик программы,  понять из
         него куда какой блок загружается и в каком порядке они  старту-
         ют, а затем, если надо, внести в него свои изменения. Поскольку
         лучшие  программы  имеют  при  себе  загрузчик в машинных кодах
         (обычно  он  следует  после  БЕЙСИК-загрузчика  или организован
         внутри него в строке после оператора REM), то умение работать с
         машинным кодом Вам пригодится и здесь.
              Вот в основном  те причины, которые  могут побудить Вас  к
         освоению программирования в машиных кодах или хотя бы их  пони-
         манию (что достигается гораздо быстрее, чем способность  актив-
         ного программирования, но имеет не меньше значения), хотя хоте-
         лось бы отметить еще два важных, на наш взгляд, обстоятельства.
              Во-первых, "Спектрум"  имеет ПЗУ  объемом 16К.  Эта память
         буквально насыщена множеством  очень полезных системных  проце-
         дур. Все они записаны в  машинных кодах. Их можно смело  приме-
         нять в собственных программах, обращаясь к ним по мере  необхо-
         димости. Это дает колоссальный выигрыш в расходе памяти и вооб-
         ще очень  упрощает программирование.  Поскольку все  содержимое
         ПЗУ записано в машинном коде, умение разбираться в нем является
         необходимым. Для использования системных программ, содержащихся
         в ПЗУ, Вам необходимо ознакомиться с основами  программирования
         в машинных кодах.
              Во-вторых, изучение программирования в машинном коде  про-
         цессора  Z-80  хоть  и  трудоемкий,  но  очень полезный шаг для
         Вашего будущего. Компьютерная техника непрерывно прогрессирует.
         Широко внедряются IBM-совместимые  машины с процессорами  8088,
         8086, 80286, 80386, 80486.  Процессор Z-80 - "двоюродный  брат"
         процессора 8088  и имеет  определенные черты  сходства со  всей
         этой серией.   Те из Вас,  кто свяжут свою  судьбу с профессио-
         нальной  вычислительной  техникой,  еще  не раз вспомнят добром
         свои первые шаги в освоении машинного кода Z-80.
              Что же касается особой трудоемкости работ по программиро-
         ванию в машинных кодах, то и здесь есть ряд возражений.
              1.  Нет  необходимости  сразу  программировать.  На первом
         этапе  Вы  уже  сможете  многого  достичь,  если  будете просто
         разбираться в программах, а дальше все придет с набором опыта.
              2. Существуют ассемблирующие программы, которые имеют до-
         статочный набор средств, чтобы освободить Вас от самой рутинной
+                                 - 22 -

         работы и снизить трудоемкость программирования.
              3. Как  правило, нет  никакой необходимости  всю программу
         писать в машинных кодах. Всегда в ней можно выделить блок,  ко-
         торый решающим образом влияет на быстродейстиве. Он может  быть
         очень маленьким по размеру. Вот  его-то и надо записать в  маш.
         кодах, а остальную часть программы оставить, например, на  БЕЙ-
         СИКе. Если Вы  создаете программу "русско-английский  словарь",
         то она вполне может быть написана на БЕЙСИКе и только процедура
         поиска перевода  слова, занимающая  много времени,  должна быть
         записана в машинных кодах. Если же Вы создаете русско-китайский
         словарь, то еще одним  узким местом станет рисование  на экране
         иероглифов. Вам придется  записать несколько процедур,  которые
         смогут делать это быстро.
              Диалог же с пользователем программа может вести и из БЕЙ-
         СИКа.
              4. И, наконец, последнее. Ни один программист,  работающий
         в машинных  кодах, не  пишет большую  программу от  начала и до
         конца с чистого листа. Программа представляет хитроумное  спле-
         тение больших и малых подпрограмм (процедур), из которых  может
         быть до 80% стали для этого программиста стандартными, т.е.  он
         применяет их регулярно во всех своих программах без особых  пе-
         ремен, а Вы  никогда об этом  и не догадаетесь.  Это могут быть
         процедуры поиска, сортировки,  арифметических и логических  вы-
         числений, обработки изображений, опроса внешних устройств  (на-
         пример, джойстика), вывода текста на экран, звуковых эффектов и
         т.д. и т.п.
              Конечно, если Вы делаете только первые шаги в машинных ко-
         дах, то у Вас нет еще такой библиотеки, но прочитав эту  книгу,
         Вы уже  можете покопаться  в машинном  коде некрупных фирменных
         программ. Там Вы найдете  множество открытий. В этом  Вам очень
         поможет   какая-либо   дисассемблирующая   программа,  например
         MONITOR 16/48. Для  Вас открыты и  другие книги "ИНФОРКОМа"  и,
         самое главное, наши выпуски "ZX-РЕВЮ".





                                  - 23 -

                    3. АРХИТЕКТУРА ПРОЦЕССОРА Z-80.

              Процессор Z-80 был  создан американской корпорацией  ZILOG
         и, как оказалось, явился  одним из самых удачных  процессоров в
         мире. Он  имеет 8-ми  разрядную шину  данных и  16-ти разрядную
         адресную шину.  Это означает,  что он  может обрабатывать целые
         числа (байты) от 0 до 255  (т.к. 2^8-1 = 255) и напрямую  обра-
         щаться к 65535 ячейкам памяти (т.к. 2^16-1=65535).
              В структуру процессора входят несколько регистров.  Именно
         с ними мы и работаем, программируя в машинном коде.  Рассматри-
         вайте  эти  регистры  как  ячейки внутренней памяти процессора.
         Если из ячеек постоянной  памяти компьютера (ПЗУ) можно  только
         считывать информацию, а при работе с оперативной памятью  (ОЗУ)
         информацию можно как записывать, так и считывать, то при работе
         с регистрами можно  не только записывать  в них информацию  или
         считывать ее, но и  выполнять еще большое количество  различных
         арифметических и логических операций над содержимым регистров.
              Ячейки оперативной памяти одинаковы между собой и различа-
         ются только  адресом. Регистры  процессора своеобразны  и имеют
         свои имена. Они обозначаются буквами латинского алфавита:
                F, A, B, C, D, E, H, L, SP, PC, IX, IY, I, R.

                  ┌───┐┌───┐  ┌───┐┌───┐  ┌───┐┌───┐
                  │ F ││ A │  │ B ││ C │  │ D ││ E │
                  └───┘└───┘  └─┬─┘└─┬─┘  └─┬─┘└─┬─┘
                    8    8      └──┬─┘      └──┬─┘
                                  8+8         8+8
                  ┌───┐┌───┐     ┌───┐       ┌───┐
                  │ H ││ L │     │ I │       │ R │
                  └─┬─┘└─┬─┘     └───┘       └───┘
                    └──┬─┘         8           8
                      8+8
                  ┌──┬──┐     ┌──┬──┐    ┌──┬──┐  ┌──┬──┐
                  │ I│X │     │ I│Y │    │ S│P │  │ P│C │
                  └──┴──┘     └──┴──┘    └──┴──┘  └──┴──┘
                    16          16         16        16
              Это основной набор регистров. Есть еще один дополнительный
         набор, его называют альтернативным, его мы и рассмотрим ниже.
                                  - 24 -

              Некоторые из этих регистров - восьмиразрядные (однобайт-
         ные) и могут содержать целые числа от 0 до 255. Это регистры F,
         A, B, C, D, E, H, L, I, R.
              Другие  -  шестнадцатиразрядные  (двухбайтные).  Они могут
         содержать целые числа от 0  до 65535. Это регистры SP,  PC, IX,
         IY.
              Некоторые однобайтные регистры могут объединяться в  двух-
         байтные регистровые пары BC, DE, HL. В этом случае о такой паре
         можно говорить как об отдельном шестнадцатиразрядном регистре.
              Процессор Z-80 является весьма асимметричным  процессором,
         т.е. каждый регистр обладает специфическими чертами,  делающими
         его не похожим на остальные, и различные регистры предназначены
         для выполнения различных функций.
              Рассмотрим регистры основного набора.

                            Регистр А - АККУМУЛЯТОР.
                            ~~~~~~~~~~~~~~~~~~~~~~~~
              Этот регистр называют аккумулятором, т.к. во многих случа-
         ях результат исполнения операции остается в нем. В этом  регис-
         тре выполняется наибольшее количество арифметических и логичес-
         ких  команд.  Это  основной  однобайтный регистр процессора. Во
         многих  командах  даже  не  указывается,  к какому регистру они
         относятся: предполагается, что они относятся к регистру А.

              Регистры B, C, D, E, H, L - РЕГИСТРЫ ОБЩЕГО НАЗНАЧЕНИЯ.
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Эти регистры довольно широко используются процессором  при
         выполнении различных команд. Их характерная особенность состоит
         в том, что они могут использоваться и как однобайтные одиночные
         регистры  и  как  двухбайтные  шестнадцатиразрядные регистровые
         пары: BC, DE, HL.
              В этом случае  наибольшее количество команд  имеет регистр
         HL. При работе с двухбайтными целыми числами он имеет такое  же
         важное значение, что и регистр А при работе с однобайтными.
              Все эти пары используются, как правило, для хранения адре-
         сов. При этом в регистре HL часто помещается адрес того  байта,
         с которым производится операция.
              К регистру DE подходит сокращение от слова DESTINATION
+                                  - 25 -

         (МЕСТО НАЗНАЧЕНИЯ). И действительно, во многих операциях,  свя-
         занных с перемещением чего-либо куда-либо, регистр HL  указыва-
         ет, откуда взять, а регистр DE - куда отправить.

              К  регистру  BC  можно  подобрать  сокращение BACK COUNTER
         (ОБРАТНЫЙ СЧЕТЧИК). В тех случаях, когда определенная  последо-
         вательность команд должна повториться  N раз, т.е. когда  орга-
         низуется цикл вычислений, в регистре BC хранится счетчик  этого
         цикла.
              При объединении одиночных регистров в пары, в первом  хра-
         нится старший  байт, а  во втором  - младший.  Итак, B,  D, H -
         старший, а C, E,  L - младший. Для  тех, кто немного знает  ан-
         глийский язык,  напоминанием будет  название регистра  HL. Сна-
         чала H - HIGH (СТАРШИЙ), а затем L - LOW (МЛАДШИЙ).

                 Регистр SP - УКАЗАТЕЛЬ СТЕКА (STACK POINTER).
                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              В тех случаях, когда необходимо на некоторое время освобо-
         дить какой-либо регистр (или регистры) и запомнить его содержи-
         мое впредь  до дальнейшего  использования, компьютер  может ис-
         пользовать в качестве  места временного хранения  данных особый
         участок оперативной памяти, называемый машинным стеком. Обрати-
         те внимание на слово "машинный". Бывают и другие стеки,  напри-
         мер  стек  калькулятора  или,  скажем,  пользовательский  стек,
         который Вы  создадите сами  для своих  собственных нужд,  но об
         этом речь еще впереди, а пока поговорим о машинном стеке.  Стек
         - это такая  форма организации памяти,  при которой загрузка  и
         выгрузка  данных  выполняется  по  принципу "последним пришел -
         первым уйдешь".
              После включения компьютера в сеть, машинный стек в нем ор-
         ганизуется  автоматически.  Его  создают  те процедуры, которые
         записаны в ПЗУ компьютера. Это и не удивительно, ведь он  нужен
         им для работы,  а работать им  приходится очень много,  хотя бы
         для того, чтобы компьютер  сразу после включения уже  мог пони-
         мать Ваши команды. Находится  машинный стек в верхних  областях
         памяти,  выше  адреса,  установленного  в  системной переменной
         RAMTOP, чтобы написанная Вами БЕЙСИК-программа не затерла и  не
         повредила его.  Но если  Вы работаете  с машинным  кодом, можно
+                                 - 26 -

         организовать стек и в  другом месте оперативной памяти,  причем
         почти в любом /1.
              Стек"растет" сверху вниз. Т.е. если вершина стека находит-
         ся по адресу 60000, то следующее число, помещенное на стек, бу-
         дет записано в ячейку 59999, а следующие за ним - в 59998.  При
         этом перемещается и его вершина.
              Вот здесь-то и нужен  регистр SP. В нем  всегда содержится
         адрес вершины  стека. При  помещении очередного  числа на стек,
         регистр SP автоматически уменьшает свое значение, а при  снятии
         числа со  стека -  увеличивает. Заслав  свой адрес  в указатель
         стека, Вы можете организовать  стек в другом месте  оперативной
         памяти.
              В принципе, в качестве временного места хранения  промежу-
         точных результатов вычислений можно использовать обычные методы
         адресации типа LD (NN),A, но при хранении данных на стеке  дос-
         туп к ним проще, понятнее, быстрее и экономичнее.

         ───────────────────────────────────────────────────────────────
         /1    Стек можно  организовать даже  в экранной  области, и не-
         которые фирмы этим пользуются. Программа организована так,  что
         картинка, которая загружается перед началом программы  содержит
         стек. После загрузки основного блока (блоков) машинного кода со
         стека снимаются данные,  которые обеспечивают нормальный  старт
         программы. Если  Вы удалили,  заменили   или изменили фирменную
         заставку, то программа работать не будет. Чтобы Вы визуально не
         видели на экране,  что в картинке  есть какие-то данные  в виде
         точек и полос, их можно спрятать за черным цветом PAPER экрана.
         Такая защита есть, например, в программе "NETHEREARTH".
              Другой  хитроумный  прием,  используемый  профессионалами,
         состоит во  временной организации  стека в  той области памяти,
         куда Вы  хотите быстро  перебросить большое  количество данных.
         Тогда вместо того, чтобы  перетаскивать блоки памяти из  одного
         места в другое,  их просто отправляют  на стек. Такая  операция
         происходит чрезвычайно быстро  и переброска картинки  из памяти
         на экран,  например, происходит  в 2 раза быстрее, чем при  ис-
         пользовании других, самых  быстрых команд процессора  (так, на-
         пример, в программе "STARION" этим приемом обеспечена необычай-
         ная гладкость и плавность мультипликации.)
+                                  - 27 -

              Еще одно назначение стека связано с использованием подпро-
         грамм. Так, при  изменении нормального порядка  исполнения про-
         граммы, (когда команды исполняются последовательно одна за дру-
         гой) и при переходе  на исполнение подпрограммы необходимо  за-
         помнить адрес возврата, чтобы потом продолжить вычисления с то-
         чки, находящейся после места вызова подпрограммы. Этот адрес (в
         виде двух байтов) и помещается на стек.  По окончании  исполне-
         ния подпрограммы по команде RET он снимается со стека и отправ-
         ляется в программный счетчик PC, что и обеспечивает возврат.
              Разумеется, если  во время  работы подпрограммы  Вы что-то
         будете помещать на  стек, то при  возврате программа не  найдет
         нужного адреса, т.к.  изменится содержимое вершины  стека. Зна-
         чит, если  при работе  в подпрограмме  Вам необходимо поместить
         сколько-то чисел на  стек, то столько  же надо оттуда  снять до
         того, как встретится команда RET.

              РЕГИСТР PC - ПРОГРАММНЫЙ СЧЕТЧИК (PROGRAM COUNTER).
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

              Этот регистр также, как и регистр SP -  шестнадцатиразряд-
         ный. Он служит для хранения адреса той операции, которая должна
         выполняться следующей. Когда  процессор начинает выполнять  эту
         операцию, программный счетчик  получает приращение на  единицу,
         если команда однобайтная, на два - если двухбайтная и т.д.  Та-
         ким образом, по окончании этой операции процессор знает,  какую
         операцию выполнять следующей. Так выдерживается  последователь-
         ное исполнение программы.
              Если в программе имеется переход в иное место  (аналогично
         GO  TO   БЕЙСИКа)  или  вызов  подпрограммы  (аналогично GO SUB
         БЕЙСИКа), то  именно программный  счетчик и  обеспечивает такой
         скачок. В него засылается  адрес, в который должен  быть выпол-
         нен  переход  и  процессор  теперь  знает,  откуда   продолжать
         вычисления.

                        РЕГИСТР F - ФЛАГОВЫЙ РЕГИСТР.
                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Этот регистр отличается от всех остальных и играет  весьма
         своеобразную роль. Его не рассматривают как отдельный  регистр,
+                                 - 28 -

         хранящий восьмиразрядное число,  а скорее, как восемь отдельных
         флаговых битов.  Каждый флаг  может быть  установлен или  снят,
         т.е. соответствующий бит включен (равен 1) или выключен  (равен
         0). Ниже показана структура флагового регистра.
                        ┌───┬───┬───┬───┬───┬───┬───┬───┐
                        │ S │ Z │ - │ H │ - │O/P│ N │C  │
                        ├───┼───┼───┼───┼───┼───┼───┼───┤
                        │ 7 │ 6 │ 5 │ 4 │ 3 │ 2 │ 1 │0  │
                        └───┴───┴───┴───┴───┴───┴───┴───┘
         Он содержит следующие флаги:
                         Бит 0 - флаг переноса С;
                         Бит 1 - флаг сложения/вычитания N;
                         Бит 3 - не используется;
                         Бит 4 - флаг полупереноса H;
                         Бит 5 - не используется;
                         Бит 6 - флаг нуля Z;
                         Бит 7 - флаг знака S.
              Флаги C, P/O, Z, S - активно используются в различных  ко-
         мандах. Мы рассмотрим работу с этими флагами в разделе 5.9.5.
              Флаги N и H  программистом не используются. Они  участвуют
         при выполнении  операций с  десятиричными числами,  выраженными
         двоичной формой. Об этом мы поговорим в следующей главе.

                      РЕГИСТРЫ IX, IY - ИНДЕКСНЫЕ РЕГИСТРЫ.
                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Это две  регистровые пары,  т.е. это  шестнадцатиразрядные
         регистры. Используются они, как правило, для запоминания  адре-