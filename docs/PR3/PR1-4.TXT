
         старшими битами, установленными вышеописанным образом.
              Скорее всего, это справедливо и для других версий  компью-
         теров с  разделением поля  памяти на  16К и  32К (см. "ZX-РЕВЮ"
         N1, 1991г.). По крайней мере, при записи в регистр "I" чисел из
         запрещенного  интервала  на  компьютерах  версий "НОВОСИБИРСК",
         "БАЛТИКА",  "ЛЕНИНГРАД"  развала  картинки  не наблюдалось. Но,
         по-видимому, все-таки лучше придерживаться указанных  ограниче-
         ний, если Вы хотите, чтобы  ваши программы могли работать и  на
         других версиях  "СПЕКТРУМА", особенно,  если Вы  разрабатываете
         коммерческое программное обеспечение.

              "IM 2".
              ~~~~~~~~
              Путем установки "IM  2" Вы можете  использовать прерывания
         для Ваших собственных целей. Тут уже все зависит только от Вас.
         С помощью "IM  2"  возможно менять  вектор прерываний как  про-
         граммно, так и аппаратно.
              Режим "IM  2" сложен.  При получении  прерывания по  линии
         "INT" процессор запоминает адрес следующей команды программы на
         машинном  стеке,  затем  просматривает  ячейку, указанную шиной
         данных плюс  256, умноженное на содержимое регистра "I"  и  пе-
         редает управление  к адресу,  содержащемуся в  этой ячейке плюс
         (256, умноженное на  содержимое следующей ячейки).   Вообще-то,
         считается дурным тоном иметь бит ноль на шине данных  активиро-
         ванным в  качестве указателя  в режиме  "IM 2",  т.к. указатель
         всегда будет стартовать с адреса, пронумерованного четным  чис-
         лом, но, к сожалению, в "СПЕКТРУМЕ" нет выбора.



+                                 - 112 -

                                  ПРИМЕР 1.
              В регистре "I" содержится число 10 (0AH), а на шине данных
         выставлено число 255 (0FFH). При этом :
                               10*256=2560
                             2560+255=2815.
              Этот адрес находится в  ПЗУ "СПЕКТРУМА", поэтому точка,  к
         которой будет сделан  переход, возьмется из  содержимого адреса
         2815+(256, умноженное на число  по адресу 2816). В  ячейке 2815
         содержится 34, а в 2816 - 128. В этом можно убедиться с помощью
         оператора "PEEK". Таким образом, адрес перехода равен :
                          34+(256*128)=32802.

                                 ПРИМЕР 2.
              Регистр "I" содержит 200, шина данных 255.
                             200*256=51200
                           51200+255=51455.
              Переход будет  сделан по  адресу, который  Вы поместите  в
         ячейки 51455 и 51456.
              Гораздо проще все  выглядит в шестнадцатиричном  виде. Тут
         уже не надо вычислять  адрес, откуда брать точку  для перехода.
         Просто шина данных формирует младший байт адреса, а регистр "I"
         - старший байт. По этому адресу берется точка перехода на  про-
         грамму обработки  прерываний, где  опять-таки данный  адрес со-
         держит младший байт, а  следующий за ним - старший байт  адреса
         программы.
              Все  это  можно  представить,  как  косвенную адресацию по
         содержимому регистровой пары,  причем регистровую пару  на этот
         раз составляет  шина данных  и регистр  "I".   Это  своего рода
         команда CALL (I+ШД).  Но, т.к. такой  команды не существует,  и
         она не  может разместить  собственный адрес  возврата, то адрес
         после  последней  выполненной  команды  кладется процессором на
         машинный стек, и к нему будет осуществлен возврат после  выпол-
         нения программы обработки прерываний.
              Как Вы  видите, программное  изменение вектора  прерываний
         задается с  помощью перезаписи  регистра "I",   а аппаратное  -
         благодаря шине данных.
              Обычно в момент прерывания на шине данных содержится - 255
         ( 0FFH ), но если Вы подключите внешнее устройство,  изменяющее
+                                 - 113 -

         в этот момент состояние шины данных, то Вы можете, не переписы-
         вая регистр  "I", менять  в небольших  пределах адрес программы
         обработки "IM 2". Порой  такое необходимо при подключении  нес-
         кольких периферийных устройств, чтобы процессор знал, какое  из
         них ему  обслуживать на  данный момент.  Вдобавок ко  всему, Вы
         можете еще перехватывать  управление линией "INT"  для аппарат-
         ного включения или  выключения прерываний в  необходимый момент
         времени. Именно так и делает контроллер дисковода.
              С "IM 2" есть  одна проблема при использовании  прерываний
         при подключенном контроллере дисковода или микродрайва. Дело  в
         том, что при  переключении на теневое  ПЗУ контроллера эти  ПЗУ
         меняют указатель регистра "I".  Поэтому, по всей видимости,  до
         включения "IM 2" необходима проверка на то, какое ПЗУ подключе-
         но на данный момент. Хорошо еще, что в распространенной  версии
         контроллера  "TR-  DOS"  предусмотрено,  что Вы можете изменить
         указатель в регистре "I".
              Дополнительная проблема возникает при использовании указа-
         телей из  ПЗУ при  создании коммерческого  матобеспечения, т.к.
         любые изменения и дополнения в ПЗУ могут сделать ваше  матобес-
         печение неработающим.
              При размещении в регистре "I" чисел от 0 до 63 (03FH), все
         адреса точек  переходов по  прерыванию "IM  2" лежат  в области
         ПЗУ.  Список  указателей  для  фирменной версии ПЗУ "СПЕКТРУМА"
         приведен в "Справочнике" (ч.III данной книги).
              Типичное использование "IM 2" в играх - управление  спрай-
         тами и звуковым сопровождением программы. Зная, с какой  часто-
         той генерируются прерывания,  легко расчитать скорость  переме-
         щения спрайта или задать ритм мелодии. Они будут независимы  от
         любых других операций внутри  программы. Еще раз напомним,  что
         прерывания генерируются с частотой 50 раз в секунду.
              Есть несколько правил составления программ обработки  пре-
         рываний "IM 2".
              1. Перед выполнением программы необходимо запретить преры-
         вания с помощью команды "DI". Причина состоит в том, чтобы  га-
         рантировать, что  программа не  зациклит петлю,  если процедура
         обработки  прерываний  выполняется  продолжительнее,  чем пауза
         между двумя прерываниями.
              2. После выполнения программы обработки "IM 2"  подключите
+                                 - 114 -

         прерывания  командой  "EI".  Для  возврата в основную программу
         используйте команду "RETI".
              3. Когда бы ни использовались программы прерываний,  очень
         важно, чтобы  все регистры  микропроцессора, используемые  про-
         граммой обработки прерывания, сохранялись на входе и восстанав-
         ливались перед возвращением.
              4. Не должно быть попыток пересылки данных через  регистры
         в программу обработки прерываний или из нее.
              5. Помните, что если Вы не используете "RST 38H" в  преры-
         вающей программе, то Вам  необходимо сбрасывать режим "IM  2" и
         включать "IM 1" до возвращения в БЕЙСИК.
              И еще  совет. Если  Вам необходимо,  чтобы таймер  системы
         обновлялся,  а  клавиатура  сканировалась,  если,  например, Вы
         работаете в БЕЙСИКЕ со включенным прерыванием второго типа,  то
         в конце вашей программы обработки "IM 2" восстановите  содержи-
         мое регистров (см. П.3  правил) и сделайте переход  "JP 0038H".
         Программа "RST38H" сама подключит прерывания и сделает  возврат
         в  основную  программу.  Это   позволит  Вам  сократить   время
         обработки прерывания.
              Вам в своей работе надо также учитывать то обстоятельство,
         что Есть операторы БЕЙСИКА, которые на время своего выполнения
         запрещают прерывания. Это операторы : LOAD, SAVE, BEEP.
              Для  полноты  картины  нам  следует  также  ознакомиться с
         примерами  составления  программ  в машинных кодах,  использую-
         щих  прерывания  процессора   в  режиме  IM 2.  Желающих разоб-
         рать эти примеры мы отсылаем ко второй части данной книги.

                            5. 19  ПРОЧИЕ КОМАНДЫ
                            ~~~~~~~~~~~~~~~~~~~~~~
              Мы рассмотрели почти все команды процессора Z-80, но есть
         еще несколько команд, не вошедших ни в какие группы. Разберем
         эти команды по очереди.
              Команда NOP.
              ~~~~~~~~~~~~
              Ее код - 0. Это  команда "НЕТ ОПЕРАЦИИ". По ней  процессор
         ничего  не  делает,  а  выдерживает  паузу продолжительностью 4
         такта.

+                                 - 115 -

              Команда CPL.
              ~~~~~~~~~~~~
              Ее код - 2F. Она относится к регистру А и инвертирует каж-
         дый бит на противоположный. В результате получается как бы  до-
         полнение содержимого аккумулятора до 255 (в абсолютной двоичной
         арифметике).
              Команда NEG.
              ~~~~~~~~~~~~
              Ее код - ED 44. Команда работает в дополнительной двоичной
         арифметике и помещает в  регистр А число, равное  по абсолютной
         величине тому, которое там  было, но с противоположным  знаком.
         Влияет на все основные флаги.
              Команда SCF.
              ~~~~~~~~~~~~
              Код - 37. Команда включает флаг переноса (флаг С флагового
         регистра F).
              Команда CCF.
              ~~~~~~~~~~~~
              Код - 3F. Команда переключает флаг переноса на  противопо-
         ложный.
              Команда HALT.
              ~~~~~~~~~~~~~
              Код - 76. Эта  команда вызывает остановку исполнения  про-
         граммы  и  последовательно  исполняет  команду  NOP до тех пор,
         пока не поступит маскируемое прерывание. Команда  используется,
         например, при применении оператора БЕЙСИКа PAUSE.
              Интересная особенность:  если Вы  предварительно отключите
         маскируемые прерывания  командой DI  (см. выше),  то применение
         команды HALT однозначно приведет к "зависанию" программы,  т.к.
         прерывания процессор не дождется.
              Команда DAA.
              ~~~~~~~~~~~~
              Код - 27. По этой команде перестраивается содержимое акку-
         мулятора. Оно переводится из двоичной формы в десятиричную, вы-
         раженную двоичной записью (BCD-арифметику).



+                                 - 116 -

                              6.  ЗАКЛЮЧЕНИЕ.

              На этом мы заканчиваем "Первые шаги в машинном коде".
              Достаточно ли того, что Вы изучили, для того, чтобы начать
         программировать в машинных кодах или на языке АССЕМБЛЕРа?
              По-видимому, нет. Хотя  все необходимые сведения  мы дали.
         Мы старались  сделать изложение  доступным и  понятным даже для
         тех, кто только-только начал свое общение с компьютером, но Вам
         необходимы еще многие часы практики. Мы предлагаем Вам  следую-
         щий подход в дальнейшей работе.
              1. Во второй части этой книги "Практикум по  программирова
         нию  в  машинных  кодах"  Вы  найдете  массу полезных примеров,
         разбор  которых  поможет  Вам  набраться  опыта, а практические
         рекомендации помогут сэкономить дни самостоятельной работы.
              2. Приобретите какую-либо программу ДИСАССЕМБЛЕР  (конечно
         с инструкцией) и с  ее помощью попробуйте просмотреть  машинный
         код фирменных игровых программ. Анализируйте увиденное. Вносите
         изменения и  смотрите, что  из этого  получается. Это  спорт, и
         очень захватывающий. Вы сами не заметите, как начнет  приходить
         опыт.
              3.  Приобретите  программу  АССЕМБЛЕР  с  инструкцией.  Вы
         увидите, что АССЕМБЛЕР имеет немало возможностей для  упрощения
         программирования  в  кодах.  Он  имеет  несколько своих команд,
         называемых директивами АССЕМБЛЕРа и они помогут Вам в составле-
         нии хорошо читаемых, удобных программ.
              После  этого  Вы  сможете  начать  писать свои процедуры и
         программы в машинных кодах,  но не старайтесь как  можно больше
         сделать сами.  Наоборот, максимум  процедур старайтесь  взять в
         готовом  виде  из  других  программ,  конечно внося необходимые
         изменения.  Ведь  изобраетая  новый  автомобиль, конструктор не
         изобретает к нему новые болты и гайки.
              На всех этапах работы Вам поможет также часть третья нашей
         книги - "Справочник по программированию в машинных кодах Z-80".
