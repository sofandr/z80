
                            LD HL,ADDR
                            BIT N,(HL)
                            JR Z,ADDR1
              158. Переход, если прерывания отключены.
                            LD A,I        - по этой команде состояние
                                            триггера прерываний
                                            передается во флаг четности
                            JP PO,ADDR
              По образу конструкций перехода по нулю строятся  аналогич-
         ные конструкции перехода, если в аккумуляторе, регистре, адресе
         и т.п. не ноль.
              159. Переход, если содержимое аккумулятора равно заданному
         числу.
                            CP N
                            JR Z,ADDR
              160. Переход, если в регистре 1.
                            DEC reg
                            JR Z,ADDR
              Эту же  процедуру можно  применять и  для проверки  ячейки
         памяти с адресацией через HL или через индексный регистр.
              161. Переход, если в регистре FF.
                            INC reg
                            JR Z,ADDR
              Эту же  процедуру можно  применять и  для проверки  ячейки
         памяти с адресацией через HL или через индексный регистр.
+                                  - 150 -

              162. Переход, если содержимое аккумулятора равно  содержи-
         мому регистра.
                            CP reg
                            JR Z,ADDR
              163. Переход, если содержимое аккумулятора равно содержи-
         мому заданного адреса.
                            LD HL,ADDR
                            CP (HL)
                            JR Z,ADDR1
              164. Переход, если в регистровой паре содержится число NN.
                            LD HL,NN
                            AND A
                            SBC HL,rp
                            JR Z,ADDR
              165. Переход, если в адресе, на который указывает HL,  со-
         держится число, равное содержимому регистра.
                            AND A
                            SBC HL,rp
                            JR Z,ADDR
              166. Переход, если  в указателе стека  содержится заданное
         число.
                            LD HL,NN
                            AND A
                            SBC HL,SP
                            JR Z,ADDR
              167. Переход, если содержимое указателя стека равно содер-
         жимому регистра HL.
                            AND A
                            SBC HL,SP
                            JR Z,ADDR
              168. Переход,  если содержимое  индексного регистра  равно
         двухбайтному числу.
                            PUSH xy
                            POP rp
                            LD HL,NN
                            AND A
                            SBC HL,rp
                            JR Z,ADDR
+                                  - 151 -

              Аналогично строятся  конструкции перехода  по условию  "не
         равно".
              169. Переход, если содержимое аккумулятора положительное.
                            AND A
                            JP P,ADDR
              170. Переход, если содержимое регистровой пары положитель-
         ное.
                            INC rph
                            DEC rph
                            JP P,ADDR
              171. Переход, если содержимое регистра положительное.
                            INC reg
                            DEC reg
                            JP P,ADDR
              172. Переход, если содержимое адреса положительное.
                            LD HL,ADDR
                            INC (HL)
                            DEC (HL)
                            JP P,ADDR1
               ИЛИ
                            LD A,(ADDR)
                            AND A
                            JP P,ADDR
              173. Переход, если содержимое индексного регистра положи-
         тельное.
                            PUSH xy
                            POP AF
                            AND A
                            JP P,ADDR
              174.  Переход,  если  двухбайтное  число,  находящееся   в
         заданном адресе положительное.
                            LD A,(ADDR+1) - достаточно проверить старший
                            AND A           байт
                            JP P,ADDR1
              ИЛИ
                            LD HL,ADDR+1
                            BIT 7,HL      - информация о знаке
                            JR Z,ADDR       содержится в старшем бите
+                                  - 152 -

              Аналогичными конструкциями выполняются и переходы по отри-
         цательному числу.
              175. Переход, если содержимое аккумулятора больше, чем за-
         данное число (без знака).  Особый случай здесь возникает,  если
         операнды равны. В этом случае переход не совершается.
                            CP N
                            JR C,END
                            JR NZ,ADDR
                  END:      NOP
              176. Переход, если содержимое аккумулятора больше содержи-
         мого регистра (без знака).
                            CP reg
                            JR C,END
                            JR NZ,ADDR
                       END: NOP
              ИЛИ
                            LD reg1,A
                            LD A,reg
                            CP reg1
                            JR NC,ADDR
              ИЛИ
                            INC reg
                            CP reg
                            JR NC,ADDR
              177. Переход, если содержимое аккумулятора больше содержи-
         мого заданного адреса (без знака).
                            LD HL,ADDR
                            CP (HL)
                            JR C,END
                            JR NZ,ADDR1
                      END:  NOP
              ИЛИ
                            LD reg,A
                            LD A,(ADDR)
                            CP reg
                            JR C,ADDR1


+                                 - 153 -

              178. Переход, если содержимое регистра HL больше содержи-
         мого регистровой пары (без знака).
                            SCF
                            SBC HL,rp
                            JR NC,ADDR
              179.  Переход,  если  содержимое  HL  больше, чем заданное
         16-битное число (без учета знака).
                            LD rp,-NN-1
                            ADD HL,rp
                            JR C,ADDR
              180. Переход, если содержимое указателя стека больше, чем
         содержимое HL (без знака).
                            AND A
                            SBC HL,SP
                            JR C,ADDR
              181. Переход, если содержимое указателя стека больше за-
         данного 16-битного числа (без знака).
                            LD HL,-NN-1
                            ADD HL,SP
                            JR C,ADDR
              182. Переход, если содержимое индексного регистра больше
         заданного 16-битного числа (без знака).
                            LD rp,-NN-1
                            ADD xy,rp
                            JR C,ADDR
              183. Переход, если содержимое индексного регистра больше
         содержимого HL (без знака).
                            PUSH xy
                            POP rp
                            AND A
                            SBC HL,rp
                            JR C,ADDR
              184. Переход, если содержимое аккумулятора не больше
         заданного числа (без знака).
                            CP N          - сравнение
                            JR C,ADDR     - переход, если "меньше"
                            JR Z,ADDR     - переход, если "равно"

+                                  - 154 -

              Другой вариант:
                            CP N+1
                            JR C,ADDR     - переход, если "НЕ МЕНЬШЕ"
              185. Переход, если содержимое аккумулятора не больше со-
         держимого заданного регистра (без знака).
                            CP reg
                            JR C,ADDR
                            JR Z,ADDR
              ИЛИ
                            LD reg1,A     - запомнили содержимое ак-ра
                            LD A,reg      - взяли содержимое регистра
                            CP reg1       - сравнение
                            JR NC,ADDR    - переход, если "не больше"
              ИЛИ
                            INC reg
                            CP reg
                            JR C,ADDR
              186. Переход, если содержимое аккумулятора не больше со-
         держимого заданного адреса (без учета знака).
                            LD HL,ADDR
                            CP (HL)
                            JR C,ADDR
                            JR Z,ADDR
              ИЛИ
                            LD reg,A
                            LD A,(ADDR)
                            CP reg
                            JR NC,ADDR
              187. Переход, если содержимое HL не больше, чем содержимое
         заданной регистровой пары (без знака).
                            SCF
                            SBC HL,rp
                            JR C,ADDR
              188. Переход, если содержимое  HL не больше, чем  заданное
         число двойной длины (без учета знака).
                            LD rp, -NN-1
                            ADD HL,rp
                            JR NC,ADDR
+                                  - 155 -

              189. Переход, если  содержимое указателя стека  не больше,
         чем содержимое регистра HL (без учета знака).
                            AND A
                            SBC HL,SP
                            JR NC,ADDR
              190. Переход, если  содержимое указателя стека  не больше,
         чем заданное двухбайтное число (без знака).
                            LD HL,-NN-1
                            ADD HL,SP
                            JR NC,ADDR
              191.  Переход,  если  содержимое  индексного  регистра  не
         больше, чем заданное двухбайтное число.
                            LD rp,-NN-1
                            ADD xy,rp
                            JR NC,ADDR
              192.  Переход,  если  содержимое  индексного  регистра  не
         больше, чем содержимое регистра HL (без знака).
                            PUSH xy
                            POP rp
                            AND A
                            SBC HL,rp
                            JR NC,ADDR
              193.  Переход,  если  содержимое  аккумулятора меньше, чем
         заданное число (без учета знака).
                            CP N
                            JR C,ADDR
              194.   Переход,   если   содержимое   аккумулятора  меньше
         содержимого регистра (без знака).
                            CP reg
                            JR C,ADDR
              195.   Переход,   если   содержимое   аккумулятора  меньше
         содержимого заданного адреса (без знака).
                            LD HL,ADDR
                            CP (HL)
                            JR C,ADDR



+                                  - 156 -
              196. Переход, если содержимое регистра HL меньше  содержи-
         мого заданного регистра (без учета знака).
                            AND A
                            SBC HL,rp
                            JR C,ADDR
              197. Переход, если содержимое регистра HL меньше заданного
         двухбайтного числа (без учета знака).
                            LD rp,-NN
                            ADD HL,rp
                            JR NC,ADDR
              198. Переход, если указатель стека меньше HL (без знака).
                            SCF
                            SBC HL,SP
                            JR NC,ADDR
              199.  Переход,  если  указатель  стека меньше двухбайтного
         числа (без учета знака).
                            LD HL,-NN
                            ADD HL,SP
                            JR NC,ADDR
              200. Переход, если  содержимое индексного регистра  меньше
         заданного двухбайтного числа (без учета знака).
                            LD rp,-NN
                            ADD xy,rp
                            JR NC,ADDR
              201. Переход, если  содержимое индексного регистра  меньше
         содержимого регистра HL (без знака).
                            PUSH xy
                            POP rp
                            SCF
                            SBC HL,rp
                            JR NC,ADDR
              202.  Переход,  если  содержимое  аккумулятора  не  меньше
         заданного числа (без знака).
                            CP N
                            JR NC,ADDR
              203. Переход, если аккумулятор не меньше заданного  регис-
         тра (без знака).
                            CP reg
                            JR NC,ADDR
+                                  - 157 -

              204. Переход, если  аккумулятор не меньше  содержимого за-
         данного адреса (без знака).
                            LD HL,ADDR
                            CP (HL)
                            JR NC,ADDR1
              205. Переход, если содержимое регистра HL не меньше содер-
         жимого заданной регистровой пары (без учета знака).
                            AND A
                            SBC HL,rp
                            JR NC,ADDR
              206.  Переход,  если  содержимое  регистра  HL  не  меньше
         заданного двухбайтного числа (без знака).
                            LD rp,-NN
                            ADD HL,rp
                            JR C,ADDR
              207.  Переход,  если  указатель  стека  не  меньше HL (без
         знака).
                            SCF
                            SBC HL,SP
                            JR C,ADDR
              208. Переход, если указатель стека не меньше, чем заданное
         двухбайтное число (без учета знака).
                            LD HL,-NN
                            ADD HL,SP
                            JR C,ADDR
              209.  Переход,  если  содержимое  индексного  регистра  не
         меньше, чем заданное двухбайтное число (без знака).
                            LD rp,-NN
                            ADD xy,rp
                            JR C,ADDR
              210. Переход, если содержимое индексного регистра не мень-
         ше, чем содержимое HL (без знака).
                            PUSH xy
                            POP rp
                            SCF
                            SBC HL,rp
                            JR C,ADDR

+                                  - 158 -

                   2.5. КОНСТРУКЦИИ ВЫЗОВА ПОДПРОГРАММ

                         2.5.1. Безусловный вызов.
                         ~~~~~~~~~~~~~~~~~~~~~~~~~
              Дополнительно к прямым командам вызова подпрограмм, реали-
         зованным в системе команд процессора, программисты часто приме-
         няют непрямой вызов подпрограмм с помощью промежуточной вызыва-
         ющей программы.  В этом  случае вызов  выполняется вызовом этой
         промежуточной программы,  например, CALL  TRANS. Вместо  TRANS,
         конечно стоит ее двухбайтный адрес. Далее процедура TRANS пере-
         дает управление  вызываемой программе.  Это выполняется  уже не
         через CALL, а через JP. Возврат выполняется из вызываемой  под-
         программы, в конце которой стоит команда RET.
              Типовые конструкции процедуры TRANS, в зависимости от  то-
         го, как передается адрес вызываемой программы, приведены ниже.

              211. Адрес вызова передается через HL.
                   TRANS:   JP (HL)
              212. Адрес - в индексном регистре.
                   TRANS:   JP (xy)
              213. Адрес - в DE.
                   TRANS:   EX DE,HL
                            JP (HL)
              214. Адрес - в BC.
                   TRANS:   LD H,B
                            LD L,C
                            JP (HL)
                   ИЛИ
                            PUSH BC
                            RET
              Второй вариант работает медленнее, зато не портит HL.
              215. Адрес в адресах ADDR и ADDR+1.
                   TRANS:   LD HL,(ADDR)
                            JP (HL)

                             2.5.2. Условный вызов.
                             ~~~~~~~~~~~~~~~~~~~~~~
              Команды вызова подпрограмм по условию могут быть расширены
+                                   - 159 -

         так  же,  как  мы  это  сделали с командами условного перехода.
         Единственное  изменение,  которое  надо  сделать - это поменять
         команды перехода на команды вызова. Например, вместо JR NZ,ADDR
         надо поставить CALL NZ,ADDR или вместо JP P,ADDR - CALL P,ADDR.

                          2.6. КОНСТРУКЦИИ ВОЗВРАТА 

                         2.6.1. Безусловный возврат.
                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Инструкция RET  автоматически выполняет  переход в  адрес,
         который находится на вершине стека. Если же Ваш адрес  возврата
         находится где-либо в другом месте (например в регистровой  паре
         или, скажем в двух ячейках памяти), то передать туда управление
         можно исполнением перехода с косвенной адресацией.

                         2.6.2. Возврат по условию.
                         ~~~~~~~~~~~~~~~~~~~~~~~~~~
              Возврат  по  условию  для  Z-80 выполняется конструкциями,
         аналогичными  конструкциям  условного  перехода.  Надо   только
         заменить мнемонику JR или JP на RET и не давать адрес перехода.

              Например,     RET NC    вместо   JP NC,NN
                            RET N     вместо   JP N,NN


                        2.6.3. Возврат со смещением.
                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Возможен случай, когда Вам надо выполнить возврат не точно
         по адресу, находящемуся на  вершине стека, а несколько  отступя
         от него, например, чтобы пропустить какие-либо данные, парамет-
         ры, списки и т.п. неисполнимые вещи.
              POP DE       адрес возврата помещается в DE
              LD HL,NN     в HL загружается величина смещения
              ADD HL,DE    вычисляется новый адрес возврата
              JP (HL)      переход по рассчитанному адресу

              Возможен вариант, когда Вы не хотите возвращаться по адре-
         су, содержащемуся  на вершине  стека, а  планируете переход  по
+                                  - 160 -

         другому адресу, скажем NN. Тогда можете действовать так:

              LD HL,NN     загрузка в HL нового адреса возврата
              EX HL,(SP)   обмен между HL и указателем стека. Теперь на
                           стеке содержится новый адрес возврат.

                     2.6.4. Возврат после прерывания.
                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Поскольку  обычно  работа  процедуры  обработки прерываний
         начинается с  того, что  запоминается на  стеке содержимое всех
         регистров, то и возврат после прерывания должен производиться с
         восстановлением этих  регистров, причем  порядок восстановления
         строго противоположен порядку сохранения. Например:

              ВХОД В ПРЕРЫВАНИЕ  ВЫХОД ИЗ ПРЕРЫВАНИЯ
                  PUSH AF          POP IY
                  PUSH BC          POP IX
                  PUSH DE          POP HL
                  PUSH HL          POP DE
                  PUSH IX          POP BC
                  PUSH IY          POP AF
                                   EI      разрешение  прерывания
                                   RETI    возврат


                        2.7. ПРОЧИЕ КОНСТРУКЦИИ

                             2.7.1. Пауза.
                             ~~~~~~~~~~~~~
              Процессор  имеет  команду  NOP,  которая ничего не делает,
         кроме как увеличивает на единицу содержимое программного  счет-
         чика (регистр PC).
              Того же результата можно добиться и другим путем. Вот спи-
         сок команд, которые тоже не выполняют никакие действия:
                 LD A,A       LD B,B       LD C,C       LD D,D
                 LD E,E       LD H,H       LD L,L


+                                  - 161 -

                        2.7.2. Работа со стеком.
                        ~~~~~~~~~~~~~~~~~~~~~~~~
              216. Сохранение на стеке одиночного регистра.
         PUSH reg           PUSH rp       сохранение регистровой пары
         ~~~~~~~~           INC SP        отбрасывание младшего байта
              217. Сохранение на стеке содержимого ячейки памяти.
         PUSH (ADDR)        LD A,(ADDR)   поместить в аккумулятор
         ~~~~~~~~~~~                      содержимое ячейки памяти
                            PUSH AF       сохранение содержимого пары AF
                            INC SP        отбросить содержимое флагового
                                          регистра
              218. Сохранение  на стеке  содержимого двух  идущих подряд
         ячеек памяти ADDR, ADDR+1.
                            LD HL,(ADDR)  содержимое заданного адреса
                                          помещается в регистр HL
                            PUSH HL       сохранение на стеке
              219. Сохранение на стеке состояния триггера прерываний IFF
                            LD A,I        после такой операции состояние
                                          триггера прерываний заносится
                                          во флаг Р/О микропроцессора
                            PUSH AF       сохранение флагового регистра
              220. Вызов со  стека содержимого одиночного  регистра (при
         условии, что он был сохранен там так, как указано в п.217).
                            DEC SP        указатель стека переводится на
                                          одну позицию вверх
                            POP rp        вызов содержимого стека в
                                          регистровую пару (содержимое
                                          младшего байта пары остается
                                          неопределенным)
              221. Вызов со стека содержимого одной ячейки памяти.
                            DEC SP
                            POP AF
                            LD (ADDR),A   в результате работы этой
                                          конструкции непредсказуемо
                                          изменение флагов регистра F
              222. Вызов со стека содержимого двух ячеек памяти.
                            POP HL
                            LD (ADDR),HL
+                                  - 161 -

              223. Восстановление режима прерываний таким, каким он  был
         до сохранения на стеке.
                            POP AF        восстановление флагового
                                          регистра
                            JP PE,ON      переход на включение
                            DI            запрещение прерываний
                            JR EXIT       переход на "выход"
                  ON:       EI            разрешение прерываний
                  EXIT:     NOP            выход на процедуры


              2.7.3. Конструкции десятиричной арифметики в двоичном
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                           выражении (BCD-арифметики).
                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~
              224. Проверка на то, что в аккумуляторе содержится  полно-
         ценное десятиричное число.
                            LD reg,A      исполнение копии аккумулятора
                            ADD A,0
                            DAA           перевод содержимого
                                          аккумулятора в BCD-арифметику
                            CMP reg       аккумулятор изменился?
                            JR NZ,NN      если изменился, то в нем было
                                          не десятиричное число и
                                          выполняется переход на
                                          заданный адрес NN
              225. Десятиричное приращение аккумулятора.
                            ADD A,1
                            DAA
              226. Десятиричное уменьшение аккумулятора.
                            SUB A,1
                            DAA
              Можно применять и такую конструкцию:
                            ADD A,99
                            DAA



+                                  - 162 -

                          2.7.4. Работа с таблицами.
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~
              227. Таблица  однобайтных величин.  В регистровой  паре HL
         содержится базовый адрес таблицы, а в аккумуляторе - порядковый
         номер элемента в этой таблице. Требуется поместить в  аккумуля-
         тор содержимое данного элемента.
                            LD E,A
                            LD D,0        аккумулятор конвертируется в
                                          16-битный индекс
                            ADD HL,DE     определен адрес элемента
                            LD A,(HL)     помещаем заданный элемент в A
              Эта процедура обычно  используется, когда надо  произвести
         какую-либо перекодировку данных.
              228. Таблица двухбайтных элементов. Базовый адрес находится
         В HL. В  аккумуляторе - порядковый  номер элемента.   Требуется
         найти этот элемент и поместить его в регистровую пару HL.
                            EX DE,HL      базовый адрес переносится в DE
                            LD L,A
                            LD H,0        преобразование индекса в
                                          2-байтный
                            ADD HL,HL     удвоение индекса (необходимо
                                          потому, что в таблице
                                          двухбайтные числа и адрес
                                          элемента относительно начала
                                          таблицы вдвое больше номера
                                          элемента)
                            ADD HL,DE     расчет адреса элемента
                            LD E,(HL)     взять младший байт
                            INC HL        перейти к старшему байту
                                          таблицы
                            LD D,(HL)     взять старший байт
                            EX DE,HL      передать результат в HL

              Примечание:  здесь  удвоение  применялось  инструкцией ADD
         HL,HL, в то время как можно было бы сразу дать ADD A,A. Дело  в
         том, что ADD A,A работает в дополнительной двоичной арифметике,
         и потому результат будет верен только для байтов от 0 до 127, а
         ADD HL,HL позволяет использовать любое однобайтное число.
+                                  - 163 -

                            3.  ДИРЕКТИВЫ  АССЕМБЛЕРА

              Одним  из  важнейших  элементов  этой части книги являются
         примеры  программ  в  машинных  кодах  и на языке АССЕМБЛЕРа. В
         распечатках  этих   программ  нам   придется  употреблять   так
         называемые  ДИРЕКТИВЫ  АССЕМБЛЕРа  и  сейчас,  наверное,  самое
         удобное время для того, чтобы дать представление о том, что это
         такое.
              Мы рассмотрим следующие  директивы: ORG, EQU,  DEFB, DEFW,
         DEFM и END, но прежде  чем начать их рассмотрение, надо  твердо
         для себя понять:
              1. Директивы АССЕМБЛЕРа  не являются командами  процессора
         Z80 и в этом смысле отношения к машинному коду Z80 не имеют.
              2. АССЕМБЛЕР - это программа, которая переводит  (трансли-
         рует) текст, написанный Вами  в виде мнемоник в  объектный код,
         являющийся машинным. И эти директивы АССЕМБЛЕРа - это некоторые
         команды  ассемблирующей  программе.  Они  не  транслируются и в
         объектный код  не войдут,  но упростят  Вам написание,  и самое
         главное - чтение программы, записанной в мнемониках.
              3.  Программ-АССЕМБЛЕРов  существует  великое  множество и
         каждая из них может иметь свои собственные директивы. Они могут
         иметь и одинаковые директивы, но предъявлять разные  требования
         к их употреблению. Одним словом, конкретно способы  использова-
         ния директив АССЕМБЛЕРа Вам надо устанавливать по инструкции  к
         ассемблирующей программе, которой Вы пользуетесь (напр. EDITAS,
         GENS 3, GENS 4, ZEUS и т.п.). И хотя стандартов не  существует,
         тем не менее некоторые основополагающие понятия все же выделить
         можно, вот на них-то мы и остановимся.

                             3.1.   Комментарии.
                             ~~~~~~~~~~~~~~~~~~~~
              Мы начнем с самого простого - с комментариев. Они  записы-
         ваются после символа ";" (точка с запятой).
              Вам, конечно понятно, что все, что является комментариями,
         АССЕМБЛЕРом в машинный  код не компилируется  - это ни  к чему.
         Они служат только для того, чтобы Вам было удобнее  разбираться
         с листингом,  который составил  кто-то другой  или Вы  сами, но
         давным-давно.
+                                 - 164 -

                    Например:

          10        60001      LD E,A    ; Загрузили в регистр E содер-
          20                             ; жимое аккумулятора.
          30        60002      DEC E     ; Уменьшили его на единицу.
                      ..............................................
              Как видите, строка может состоять только из комментария.


                                3.2.   Метки.
                                ~~~~~~~~~~~~~
              Метки значительно упрощают написание программ в мнемониках
         АССЕМБЛЕРа. В операциях перехода JP, JR, DJNZ, вызова  подпрог-
         рамм CALL  Вы можете  не указывать  адрес, в  который Вы хотите
         совершить переход,  а вместо  него подставить  метку. С  другой
         стороны, когда  будете писать  команды для  этого адреса,  под-
         ставите метку и там, Например:

              10    60001   BEGIN   LD B,04
              20    60003   AGAIN   INC HL
              30    60004           DEC DE
              40    60005           DJNZ, AGAIN
              ..............................
             250    60110           LD A,(HL)
             260    60111           CP 80H
             270    60113           JR NZ,BEGIN
             ..................................

              Как видите, очень  удобно. Сразу видно,  что из строки  40
         возврат осуществляется к метке AGAIN, если регистр B не  достиг
         нуля. Из строки 270 возврат осуществляется к метке  BEGIN.
              Определенно  имеет  смысл  выбирать  для  метки такое имя,
         которое соответствовало  бы смыслу  исполняемой операции  - это
         облегчает чтение и понимание листинга программы.
              При  компиляции  ассемблирующая  программа сама подсчитает
         величины необходимых смещений в командах процессора и подставит
         их вместо меток. Так, например, в строке 40 вместо DJNZ AGAIN в
         объектный код пойдет DJNZ FCH, что то же самое.
+                                 - 165 -

                             3.3.  Директива EQU.
                            ~~~~~~~~~~~~~~~~~~~~~~
              В предыдущем примере  мы использовали метки  очень ограни-
         ченно. Дело в том,  что и обращение по  метке и сама метка  на-
         ходились в  одной и  той же  процедуре. А  как   быть, если  Вы
         хотите обратиться  к метке,  которая находится  в другой проце-
         дуре, которую Вы  написали и откомпилировали  еще вчера, а  как
         быть, если Вам  надо сделать переход  к процедуре ПЗУ  и Вы при
         этом хотите воспользоваться меткой?  В этом случае Вам  поможет
         директива EQU. Она присваивает метке числовое значение.  Конеч-
         но,  при  компиляции  эта  директива  никак  в  машинный код не
         преобразовывается, но если по  тексту программы есть ссылки  на
         эту метку, то вместо нее будет подставлено значение, взятое  из
         директивы EQU.

              Например, Вам  в Вашей  программе неоднократно  приходится
         вызывать процедуры  ПЗУ, скажем  CLEAR (1EACH=7852)  и OUT-LINE
         (1856H=6230).  Тогда  в  начале  Вашей  программы  Вы   задаете
         директивой EQU значения своим меткам, например назвав их  CLEAR
         и OUT_L.
                   10  CLEAR       EQU  7852
                   20  OUT_L       EQU  6230
                   30  LABEL       EQU  60016
              Далее вызываете эти процедуры или делаете разные переходы
         по метке.
                   30  60001       LD HL,(LABEL)
                   40  60004       LD BC, 0008
                   50  60007       LD DE,(0452)
                   60  60010       CALL CLEAR
                   70  60013       CALL OUT_L
                   80  60016       ....................................
                   ....................................................
              Сразу  должны  Вас  предупредить,  что  приведенные  здесь
         примеры   с точки  зрения программной  бессмысленны. Это только
         примеры того, как используются те или иные директивы АССЕМБЛЕРа
         и если Вам нужен в примерах реальный смысл, то Вы его  получите
         чуть позже, в последующих главах, где мы будем разбирать  прак-
         тические приемы программирования.
+                                 - 166 -

                        3.4.  Директивы DEFB, DEFW, DEFM.
                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

              Давайте еще раз взглянем на предыдущий пример. В строке 30
         мы засылаем в регистровую пару HL то, что содержится в  адресе,
         на который указывает метка LABEL, а она, согласно директиве EQU
         указывает на адрес 60016.
              Итак, в ячейках 60016 и 60017 содержатся некоторые данные,
         которые впоследствии могут использоваться программой. Эти  дан-
         ные Вы можете заслать в ячейки сами перед компиляцией. И совсем
         не надо для этого привлекать машинный код. Первоначальные  зна-
         чения в ячейках памяти  Вы можете выставить с  помощью директив
         DEFB, DEFW и DEFM.

              DEFB - DEFINE BYTE - задать байт.
              DEFW - DEFINE WORD - задать "слово" ("слово" - это два
              последовательно расположенных байта. Обычно это адрес.)
              DEFM - DEFINE MESSAGE - задать сообщение (это несколько
              подряд идущих байтов). Обычно ассемблирующие программы
              накладывают ограничение на то, сколько байтов можно задать
              одной директивой DEFM, скажем не более пяти. Но Вас это не
              должно волновать. Если Вы хотите задать длинное сообщение,
              то можете ставить подряд столько строк DEFM, сколько
              хотите.

              Итак, DEFB  задает один  одиночный байт  (0...255), DEFW -
         два подряд  идущих байта  (0...65535), а  DEFM -  группу подряд
         идущих байтов - текстовое сообщение, числовая таблица и т.п.

              В нашем предыдущем примере, если мы хотим хранить в адресе
         60016 и 60017 некоторое двухбайтное число, строку 80 следовало
         бы записать, например так:
                             ..................................
                   80  60016     DEFW 5C92H
                   90  60018 ...................................

              Предположим,  Вы  хотите  начиная  с  адреса 60135 хранить
         слово "Spectrum".
+                                 - 167 -

              Вы можете его задать по байтам:
                      60135      DEFB  53H      ;Код буквы "S"
                      60136      DEFB  70H      ;Код буквы "p"
                      60137      DEFB  65H      ; "e"
                      60138      DEFB  63H      ; "c"
                      60139      DEFB  74H      ; "t"
                      60140      DEFB  72H      ; "r"
                      60141      DEFB  75H      ; "u"
                      60142      DEFB  6DH      ; "m"
              Вы можете его задать парами байтов:
                      60135      DEFW  5370H    ; "Sp"
                      60137      DEFW  6563H    ; "ec"
                      60139      DEFW  7472H    ; "tr"
                      60141      DEFW  756DH    ; "um"
              Но проще и правильнее задать его как сообщение:
                      60135      DEFM  5370656374   ; "Spect"
                      60140      DEFM  72756D       ; "rum"

              Есть  особый  случай  при  программировании на АССЕМБЛЕРе,
         когда текст  программы тоже  приходится вводить  через DEFB или
         DEFM. Это  случай, когда  Вы пишете  программу для  встроенного
         калькулятора. Ведь ассемблирующая  программа может перевести  в
         машинный код  мнемоники АССЕМБЛЕРа,  но она  ничего не  знает о
         кодах калькулятора и не знает его мнемоник. Код калькулятора  -
         это  внутреннее   "Синклеровское"  дело,   его   интерпретацией
         занимаются программы, размещенные в ПЗУ и к процессору и к  его
         командам код калькулятора  не имеет никакого  отношения. Посему
         ввести  команды  калькулятору  в  ассемблирующую  программу Вам
         удастся только как последовательность независимых байтов,  т.е.
         через DEFB или DEFM.
              Мы с Вами в  первой части книги употребляли  мнемонические
         обозначения  команд  калькулятора,  типа  add,  stk_data s_lt и
         т.п.,  и  писали  их  с  маленькой  буквы  в  отличие от команд
         процессора. Но делали  это ранее и  будем делать впредь  только
         ради  понимания  и  удобства  записи. Программа-АССЕМБЛЕР таких
         мнемоник не знает, их нет в ее словаре.
              Итак,  с  помощью  DEFB,  DEFW  и  DEFM  задают  начальные
         значения программным  переменным, вводят  в программу  таблицы,
+                                 - 168 -

         сообщения  и  любые  прочие  последовательности  данных,   даже
         графику,  а  также  такие  кодовые  последовательности, которые
         ассемблирующая программа не понимает, как команды АССЕМБЛЕРа.

                        3.5.  Директивы ORG, END.
                        ~~~~~~~~~~~~~~~~~~~~~~~~~

              Нам осталось рассмотреть две самые тривиальные  директивы.
         Директива  ORG  объявляет  адрес,  начиная  с  которого   будет
         ассемблироваться программа. Она должна быть первой директивой в
         исходном  тексте,  хотя  в  принципе,  перед  ней  могут   быть
         комментарии.
              Вы обратили внимание на то, что в вышеприведенных примерах
         мы слева писали столбец адресов, в которых будут размещаться те
         или  иные  команды.  Так  вот,  этого  при  программировании на
         АСЕМБЛЕРе  делать  не  надо.  Достаточно  в  самом  начале дать
         директиву
                      10              ORG  63000
         и далее ассемблирующая программа сама рассчитает в какой ячейке
         памяти будет находиться та или иная команда. Это очень упрощает
         процесс программирования. А если Вы внесете изменения в готовый
         текст, АССЕМБЛЕР сам подправит все адреса.

              Директива END  отмечает конец  программы. Если  после него
         что-то  еще  и  будет  стоять,  то АССЕМБЛЕР при компиляции это
         проигнорирует.

              Вот пожалуй и все, что для начала стоит знать о директивах
         АССЕМБЛЕРа. Это  не все  директивы, какие  могут встретиться  в
         жизни, да и правила  их использования для разных  АССЕМБЛЕРов -
         разные,  но  по  большому  счету  этот  минимум удовлетворит 90
         процентов  Ваших  потребностей  в  информации,  а  остальное Вы
         должны почерпнуть  из инструкции  к тому  АССЕМБЛЕРу, с которым
         работаете.




+                                 - 169 -


                      4. РАЗБОР ПРОГРАММ В МАШИННЫХ КОДАХ.

              Для закрепления практических навыков мы предлагаем Вашему
         вниманию подробный разбор некоторых реальных процедур.
              Мы рассмотрели  в качестве  примеров ответы  на конкретные
         вопросы, которые в своих письмах задают нам наши читатели.  Как
         организуется вывод  на бордюр  экрана цветных  полос? Часто это
         можно видеть при загрузке фирменных игровых программ (например,
         "BOMB  JACK",  "INTERNATIONAL  KARATE").  Как  осуществляется в
         машинных кодах управление от джойстика и клавиатуры, как  можно
         вывести текст на экран и др.?

                   4.1. Вывод на бордюр цветных полос.
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              Из части 1 Вы должны знать, что управление бордюром произ-
         водится по трем младшим битам порта 254 (FE HEX). Идея  органи-
         зации вывода разноцветных полос состит в том, чтобы выдавать по
         этому порту  команды на  изменение бордюра,  причем делать  это
         надо с достаточной частотой. Если частота сигналов на изменение
         цвета много меньше кадровой частоты телевизионного изображения,
         то Вы увидите только мигание  и изменение цвета бордюра (как  в
         режиме  ожидания  загрузки  от  магнитофона).  Если эта частота
         слишком высока,  то полосы  на экране  будут узкими  и частыми,
         так что даже их цвет трудно разобрать.
              Мы на примере промоделируем возможность получения  цветных
         полос различной ширины.
              Логика работы программы такая. Процессор выбирает какой-
         либо байт  из области  ПЗУ, проверяет  в нем  три младших бита,
         устанавливает новый  цвет бордюра,  равный значению  этих битов
         (от 0 до 7) и далее выдерживает паузу, тем большую, чем  больше
         величина  поступившего  байта.  После  этого  выполняется прием
         следующего байта на ПЗУ и т.д.
              При загрузке  программ типа  "INTERNATIONAL KARATE"  то же
         самое происходит при приеме очередного байта из  магнитофонного
         порта. Мы,  к сожелению,  лишены возможности  рассмотреть здесь
         подробно как обрабатывается сигнал, поступивший от магнитофона,
         поскольку это выполняет пакет процедур, содержащихся в ПЗУ, что
+                                  - 170 -

         выходит за рамки данной  книги и рассмотрено подробно  в статье
         "Секреты ПЗУ" в "ZX-РЕВЮ" N 4,5  за 1991 г. и в статье  "Защита
         программ" в "ZX-РЕВЮ" N1,2 за 1993 г. Поэтому рассмотрим управ-
         ление бордюром на модельном примере. Укажем только, что  основ-
         ная  сложность  при  написании  процедур нестандартной загрузки
         состоит в синхронизации работы процедуры с частотой поступления
         импульсов от магнитофонного  порта, что достигается  тщательным
         расчетом замедляющих циклов.
              Процедура ассемблирована, начиная с адреса 26000 (6590HEX)
         и может запускаться RANDOMIZE USR 26000.

         АДРЕС  МАШ.КОД  МНЕМОНИКА     КОММЕНТАРИЙ
         6590   11FF3F   LD   DE,3FFF  В DE помещается длина области ПЗУ
         6593   210000   LD   HL,0000  В HL - начало ПЗУ
         6596   7E       LD   A,(HL)   В аккумулятор идет байт из ПЗУ
         6597   E607     AND  07       Старшие 5 битов маскируются (га-
                                       сятся), остаются младшие три
         6599   D3FE     OUT  (FE),A   Акк-р выдается по 254-му порту
         659B   7E       LD   A,(HL)   Повторно в акк-р загружается тот
                                       же байт из ПЗУ
         659С   47       LD   B,A      и переносится в регистр B
         659D   10FE     DJNZ FE       Замедляющий цикл, повторяющийся
                                       тем дольше, чем больше
                                       поступивший байт.
         659F   23       INC  HL       Переход на новый байт ПЗУ
         65A0   1B       DEC  DE       Уменьшение счетчика байтов
         65A1   7A       LD   A,D      Проверка на то, что в счетчике
         65A2   B3       OR   E        (DE) достигнут 0
         65A3   20F1     JR   NZ,F1    Если нет, то переход назад и
                                       повторение для очередного байта
         65A5   C9       RET           Выход из процедуры

              Несколько слов о том, как следует практиковаться с  нашими
         процедурами.
              Конечно,  лучше  всего  набирать  их в программе АССЕМБЛЕР
         (все равно  в каком).  Это позволяет  избежать множества мелких
         ошибок при наборе процедуры. Набрав текст, надо дать команду на
         компиляцию и после устранения выявленных при компиляции  неточ-
+                                  - 171 -

         ностей, можно выгрузить машинный код и работать с ним.
              Для небольших  процедур (до  100...200 байтов)  в принципе
         возможен набор процедуры последовательным введением байтов  од-
         ного за другим из  какого-либо АССЕМБЛЕРа, но учебная  ценность
         такого подхода ниже, зато  есть возможность в случае  появления
         ошибки  использовать   отладочные  возможности   дисассемблера.
         Только не забудьте  перед пробным запуском  отгрузить введенный
         машинный код на ленту. Вероятность ошибки при вводе  достаточно
         большая и обидно повторять ввод второй раз.
              Для совсем  маленьких процедур  типа той,  что мы  привели
         выше,  можно  выполнить  ввод  и  из  БЕЙСИКа.  При  этом можно
         перевести шестнадцатиричный  код в  десятиричный и  вводить его
         через  FOR...READ...DATA...POKE...NEXT,  а  можно  использовать
         какую-либо  БЕЙСИК-программу   шестнадцатиричного   загрузчика.
         Шестнадцатиричным  загрузчиком  вводят  иногда  и очень большие
         блоки кодов (до нескольких килобайт), однако имейте в виду, что
         набор больших блоков  кодов (более 256  байтов) очень сложен  и
         крайне необходимо, чтобы  вводимый блок имел  контрольные суммы
         после каждой группы  (из 8-ми или  16-ти) байтов и  применяемый
         шестнадцатириный  загрузчик  должен  выполнять  проверку   этих
         контрольных сумм.
              Для тех, кто не хочет утруждать себя применением АССЕМБЛЕ-
         Ра  или  ДИСАССЕМБЛЕРа,  в  порядке исключения дадим распечатку
         загрузчика данной процедуры из БЕЙСИКа.
              10 DIM a(22)
              20 FOR i=1 TO 22
              30 READ a(i)
              40 POKE (25999+i),a(i)
              50 NEXT i
              60 DATA 17,255,63,33
              70 DATA 0,0,126,230
              80 DATA 7,211,254,126
              90 DATA 71,16,254,35
              100 DATA 27,122,179,32
              110 DATA 241,201
              120 RANDOMIZE USR 26000


+                                  - 172 -

                4.2 Вывод данных на экран из машинного кода.
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              В части 1 мы уже  говорили о том, что для  печати символов
         на экране используется команда процессора RST 010 (код D7 HEX).
         Она вызывает исполнение системной  процедуры из ПЗУ, которая  и
         выполнит печать нужного Вам  символа.  Правда, прежде,  чем об-
         ращаться  к  RST010,  Вы  должны  предусмотреть, чтобы код того
         символа, который Вы хотите напечатать, был помещен в  аккумуля-
         тор. Коды  всех символов,  управляющих кодов,  символов графики
         пользователя, токенов ключевых слов  Вы можете найти в   "Спра-
         вочнике..." (ч.3, табл.1).

            Для того, чтобы выполнить печать, надо предварительно решить
         три вопроса:
            - что печатать (какой символ, найти его код);
            - как печатать (каким цветом, на каком фоне);
            - где печатать;
            Вы знаете, что  экран "Спектрума" имеет 24 строки по 32  по-
         зиции, причем  нижние две  строки являются  системным окном для
         вывода сообщений от операционной системы и печать в этих  стро-
         ках  требует   специальных  ухищрений,   а  лучше  пока там  не
         печатать.
            Все эти  вопросы решаются  помещением в  аккумулятор нужного
         кода и вызовом RST 010.

            Рассмотрим конкретный пример. Допустим, Вы хотите напечатать
         в центре экрана фразу "ZX-Spectrum", причем выполнить ее желтым
         цветом по синему фону.
            Это значит, что позиция  начала печати должна быть  AT 11,10
         -двенадцатая строка сверху ( с учетом нулевой ) и  одиннадцатая
         колонка слева.
            Цветовые коды должны быть установлены: INK = 6 ( желтые бук-
         вы); PAPER = 1 ( синий фон).
            Но прежде, чем начинать печать на экране, надо открыть канал
         экрана и очистить экран.
            Канал   открывается   вызовом   системной   процедуры    ПЗУ
         "CHAN_OPEN", находящейся  по адресу  1601, а  очистка экрана  -
         процедурой "Clear LINES", находящейся по адресу 0Е44.
+                                - 173 -

         АДРЕС МАШ.КОД   МНЕМОНИКА    КОММЕНТАРИЙ

         6502  3E02      LD   A,02
         6592  CD0116    CALL 1601    Открываем канал "S"
         6595  0618      LD   B,18    Количество очищаемых строк (24DEC)
         6597  CD440E    CALL 0E44    Очистка 24-х строк
         659A  3E16      LD   A,16    В акк-р помещаем управл. код AT за
                                      которым пойдут координаты позиции
                                      печати
         659C  D7        RST  10      Вывод кода AT
         659D  3E0B      LD   A,0B    Установка номера строки (11)
         659F  D7        RST  10      Ввод номера строки
         65A0  3E0A      LD   A,0A    Установка номера столбца
         65A2  D7        RST  10      Ввод номера столбца
         65A3  3E11      LD   A,11    Установка кода PAPER
         65A5  D7        RST  10      Ввод кода PAPER
         65A6  3E10      LD   A,01    Установка цвета фона
         65A8  D7        RST  10      Ввод цвета фона (синий = 1)
         65A9  3E10      LD   A,01    Установка кода INK
         65AB  D7        RST  10      Ввод кода INK
         65AC  3E06      LD   A,06    Установка цвета символов
         65AE  D7        RST  10      Ввод цвета символов (желтый = 6)
         65AF  3E5A      LD   A,5A    Установка кода буквы Z
         65B1  D7        RST  10      Печать буквы "Z"
         65B2  3E58      LD   A,58    Установка кода буквы "X"
         65B4  D7        RST  10      Печать буквы "X"
         65B5  3E2D      LD   A,2D    Установка кода знака "-"
         65B7  D7        RST  10      Печать знака "-"
         65B8  3E73      LD   A,73    Установка кода буквы "s"
         65BA  D7        RST  10      Печать знака "s"
         65BB  3E70      LD   A,70    Установка кода буквы "p"
         65BD  D7        RST  10      Печать буквы "p"
         65BE  3E65      LD   A,65    Установка кода буквы "e"
         65C0  D7        RST  10      Печать буквы "e"
         65C1  3E63      LD   A,63    Установка кода буквы "c"
         65C3  D7        RST  10      Печать буквы "c"
         65C4  3E74      LD   A,74    Установка кода буквы "t"

+                                 - 174 -

         АДРЕС МАШ.КОД    МНЕМОНИКА     КОММЕНТАРИЙ
         65С6  D7         RST 10        печать буквы "t"
         65С7  3E72       LD  A,72      Установка кода буквы "r"
         65C9  D7         RST 10        Печать буквы "r"
         65CA  3E75       LD  A,75      Установка кода буквы "u"
         65CC  D7         RST 10        Печать буквы "u"
         65CD  3E6D       LD  A,6D      Установка кода буквы "m"
         65CF  D7         RST 10        Печать буквы "m"
         65D0  C9         RET           Возврат

              Запускается данная процедура RANDOMIZE USR 26000.
              Теперь мы можем  поэкспериментировать с кодами  управления
         печатью. Вы, конечно, знаете, какую роль играет разделитель <,>
         (ЗАПЯТАЯ) в оператре БЕЙСИКа  PRINT. Она вызывает печать  того,
         что за ней стоит на другой половине экрана. Код этого управляю-
         щего  символа  06.  Попробуйте  заменить  по адресу 65B6 код 2D
         (знак минус) на  код 06 и  снова запустить процедуру  RANDOMIZE
         USR 26000.
              Теперь попробуйте поставить туда  же код 0D (ENTER,  он же
         СR - CARRIDGE RETURN = ВОЗВРАТ КАРЕТКИ, он же "КОНЕЦ СТРОКИ") и
         опять стартуйте процедуру.
              Если все, что  Вы сделали, выглядит  для Вас понятным,  но
         достаточно скучным, то  отметим, что в  ПЗУ "Спектрума" есть  и
         более мощная процедура для печати. Она позволяет печатать сразу
         целые строки ("стринги"),  называется PR-STRING и  находится по
         адресу 203С. Это процедура более высокого уровня, чем RST 10  и
         при своей работе использует обращения  к RST 10, как к  подпро-
         грамме.
              Чтобы использовать эту процедуру, надо в регистр DE загру-
         зить адрес, в  котором начинается тот  текст, котрый Вы  хотите
         выдать на печать (с управляющими  кодами AT, TAB, INK, PAPER  и
         др.). Длина этой строки помещается в пару BC, а вызывается про-
         цедура CALL 203C.
              Для справки мы даем здесь текст этой процедуры.

         АДРЕС МАШ.КОД   МНЕМОНИКА     КОММЕНТАРИЙ
         203С  78        LD   A,B      Это проверка BC на 0, т.е. напе-
         203D  B1        OR   C        чатана вс строка или нет
+                                 - 175 -

         АДРЕС МАШ.КОД   МНЕМОНИКА    КОММЕНТАРИЙ

         203E  0B        DEC BC       Уменьшение счетчика на единицу.
         203F  C8        RET Z        Если в счетчике был 0, т.е. вся
                                      строка напечатана, то выход.
         2040  1A        LD A,(DE)    Загрузка в акк-р очередного
                                      символа из Вашей строки.
         2041  13        INC DE       Переход к очередному символу.
         2042  D7        RST 10       Печать символов.
         2043  18F7      JR 203C      Переход для повтора.

              Давайте с помощью этой  процедуры распечатаем ту же  фразу
         ZX-spectrum с теми же атрибутами в том же месте экрана.
              Длина  нашей  строки  =  11  печатных  символов  +  3 кода
         управления (AT, INK, PAPER) + 2 числа установки позиции  начала
         печати + 2 числа установки цветовых атрибутов = 18 (12HEX).

         АДРЕС МАШ.КОД   МНЕМОНИКА    КОММЕНТАРИЙ

         6590  011200    LD BC,0012   В BC загружается длина строки.
         6593  119A65    LD DE,659A   В DE - адрес начала строки.
         6596  CD3C20    CALL 203C    Вызов процедуры печати строки.
         6599  C9        RET          Возврат в вызывающую программу.
         659A  16                     "AT"
         659B  0B                     Строка 11.
         659C  0A                     Столбец 10.
         659D  11                     "PAPER"
         659E  01                     Цвет синий.
         659F  10                     "INK"
         65A0  06                     Цвет желтый.
         65A1  5A                     Z
         65A2  58                     X
         65A3  2D                     -
         65A4  73                     s
         65A5  70                     p
         65A6  65                     e
         65A7  63                     c
         65A8  74                     t
+                                  - 176 -

         АДРЕС МАШ.КОД   МНЕМОНИКА     КОММЕНТАРИЙ
         65A9  72                      r
         65AA  75                      u
         65AB  6D                      m


                4.3. Управление программой от Кемпстон-джойстика.
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              В части 1 мы уже писали о протоколе обмена  Кемпстон-джой-
         стика. Он опрашивается по внешнему порту 31(1F) командой IN 31.
         Принимаемый байт анализируется так:
              Бит 0 - движение вправо      Бит 3 - движение вверх
              Бит 1 - движение влево       Бит 4 - "огонь"
              Бит 2 - движение вниз        Биты 5...7 не используются
              В качестве примера рассмотрим программу, которая будет ри-
         совать на экране синие квадраты  на белом поле, если кнопка  не
         нажата. При нажатии этой кнопки производится выход из  програм-
         мы. Начальная позиция печати - AT (11,15) - в центре экрана.
              Поскольку программа выглядит несколько громоздкой, то мы в
         тексте используем метки.

         Адрес Метка Маш.код  Мнемоника      Комментарий
         6590        3E02     LD   A,02
         6592        CD0116   CALL 1601      Открываем канал для печати
                                             на экране
         6595        0618     LD   B,18
         6597        CD440E   CALL 0E44      Очистка экрана
         659A        3E0F     LD   A,0F
         659C        322B66   LD   (XPOS),A  Установка начальной колонки
                                             печати (15) в переменной
                                             XPOS, размещенной по адресу
                                             662B
         659F        3E0B     LD   A,0B
         65A1        322C66   LD   (YPOS),A  Установка начальной строки
                                             печати в YPOS
         65A4        CD1266   CALL PRINT     Вызов процедуры печати
                                             символа
         65A7  REP   DB1F     IN   A,(1F)    Прием байта от джойстика.
+                                  - 177 -

         Адрес Метка Маш.код  Мнемоника      Комментарий
         65A9        E61F     AND  1F        Выделение 5 младших битов
         65AB        28FA     JR   Z,REP     Возврат, если джойстик не
                                             был тронут
         65AD        DEFF     LD   C,FF      Установка параметров
                                             замедляющего цикла 1
         65AF  HERE  00       NOP
         65B0        06FF     LD   B,FF      Установка параметра
                                             замедляющего цикла 2
         65B2  PAUSE 10FE     DJNZ PAUSE     Второй замедляющий цикл
         65B4        0D       DEC  C
         65B5        20F8     JR   NZ,HERE   Первый замедляющий цикл
         65B7        CB67     BIT  4,A       Проверка кнопки "огонь"
         65B9        C0       RET  NZ        Выход в вызвающую програм-
                                             му, если нажата
         65BA        CB47     BIT  0,A       Проверка контакта "вправо"
         65BC        200C     JR   NZ,RIGHT  Переход на подпрограмму
                                             движения вправо
         65DE        CB4F     BIT  1,A       Проверка контакта "влево"
         65С0        201A     JR   NZ,LEFT   Переход на подпрограмму
                                             движения влево
         65C2        CB57     BIT  2,A       Проверка контакта "вниз"
         65C4        2028     JR   NZ,DOWN   Переход на подпрограмму
                                             движения вниз
         65С6        CB5F     BIT  3,A       Проверка контакта "вверх"
         65C8        2036     JR   NZ,UP     Переход на подпрограмму
                                             движения вверх
         65CA  RIGHT 3A2B66   LD   A,(XPOS)  В акк-р идет последний
                                             столбец печати
         65CD        3C       INC  A         и увеличивается на 1
         65CE        FE1F     CP   1F        Проверка на достижение
                                             правого края
         65D0        CAA765   JP   Z,REP     Если да,то возврат на опрос
                                             джойстика
         65D3        322B66   LD   (XPOS),A  Если нет, то запомнить
                                             новый столбец
         65D6        CD1266   CALL PRINT     И вызвать подпрограмму
                                             печати
+                                  - 178 -

         Адрес Метка Маш.код  Мнемоника      Комментарий
         65D9        C3A765   JP   REP       Возврат на новый опрос
                                             джойстика
         65DC  LEFT  3A2B66   LD   A,(XPOS)  Ввод текущего столбца
                                             печати
         65DF        3D       DEC  A        Уменьшить номер столбца на 1
         65E0        FE00     CP   00        Проверка на достижение
                                             левого края
         65E2        CAA765   JP   Z,REP     Если да, то возврат на
                                             опрос джойстика
         65E5        322B66   LD   (XPOS),A  Если нет, запомнить новый
                                             столбец
         65E8        CD1266   CALL PRINT     Вызов подпрограммы печати
         65ED        C3A765   JP   REP       Возврат на опрос джойстика
         65EE  DOWN  3A2C66   LD   A,(YPOS)  В акк-р идет последняя
                                             строка печати
         65F1        3C       INC  A         и увеличивается на 1
         65F2        FE16     CP   16        Проверка на нижний край
         65F4        CAA765   JP   Z,REP     Если да, то возврат на
                                             опрос джойстика
         65F7        322C66   LD   (YPOS),A  Если нет, то запомнить
                                             новую строку и вызвать
         65FA        CD1266   CALL PRINT     подпрограмму печати
         65FD        C3A765   JP   REP       Возврат на новый опрос
                                             джойстика
         6600  UP    3A2C66   LD   A,(YPOS)  Ввод текущей строки печати
         6603        3D       DEC  A         Уменьшить номер строки на 1
         6604        FE00     CP   00        Проверка на достижение
                                             верхнего края
         6606        CAA765   JP   Z,REP     Если да, то возврат на
                                             опрос джойстика
         6609        322С66   LD   (YPOS),A  Если нет, запомнить новую
                                             строку