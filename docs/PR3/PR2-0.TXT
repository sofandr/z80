+                                  - 117 -

                                   ЧАСТЬ II.

                   ПРАКТИКУМ ПО ПРОГРАММИРОВАНИЮ В МАШИННЫХ  КОДАХ

                                   ВВЕДЕНИЕ

              Вы перешли  ко второй  части нашего  учебного пособия, что
         безусловно  свидетельствует  о   серьезности  Ваших   намерений
         изучить программирование в машинных кодах и на языке АССЕМБЛЕРа
         для  бытовых  персональных  ЭВМ  типа  "ZX-Спектрум"  и других,
         совместимых с системой СИНКЛЕР.
              Вы познакомились с архитектурой процессора, с системой ко-
         манд Z-80, мы дали Вам первичную информацию, позволяющую  прео-
         долеть психологический барьер при переходе к программированию в
         машинном коде. Работая с материалом второй части, Вы приобрете-
         те навыки практической работы и узнаете те приемы и  "маленькие
         хитрости", которые широко  используют опытные программисты,  но
         перед которыми встают в тупик начинающие.
              Приведем  пример.  Что  Вы  подумаете,  если  встретите  в
         программе две команды, следующие одна за другой?
              INC D - увеличить на единицу содержимое регистра D.
              DEC D - уменьшить на единицу содержимое регистра D.
              На первый взгляд, программист бесполезно истратил 2  байта
         памяти, потому  что эти  две команды  взаимно противоположны  и
         никак  не  изменяют  содержимое  регистра  D.  Это верно, но не
         совсем.  Дело  в  том,  что  обе  команды имеют еще и косвенный
         эффект, связанный с  тем, что в  соответствии с их  результатом
         выставляются флаги регистра F. Поэтому результат действия  этих
         команд  эквивалентен  как   бы  действию  команды:   "Проверить
         содержимое  регистра  D  и,  не  изменяя  его, установить флаги
         регистра F  в соответствии с ним". Такой команды процессор Z-80
         не имеет, вот почему приходится прибегать к обходному маневру.
              Вот таким конкретным приемам мы и обучим тех читателей, у
         которых хватит бодрости прочитать и вторую часть книги.
              В рамках глав второй части мы для упрощения подачи матери-
         ала будем пользоваться следующими условными обозначениями:
              N - целое число от 0 до 255 (байт);
              NN - целое число от 0 до 65535 (слово);
+                                 - 118 -

              A - аккумулятор (регистр А микропроцессора);
              reg - регистр общего назначения (регистр B,C,D,E,H или L);
              rp - регистровая пара (шестнадцатиразрядные регистры
                   HL,BC,DE);
              xy - индексный регистр (IX или IY);
              ADDR - шестнадцатиричный адрес в поле памяти компьютера;
              rph - старший регистр регистровой пары (B,D,H);
              rpl - младший регистр регистровой пары (C,E,L);
              В  тех  случаях,  когда  в  процедурах  будут  участвовать
         несколько регистров, будут  применяться обозначения reg1,  reg2
         или rp1, rp2, а также rph1, rph2, rpl1, rpl2.

              На всех этапах работы  Вам может быть полезна  информация,
         приведенная  в  третьей  части   книги  -  "Справочник...".   В
         частности,  там  указаны   все  косвенные  воздействия   команд
         процессора на  содержимое флагового  регистра. Вам  также могут
         быть  полезны  те  данные,  которые  имеются  в  справочнике  о
         длительности исполнения команд процессора.


                      1. ОСОБЕННОСТИ ПРОЦЕССОРА Z-80

              Мы полагаем, что приступая к изучению данной книги, Вы ли-
         бо уже проработали  "Первые шаги в  машинных кодах Z-80",  либо
         сами обладаете достаточным уровнем подготовки. Тем не менее, мы
         уделим  несколько  страниц  краткому  повторению материала 1-ой
         части, концентрированно рассмотрев основные особенности процес-
         сора.
              Регистры процессора Z-80 очень несимметричны и программист
         должен тщательно  планировать, какие  данные и  адреса в  какие
         регистры направить.

              1.1. Аккумулятор (регистр А) и регистровая пара HL облада-
         ют отличительными уникальными особенностями.
              Аккумулятор  -  единственный  однобайтный регистр, который
         может загружаться и  выгружаться напрямую. Аккумулятор  - един-
         ственный регистр, для которого можно ОДНОБАЙТНОЙ командой  сде-
         лать сдвиг, инверсию, изменение знака. Его можно загрузить  или
+                                 - 119 -

         выгрузить косвенной адресацией путем указания на адрес,  содер-
         жащийся в регистровых  парах BC или  DE. Для него  могут выпол-
         няться операции  IN и OUT с прямой адресацией.
              HL - единственная регистровая пара, которая может  служить
         в качестве косвенного указателя адреса для арифметических и ло-
         гических операций или при загрузке/выгрузке регистров, отличных
         от аккумулятора.
              HL - единственная регистровая пара, содержимое которой мо-
         жет быть напрямую передано в указатель стека SP или в  програм-
         мный счетчик PC.
              Более того, регистр HL может служить в качестве  аккумуля-
         тора двойной длины в операциях 16-разрядного сложения.
              Благодаря наличию инструкции EX DE,HL, имеется возможность
         полного обмена содержимым между регистрами DE и HL.
              Регистр HL почти всегда используется для хранения адресов,
         потому что имеются операции, позволяющие косвенное обращение  к
         данным, находящимся в адресах, на которые указывает  содержимое
         регистра  HL,  а  также  благодаря  наличию таких операций, как
         LD SP,HL; JP (HL); EX (SP),HL; EX DE,HL. Если для операции  не-
         обходимо наличие второго адреса, то его целесообразно хранить в
         регистровой паре DE благодаря наличию команды EX DE,HL.

              1.2. Очень часто одни и те же регистры называют по-разному.
         Регистры A,B,C,D,E и L называют 8-битными. Регистровые пары  BC
         (старший -  В), DE  (старший -  D), HL  (старший -  H) называют
         16-битными регистровыми парами. Термины "регистровая пара  ВС",
         "регистровая пара В", "регистр ВС"  означают одно и то же.  Это
         же относится и  к регистровым парам  DE и HL.  Равнозначны же и
         термины "регистровая пара",  "регистр двойной длины",  "16-раз-
         рядный регистр", "16-битный регистр".

              1.3. Влияние  операций на  флаги в  высшей степени неодно-
         значно. Вот некоторые необычные эффекты:
              - логические операции OR, XOR и AND обнуляют флаг перено-
         са;
              - однобайтные операции ротации аккумулятора не влияют на
         флаги, кроме флага переноса;
              - при работе с регистровыми парами загрузка данных в rp,
+                                 - 120 -

         выгрузка данных в память, перемещение данных из rp в rp, уве-
         личение содержимого пары на единицу (инкремент), уменьшение на
         единицу (декремент) не влияют на флаги вообще;
              - операции 16-битного сложения влияют только на флаг пе-
         реноса.

              1.4. Флаг четности/переполнения выполняет двойную роль.  В
         одних случаях он указывает  на наличие четности или  нечетности
         содержимого аккумулятора (понятие четности относится не к  чис-
         лу,  содержащемуся  в  аккумуляторе,  а к количеству включенных
         битов); в других случаях  этот флаг указывает на  наличие пере-
         полнения (в двоичной дополнительной арифметике).

              1.5. Кроме прямой адрсации, Z-80 допускает также косвенную
         и индексную адресацию. Косвенной адресации через ячейки  памяти
         нет. Этот недостаток компенсируется путем загрузки адреса в ре-
         гистр HL. Таким образом, косвенная адресация - это двуступенча-
         тый процесс. Адрес при косвенной адресации может содержаться  и
         в регистрах BC и DE, но в этом случае косвенная адресация  воз-
         можна только в операциях с аккумулятором.

              1.6. Индексные регистры  позволяют реализовать методы  ин-
         дексной адресации, когда  базовый адрес содержится  в индексном
         регистре,  а  после  кода  операции  задается величина смещения
         адреса искомой ячейки  относительно базового. Смещение  S может
         быть только  8-битным (от  0 до  255). Основная  цель индексной
         адресации - работа с массивами данных как с таблицами.
              В более общей форме индексной адресации с 16-битным смеще-
         нием необходимы операции сложения содержимого регистровых  пар,
         при этом  регистр HL  выступает в  качестве аккумулятора. Таким
         образом, в данном случае, индексная адресация требует несколько
         шагов.  Смещение  (16-битное)  загружается  в  одну регистровую
         пару, базовый адрес - в  другую. Одной из этих пар  обязательно
         должна быть HL.  Другая может быть  любой, например, BC.  Далее
         производится сложение ADD HL,BC, а затем сумма используется как
         косвенный адрес в операциях с регистром (HL).

              1.7. Многие операции имеют побочные эффекты и при програм-
+                                  - 121 -

         мировании этим активно пользуются.  Так, в системе команд  про-
         цессора нет команды на очистку аккумулятора. Для этой цели  ис-
         пользуют команды SUB A или XOR A.
              Сброс флага переноса - AND A или OR A.
              Логический сдвиг аккумулятора влево - ADD A,A.
              Как AND A, так и OR A сбрасывают флаг переноса, а  осталь-
         ные флаги устанавливают  в соответствии с  содержимым аккумуля-
         тора, но  запомните: загрузка  регистра не  влияет на состояние
         флагов.

              1.8. Ветвление в программах может исполняться  посредством
         команд условного и безусловного переходов. Для безусловного пе-
         рехода существуют два метода - абсолютный переход по  заданному
         адресу и  относительный переход  на заданное  количество байтов
         вперед или назад. Им соответствуют мнемоники JP и JR.
             Наборы команд  для абсолютного  и относительного  условного
         переходов отличаются. Относительный переход выполняется  только
         по состоянию флагов  переноса и нуля,  а абсолютный -  по флагу
         переноса, нуля, знака и переполнения/четности.
              Относительные переходы занимают  меньше места в  памяти (2
         байта вместо 3), но  исполняются медленнее (12 тактовых  циклов
         вместо 10).

              1.9. Операции инкремента и декремента ведут себя по-разно-
         му, в зависимости от того, для однобайтного или для двухбайтно-
         го операнда они применяются. Для однобайтного регистра они вли-
         яют на все флаги, кроме флага переноса. Для двухбайтного регис-
         тра они не влияют на флаги вообще. Таким образом, при использо-
         вании 16-битной пары, например BC, в качестве счетчика, единст-
         венный способ  убедиться, что  ее содержимое  равно нулю  - это
         выполнить операцию логическое "ИЛИ" между отдельными  регистра-
         ми этой пары.
                                  LD A,B
                                  OR C
              Только если и  в B и  в C содержатся  нули, результат этой
         операции будет равен нулю. 16_ТИ РАЗРЯДНЫЕ РЕГИСТРЫ  ПРЕДНАЗНА-
         ЧЕНЫ В ОСНОВНОМ ДЛЯ ОПЕРАЦИЙ С АДРЕСАМИ, А НЕ С ДАННЫМИ, отсюда
         такая сложность действий.
+                                  - 122 -

              1.10. Система команд процессора Z-80 создавалась на основе
         системы команд процессора  8080. Те операции,  которые являются
         дополнительными  по  отношению  к  процессору 8080, выполняются
         медленнее, чем аналогичные им  операции того же метода  адреса-
         ции. Это операции с отдельными битами, команды  арифметического
         сдвига и некоторые  операции копирования. Они  работают медлен-
         нее, т.к. перед ними  стоит префикс, который распознается  про-
         цессором и сообщает ему,  что операция не принадлежит  к набору
         8080, а следующий байт является кодом операции.

              1.11. Процессор Z-80 допускает проведение операций со сте-
         ком. На стек может помещаться только содержимое регистровых пар
         или индексных регистров. Для этих операций можно  рассматривать
         регистры A и F как отдельную регистровую пару AF, состоящую  из
         аккумулятора (старший байт) и набора флагов (младший байт). Ко-
         манды CALL  и RET  помещают адрес  на стек  или снимают  его со
         стека.

              1.12. Процессор Z-80 имеет триггер управления  прерывания-
         ми.  Он  либо  разрешает,  либо запрещает обработку прерываний.
         Состояние  этого  триггера  можно  проверить  с помощью команды
         LD A,I  или LD  A,R. И  та и  другая команда передает состояние
         триггера прерываний во флаг переполнения/четности регистра F.

              1.13. Для процессора Z-80 действуют следующие общепринятые
         соглашения:
              - 16-битный адрес хранится в памяти так, что сначала запи-
         сывается младший байт, а затем старший. Этот же порядок  принят
         в процессорах 8080, 8085  и 6502. Противоположный порядок  при-
         нят, например, в процессорах 6800 и 6809;
              - в регистре SP (указатель стека) содержится адрес, по ко-
         торому находится младший байт содержимого вершины стека.  Такой
         же порядок принят для процессоров 8080, 8085, 6800. В процессо-
         рах 6502 принят другой порядок - указатель указывает на очеред-
         ной свободный адрес;
              - когда прерывание разрешено, триггер прерываний  содержит
         1 и когда запрещено - 0.  Этот же порядок в процессорах 8080  и
         8085, но противоположный - в процессорах 6502, 6800, 6809.
+                                  - 123 -

                        2. РАСШИРЕНИЕ СИСТЕМЫ КОМАНД Z-80

              Процессор Z-80 является одним  из самых насыщенных в  мире
         по системе  команд, которых  насчитывается около  700. В  то же
         время очевидно, что разработчики не могут сделать никакой  про-
         цессор  всеохватывающим.  Планируя  набор  команд, разработчики
         принимают, во-первых,  самые нобходимые  команды и,  во-вторых,
         учитывают возможность их  комбинирования для реализации  допол-
         нительных возможностей.
              В этом обширном разделе  мы рассмотрим те "маленькие  хит-
         рости", которые  позволяют программисту  "конструировать" новые
         функциональные команды из имеющихся в стандартном набор Z-80.
              В основу подборки этих приемов мы положили три принципа:
              - дать очевидно полезные приемы и решения;
              - дать эквиваленты командам, имеющимся в системах других
         процессоров, но отсутствующим в системе команд Z-80;
              - указать на иные эквиваленты команд стандартного набора.

              Такие расширяющие конструкции мы выделили в семь групп:
              - арифметические;
              - логические;
              - передачи данных;
              - ветвления;
              - вызова;
              - возврата;
              - прочие.

              Мы даже пойдем еще дальше и там, где это возможно, запишем
         мнемоники сконструированных нами "квазикоманд" процессора, т.е.
         мнемоники команд, которых нет на самом деле, но эффект действия
         которых эмулируется  предлагаемой конструкцией.  Чтобы отличать
         эти "квазимнемоники" от настоящих, мы будем печатать их с  под-
         черкиванием. Например:

              LD PC, (ADDR) - загрузить в программный счетчик адрес, ко-
              ~~~~~~~~~~~~~~  торый содержится в ячейках ADDR и ADDR+1.


+                               - 124 -

                     2.1. АРИФМЕТИЧЕСКИЕ КОНСТРУКЦИИ

                  2.1.1. Сложение без учета флага переноса.
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              1. Прибавить к аккумулятору содержимое ячейки памяти.
         ADD A,(ADDR)       LD HL,ADDR     - указание на адрес
         ~~~~~~~~~~~        ADD A,(HL)     - сложение
              2. Десятиричное прибавление числа к аккумулятору.
         DADD A,N           ADD A,N        - сложение
         ~~~~~~~~           DAA            - перевод в десятиричную
                                             форму
              3.  Десятиричное    прибавление  содержимого  регистра   к
         аккумулятору.
         DADD A,reg         ADD A,reg      - сложение
         ~~~~~~~~~~         DAA            - перевод в десятиричную
                                             форму
              4. Прибавить 16-битное число к содержимому рег.пары HL.
         ADD HL,NN          LD rp,NN       - загрузка числа в ВС или DE.
         ~~~~~~~~~          ADD HL,rp      - сложение
              5.  Прибавить  16-битное  число  к  содержимому индексного
         регистра.
         ADD xy,NN          LD rp,NN       - загрузка числа
         ~~~~~~~~~          ADD xy,rp      - сложение
              Регистровой парой может быть либо ВС либо DE.
              6. Прибавить к регистру HL содержимое адреса двух  смежных
         ячеек памяти.
         ADD HL,(ADDR)      LD rp,(ADDR)   - загрузка числа
         ~~~~~~~~~~~~~      ADD HL,rp      - сложение
              7. То же, но для индексного регистра.
         ADD xy,(ADDR)      LD rp,(ADDR)   - загрузка числа
         ~~~~~~~~~~~~~      ADD xy,rp      - сложение
              8.  Прибавить  содержимое  ячеек  памяти  ADDR1, ADDR1+1 к
         содержимому ячеек памяти ADDR2, ADDR2+1.
         ADD (ADDR2),(ADDR1) LD HL,(ADDR2) - взять содержимое ADDR2
         ~~~~~~~~~~~~~~~~~~~ LD DE,(ADDR1) - взять содержимое ADDR1
                             ADD HL,DE     - сложить их
                             LD (ADDR2),HL - поместить сумму в ADDR2

+                                 - 125 -

              9. Прибавить 16-битное число к содержимому адреса.
         ADD (ADDR),NN       LD HL,(ADDR)  - взять содержимое адреса
         ~~~~~~~~~~~~~       LD DE,NN      - взять число
                             ADD HL,DE     - сложить их
                             LD (ADDR),HL  - поместить сумму в адрес.

                      2.1.2. Сложение с учетом флага переноса.
                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              10. Прибавить  содержимое адреса  к аккумулятору  с учетом
         переноса.
         ADC A,(ADDR)        LD HL,ADDR    - указание на адрес
         ~~~~~~~~~~~~        ADC A,(HL)    - сложение с учетом переноса
              11. Прибавить к аккумулятору содержимое флага (переноса).
                             ADC A,0
              12. Десятиричное прибавление числа к аккумулятору с учетом
         флага переноса.
         DADC A,N            ADC A,N
         ~~~~~~~~            DAA
              13. Десятиричное прибавление содержимого регистра к
         аккумулятору с учетом флага переноса.
         DADC A,reg          ADC A,reg
         ~~~~~~~~~~          DAA
              14. Прибавление 16-битного числа к HL с учетом переноса.
         ADC HL,NN           LD rp,NN
         ~~~~~~~~~           ADC HL,rp
              15. Прибавление к регистру HL содержимого адреса с учетом
         переноса
         ADC HL,(ADDR)       LD rp,(ADDR)
         ~~~~~~~~~~~~~       ADC HL,rp

              2.1.3. Команды вычитания без учета двоичного займа.
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              16. Вычесть содержимое адреса из аккумулятора.
         SUB (ADDR)          LD HL,ADDR
         ~~~~~~~~~~          SUB (HL)
              17. Десятиричное вычитание числа из аккумулятора
         DSUB N              SUB N
         ~~~~~~              DAA
+                                 - 126 -

              18.  Десятиричное   вычитание  содержимого   регистра   из
         аккумулятора.
         DSUB reg            SUB reg
         ~~~~~~~~            DAA
              19. Вычесть содержимое регистровой пары из HL.
         SUB HL,rp           AND A         - сброс флага переноса
         ~~~~~~~~~           SBC HL,rp     - само вычитание
              Необходимость во  введении этой  конструкции вызвана  тем,
         что простого вычитания содержимого  регистровой пары из HL  без
         учета  флага  переноса  в  системе  команд Z-80 нет. Приходится
         применять SBC, но предварительно обнулять флаг переноса.

                        2.1.4. Обратное вычитание.
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~
              20. Вычесть аккумулятор из числа, и результат поместить в
         аккумулятор.
         SUB N,A             NEG      - изменение знака аккумулятора
         ~~~~~~~~            ADD A,N  - сложение (вместо вычитания)
            ИЛИ
                             LD reg,A - запомнили аккумулятор
                             LD A,N   - ввели число в аккумулятор
                             SUB reg  - вычитание
              21. Вычесть аккумулятор из регистра и результат  поместить
         в аккумулятор.
         SUB reg,A           NEG
         ~~~~~~~~~           ADD A,reg
              22. Десятиричное вычитание аккумулятора из числа.
         DSUB N,A            LD reg,A  - запомнили аккумулятор
         ~~~~~~~~            LD A,N    - ввели число
                             SUB reg   - вычитание
                             DAA       - перевод в десятиричную форму
              23. Десятиричное вычитание аккумулятора из регистра.
         DSUB reg,A          LD reg1,A
         ~~~~~~~~~~          LD A,reg
                             SUB reg1
                             DAA


+                                  - 127 -

           2.1.5. Вычитание с двоичным займом (с учетом флага переноса)
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              24. Вычесть содержимое адреса из аккумулятора.
         SBC A,(ADDR)        LD HL,ADDR    - указали на адрес
         ~~~~~~~~~~~~        SBC A,(HL)    - вычитание с учетом флага C
              25. Вычесть состояние флага С из аккумулятора.
                             SBC A,0
              26.Десятиричное вычитание числа из аккумулятора с учетом C
         DSBC A,N            SBC A,N
         ~~~~~~~~            DAA
              27. Десятиричное вычитание содержимого регистра из аккуму-
         лятора с учетом флага переноса.
         DSBCV A,reg         SBC A,reg
         ~~~~~~~~~~~~        DAA
              28. Вычитание двойного числа из HL с учетом флага  перено-
         са.
         SBC HL,NN           LD rp,NN
         ~~~~~~~~~           SBC HL,rp

                   2.1.6. Команды увеличения (инкремент).
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              29. Выполнить инкремент для содержимого заданного адреса.
         INC (ADDR)          LD HL,ADDR
         ~~~~~~~~~~          INC (HL)
              30. Инкремент аккумулятора с включением флага С, если в
         результате получается 0.
                             ADD A,1
         О     В отличие от команды INC команда ADD влияет на флаг пере-
         носа.
              31. Десятиричный инкремент аккумулятора.
                             ADD A,1
                             DAA
              32. Десятиричный инкремент регистра.
                             LD A,reg
                             ADD A,1
                             DAA
                             LD reg,A
              Необходимость  переброски  через  аккумулятор вызвана тем,
+                                  - 128 -

         что команда DAA может применяться только к аккумулятору.
              33. Инкремент содержимого двух смежных ячеек памяти.
                             LD HL,(ADDR)
                             INC HL
                             LD (ADDR),HL
                  ИЛИ
                             LD HL,(ADDR)
                             INC (HL)
                             JR NZ,END
                             INC HL
                             INC (HL)
                             DEC HL
                    END:     NOP
              ПРИМЕЧАНИЕ:
              а) В команде JR NZ,S мы вместо числа дали метку END. В ре-
         альной программе здесь, конечно же, надо будет подставить  чис-
         ло, указывающее на сколько байтов вперед или назад надо  перей-
         ти. Отметим, что применение  метки позволяет не утруждать  себя
         вычислением величины  этого перехода.  Все АССЕМБЛЕРы  понимают
         назначение меток и, если Вы пишете свою программу в АССЕМБЛЕРе,
         то можете сильно упростить себе жизнь. Если же Вы  программиру-
         ете в маш. кодах вручную, то придется выполнить подсчет.
              б) Мы привели  два варианта выполнения  требуемой команды.
         На глаз  видно, что  второй вариант  значительно длиннее,  т.е.
         занимает больше места в памяти. Интересно оценить  быстродейст-
         вие первого и второго вариантов. Для этого Вам может помочь наш
         "Справочник..."  в  котором  приведено  время выполнения каждой
         команды процессора, измеренное в тактовых циклах

              LD HL,(ADDR)    (16)      LD HL,ADDR    (10)      (10)
              INC HL          ( 6)      INC (HL)      (11)      (11)
              LD (ADDR),HL    (16)      JR NZ,END     (12)      ( 7)
                              -----     INC HL          -       ( 6)
                               38       INC (HL)        -       (11)
                                        DEC HL          -       ( 6)
                                                    ------------------
                                                       33        51
              Итак, первый вариант длится  38 тактовых циклов, а  второй
+                                  - 129 -

         может длиться 33 цикла или 51 цикл, в зависимости от того, про-
         изошло ли переполнение младшего байта после его приращения. По-
         скольку переполнение может произойти  только в одном случае  из
         256, то наиболее вероятна ветвь, которая длится 33 цикла. Таким
         образом, мы имеем наглядный пример того, как программист  может
         выбирать разные решения в зависимости от того, что ему важнее -
         экономия памяти или скорость работы.

                   2.1.7. Команды уменьшения (декремент).
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              34. Уменьшить содержимое заданного адреса.
         DEC (ADDR)          LD HL,ADDR
         ~~~~~~~~~~          DEC (HL)
              35. Декремент аккумулятора с включением флага С, если про-
         исходит двоичный заем.
                             SUB 1
              36. Декремент аккумулятора с включением флага С, если дво-
         ичный заем не происходит.
                             ADD A,FF
              37. Десятиричный декремент аккумулятора.
                             SUB 1
                             DAA
              38. Десятиричный декремент регистра.
                             LD A,reg
                             SUB 1
                             DAA
                             LD reg,A
              39. Декремент 16-битного  числа, расположенного по  адресу
         ADDR и ADDR+1.
                             LD HL,(ADDR)
                             DEC HL
                             LD (ADDR),HL
              40.  Декремент  16-битного  регистра  с включением флага Z
         (флага нуля), если в результате получается 0.
                            DEC rp
                            LD A,rpl       - проверка на 0 с
                            OR rph           выставлением флагов

+                                  - 130 -

                   2.1.8. Команды умножения.
                   ~~~~~~~~~~~~~~~~~~~~~~~~~
              41. Умножение аккумулятора на 2.
                            ADD A,A
              42. Умножение аккумулятора на 3.
                            LD reg,A    - запомнили аккумулятор
                            ADD A,A     - умножили аккумулятор на 2
                            ADD A,reg   - прибавили к результату содер-
                                          жимое аккумулятора еще раз.
              43. Умножение аккумулятора на 4.
                            ADD A,A
                            ADD A,A
              Те же приемы могут быть применены и для умножения на  дру-
         гие малые целые числа.
              44. Умножение содержимого регистра на 2.
                            SLA reg
              45. Умножение содержимого регистра на 4.
                            SLA reg
                            SLA reg
              Примечание: поскольку инструкция SLA - двухбайтная, все же
         быстрее перемещать содержимое  регистра в аккумулятор  и выпол-
         нять  умножение через  однобайтную команду ADD A,A.  Вычисления
         выполняются почти в три раза быстрее.
              46. Умножить на 2 содержимое регистра HL.
                            ADD HL,HL
              47. Умножить на 3 содержимое регистра HL.
                            LD rph,H       - запомнили старший байт.
                            LD rpl,L       - запомнили младший байт
                            ADD HL,HL      - умножили на 2
                            ADD HL,rp      - умножили на 3
              48. Умножить на 2 содержимое индексного регистра.
                            ADD xy,xy
              49. Умножить на 2 16-битное число, находящееся в  заданном
         адресе.
                            LD HL,ADDR     - указание на адрес
                            SLA (HL)       - умножили на 2 младший байт
                            INC HL         - перешли к старшему байту
                            RL (HL)        - умножили на 2 старший байт.
+                                 - 131 -

              Обратите внимание на то, что при умножении старшего  байта
         мы использовали  команду RL,  а не  SLA. Это  необходимо, чтобы
         "прихватить" и содержимое флага переноса, т.к. при умножении на
         2 младшего байта мог ведь возникнуть и перенос единицы, которую
         надо учесть в старшем байте.
              Второй вариант этой конструкции:
                            LD xy,ADDR
                            SLA (XY+0)
                            RL (XY+1)

              2.1.9. Команды деления.
              ~~~~~~~~~~~~~~~~~~~~~~~
              50. Деление аккумулятора пополам (без знака).
                            SRL A
              51. То же, но со знаком.
                            SRA A
              52. Деление аккумулятора на 4 (без знака).
                            SRL A
                            SRL A
                   ИЛИ ТО ЖЕ САМОЕ, НО БЫСТРЕЕ
                            RRA
                            RRA
                            AND 3F
              В результате ротации два младших бита перейдут в  старшие.
         Теперь надо их очистить, что и делается маскированием их коман-
         дой AND 0011 1111. Обратите внимание, что 0011 1111В = 3FH.
              53. Деление на 2 16-битного содержимого адреса.
                            LD xy,ADDR
                            SRL (xy+1)     - деление старшего байта
                            RR (XY+0)      - деление младшего байта с
                                             "прихватыванием" флага С.
              54. Деление содержимого регистра на 2 (без знака).
                            SRL rph
                            RR rpl
              55. То же, но со знаком.
                            SRA rph
                            RR rpl

+                                 - 132 -

                   2.1.10. Команды сравнения.
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~
              56. Сравнить аккумулятор  с числом. Включить  в результате
         биты в тех позициях, где они отличаются.
                            XOR N
              57. Сравнить  регистровую пару  rp с  HL. Если  rp больше,
         включить флаг переноса, в противном случае - выключить.
         CP rp,HL           AND A          -  сброс флага С
         ~~~~~~~~           SBC HL,rp
              58. Сравнить HL с двухбайтным числом.
         CP HL,NN           AND A
         ~~~~~~~~           LD rp,NN
                            SBC HL,rp
              59.  Сравнить  содержимое  регистровой  пары с двухбайтным
         числом, находящимся по заданному адресу.
         CP rp,(ADDR)       AND A
         ~~~~~~~~~~~        LD HL,rp
                            LD rp,(ADDR)
                            SBC HL,rp
              60. То же, но для индексного регистра.
         CP xy,(ADDR)       PUSH xy        - переброска содержимого в HL
         ~~~~~~~~~~~~       POP HL           при посредстве стека
                            AND A
                            LD rp,(ADDR)
                            SBC HL,rp
              61. Сравнить указатель стека с 16-битным числом.
         CP SP,NN           LD HL,0        - очистка HL
         ~~~~~~~~           ADD HL,SP      - переброска SP в HL
                            LD rp,-NN
                            ADD HL,rp
              62. Сравнить указатель стека с 16-битным числом, находя-
         щимся в указанном адресе.
         CP SP,(ADDR)       LD HL,0
         ~~~~~~~~~~~~       ADD HL,SP
                            LD rp,(ADDR)
                            AND A
                            SBC HL,rp

+                                  - 133 -

              2.1.11. Изменение знака (в двоичной дополнительной форме).
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              63. Изменение знака регистра.

         NEG reg            SUB A         - обнуление аккумулятора
         ~~~~~~~            SUB reg       - формирование -reg в аккум-ре
                            LD reg A      - формирование -reg в регистре
         ИЛИ
                            LD A,reg
                            NEG
                            LD reg,A

              64. Изменение знака в заданном адресе.
         NEG (ADDR)         SUB A
         ~~~~~~~~~~         LD HL,ADDR
                            SUB (HL)
                            LD (HL),A
         ИЛИ
                            LD HL,ADDR
                            LD A,(HL)
                            NEG
                            LD (HL),A
              65. Изменение знака регистровой пары.
         NEG rp             LD A,rph
         ~~~~~~             CPL
                            LD rph,A      - инвертировали старший байт
                            LD A,rpl
                            CPL
                            LD rpl,A      - инвертировали младший байт
                            INC rp        - прибавили 1 для получения
                                            результата.
         ИЛИ
                            LD HL,0
                            AND A
                            SBC hl,rp



+                                  - 134 -

              66. Изменение знака 16-битного числа, находящегося в
         указанном адресе.
         NEG (ADDR)         LD HL,0
         ~~~~~~~~~~~        LD rp,(ADDR)
                            AND A
                            SBC HL,rp
                            LD (ADDR),HL
              67. Дополнение до 99. (Т.е. вычисление 99 -"А")
                            LD reg,A
                            LD A,99
                            SUB reg
              Давать команду DAA здесь не нужно, поскольку если к началу
         операции в аккумуляторе  находилось правильное BCD-число,  то и
         99 минус аккумулятор тоже будет правильным BCD-числом.
              68. Дополнение до 100.
                            NEG
                            DAA

                       2.1.12. Команды преобразований.
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              69. Преобразовать содержимое аккумулятора в 16-битное чис-
         ло без знака и записать его в регистровой паре.
                            LD rpl,A
                            LD rph,0
              70. То же, но со знаком.
              Напомним,  что  в  двоичной  дополнительной форме, которая
         применяется для записи целых чисел со знаком, старший (седьмой,
         он же левый) бит является знаковым.
                            LD rpl,A
                            ADD A,A       - знаковый бит переносится во
                                            флаг переноса С.
                            SBC A,A       - в аккумуляторе остается ноль
                                            минус флаг С.
                            LD rph,A
              71. Преобразование содержимого заданного адреса в  16-бит-
         ную форму со знаком.
                            LD HL,ADDR    - указание на адрес
                            LD A,(HL)     - взяли число
+                                  - 135 -

                            ADD A,A       - перевод знакового бита в С
                            SBC A,A       - формирование знакового байта
                            INC HL        - указание на старший байт
                            LD (HL),A     - установка старшего байта
              72.  Приведение аккумулятора по младшему биту. Если  млад-
         ший бит равен нулю, то в аккумуляторе выставляется 0, а если он
         равен единице, то FF.
                            RRA       - младший бит переносится в С
                            SBC A,A   - формирование (0 минус флаг С)
              73. Приведение аккумулятора по знаку. Если в аккумуляторе
         положительное число, то в нем выставляется 0, а если отрица-
         тельное, то FF.
                            ADD A,A       - знаковый бит переносится в C
                            SBC A,A


                      2.2. ЛОГИЧЕСКИЕ КОНСТРУКЦИИ

              74. Сброс заданных битов в аккумуляторе - AND N.
              Число N является  маской. Оно содержит  нули в тех  битах,
         которые должны быть  выключены в аккумуляторе  и единицы в  тех
         позициях, которые должны остаться без изменений. Например,
                   AND 1101 1011B - выключает 2-ой и 5-ый биты.
              Поскольку команда RES выключает биты только по одному,  то
         для получения такого же результата пришлось бы давать  последо-
         вательность:
                            RES 2,A
                            RES 5,A
              75. Проверка битов в аккумуляторе.
              Задача состоит в том, чтобы выставить флаги так, как будто
         бы была выполнена команда  AND для аккумулятора и  для регистра
         или адреса,  но содержимое  аккумулятора при  этом оставить без
         изменений.
                            LD reg,A      - запомнили аккумулятор
                            LD HL,ADDR    - указание на адрес
                            AND (HL)      - логическое "И"
                            LD A,reg      - восстановили аккумулятор
              Команда LD на флаги не влияет.
+                                 - 136 -

              76. Операция AND для флагового регистра и числа.  Маскиро-
         вание флагов.
         AND F,N            PUSH AF       - переброска флаг. регистра
         ~~~~~~~            POP rp          через стек
                            LD A,N        - ввод маски
                            AND rpl       - маскирование
                            LD rpl,A      - сохранение результата в rpl
                            PUSH rp       - обратная переброска в
                            POP AF          регистр F через стек

                       2.2.2. Логические конструкции "ИЛИ".
                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              77. Включение заданных битов в аккумуляторе.
                                   OR N
              Число N является маской. Оно содержит единицы в тех битах,
         которые должны быть включены в аккумуляторе и нули в тех  пози-
         циях, которые должны остаться без изменений. Например:
                    OR 0010 0100B - включает 2-ой и 5-й биты.
              Поскольку команда SET включает  биты только по одному,  то
         для получения такого же результата пришлось бы давать  последо-
         вательность:
                            SET 2,A
                            SET 5,A
              78. Проверка 16-разрядного регистра на 0.
                            LD A,rph
                            OR rpl
              В результате операции будет 0  (включится флаг Z) в том  и
         только в том случае, если и старший и младший байт проверяемого
         регистра равны нулю.
              79. Операция OR для флагового регистра и числа. Маскирова-
         ние флагов.
              OR F,N        PUSH AF       - переброска флаг. регистра
              ~~~~~~        POP rp          через стек
                            LD A,N        - ввод маски
                            OR rpl        - маскирование
                            LD rpl,A      - сохранение результата в rpl
                            PUSH rp       - обратная переброска в
                            POP AF          регистр F через стек
 +                                 - 137 -

                   2.2.3. Логические конструкции "ИСКЛЮЧАЮЩЕЕ ИЛИ".
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              80. Переключение заданных битов в аккумуляторе.
                            XOR N
              Число N является маской. Оно содержит единицы в тех битах,
         которые должны  быть переключены  в аккумуляторе  и нули  в тех
         битах, которые должны остаться без изменений. Например,
                   XOR 0010 0100В - переключает 2-й и 5-й биты.
              81. Инвертировать аккумулятор с установкой флагов.
                            XOR FF
              Эта команда отличается  от CPL тем,  что в отличие  от нее
         влияет на флаги.
              82. Побитное сравнение. Сравнить аккумулятор с регистром и
         включить биты в тех позициях, которые отличаются.
                            XOR reg

                   2.2.4. Логические конструкции "HE".
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              84. Инвертировать содержимое заданного адреса.

         CPL (ADDR)         LD HL,ADDR
         ~~~~~~~~~~         LD A,(HL)
                            CPL
                            LD (HL),A
              85. Инвертировать младший бит содержимого регистра.
                            INC reg
         ИЛИ
                            DEC reg
              Правда, здесь надо иметь в виду, что эти команды могут
         изменить прочие биты в регистре.
              86. Инвертировать младший бит заданного адреса.
                            LD HL,ADDR
                            INC (HL)
         ИЛИ
                            LD HL,ADDR
                            DEC (HL)
              87. Инвертировать младший полубайт в аккумуляторе.
                            XOR 0F
+                                  - 138 -

              88. То же, но старший.
                            XOR F0
              89. Инвертировать содержимое регистровой пары.

              CPL rp        LD HL,FFFF
              ~~~~~~        AND A
                            SBC HL,rp
              Повторно напоминаем, что поскольку для 16-разрядных регис-
         тров нет  команды SUB,  приходится использовать  команду SBC, а
         она влечет за собой еще и вычитание содержимого флага  переноса
         (флага  С),  поэтому  этот  флаг  надо  предварительно занулить
         (очистить), что делается командой AND A.

                           2.2.5. Конструкции сдвига.
                           ~~~~~~~~~~~~~~~~~~~~~~~~~~
              90. Логический сдвиг аккумулятора влево.
                            ADD A,A
              91. Логический сдвиг влево содержимого HL.
              SLL HL        ADD HL,HL
              ~~~~~~
              92. Логический сдвиг влево индексного регистра.
              SLL xy        ADD xy,xy
              ~~~~~~
              93. Логический сдвиг вправо содержимого регистровой пары.
              SRL rp        SRL rph
              ~~~~~~        RR rpl
              Ключевым здесь является то, что младший байт здесь  должен
         не сдвигаться, а ротировать, чтобы "подхватить" содержимое фла-
         га переноса, образовавшееся в результате сдвига старшего байта.
              94.  Арифметический  сдвиг  вправо содержимого регистровой
         пары.
              SRA rp        SRA rph
              ~~~~~~        RR rpl
              95. Логический сдвиг влево 16-разрядного числа, находяще-
         гося по заданному адресу.
              SLL (ADDR)    LD HL,ADDR
              ~~~~~~~~~~    SLA (HL)
                            INC HL
+                                  - 139 -

                            RL (HL)
              ИЛИ
                            LD xy,ADDR
                            SLA (xy+0)
                            RL (xy+1)
              При сдвиге влево сначала сдвигается младший байт, а затем
         ротируется старший.
              96. Логический сдвиг вправо 16-разрядного числа, находяще-
         гося по заданному адресу.
              SRL (ADDR)    LD HL,ADDR+1
              ~~~~~~~~~~    SRL (HL)
                            DEC HL
                            RR (HL)
              ИЛИ
                            LD xy,ADDR
                            SRL (xy+1)
                            RR (xy+0)
              97. Обмен полубайтов в аккумуляторе.
                            RLCA               RRCA
                            RLCA       ИЛИ     RRCA
                            RLCA               RRCA
                            RLCA               RRCA
              98. Нормализация аккумулятора. Аккумулятор сдвигается вле-
         во до тех пор, пока его старший байт не будет равен 1. Не сдви-
         гать, если в аккумуляторе содержится 0.
                            AND A         - проверка аккумулятора на 0
                            JP M,END      - выход, если старший бит = 1
                            JR Z,END      - выход, если акк-р равен нулю
                  SHIFT:    ADD A,A       - сдвиг влево
                            JP P,SHIFT    - повторить сдвиг, если стар-
                                            ший бит равен нулю
                  END:      NOP
              99. Нормализация содержимого регистровой пары HL.
                            LD A,H        - проверка содержимого
                            OR L            регистровой пары на ноль
                            JR Z,END      - выход, если 0
                  SHIFT:    ADD HL,HL     - сдвиг влево

+                                  - 140 -

                    JR NC,SHIFT   - сдвигать, пока не произойдет перенос
                    RR H          - затем вернуть вправо на одну
                    RR L             позицию
          END       NOP
              Примечание: ADD HL,HL влияет на флаг переноса, но не влия-
         ет на флаг знака и флаг нуля.

                          2.2.6. Конструкции ротации.
                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~
              100. Ротация регистровой пары вправо.
              Проблема состоит в том, чтобы младший бит младшего байта
         был перенесен в старший бит старшего байта.
         RR rp              RRC rpl       - младший бит копируется в С
         ~~~~~              RL rpl        - байт восстанавливается, но
                                            флаг С остался
                            RR rph        - ротация старшего байта
                            RR rpl        - ротация младшего байта
              101. Ротация регистровой пары влево.
         RL rp              RLC rph
         ~~~~~              RR rph
                            RL rpl
                            RL rph
              102. Ротация регистровой пары вправо через флаг переноса.
         RRC rp             RR rph
         ~~~~~~             RR rpl
              103. Ротация регистровой пары влево через флаг переноса,
         RLC rp             RL rph
         ~~~~~~             RL rpl
              104. Ротация вправо  16-разрядного числа, находящегося  по
         указанному адресу, через флаг переноса.
         RRC (ADDR)         LD HL,ADDR+1
         ~~~~~~~~~~         RR (HL)
                            DEC HL
                            RR (HL)
         ИЛИ
                            LD xy,ADDR
                            RR (xy+1)
                            RR (xy+0)
+                                  - 141 -
+
              105. Ротация  влево 16-разрядного  числа, находящегося  по
         указанному адресу, через флаг переноса.
         RLC (ADDR)         LD HL,ADDR
         ~~~~~~~~~~         RL (HL)
                            INC HL
                            RL (HL)
         ИЛИ
                            LD xy,ADDR
                            RL (xy+0)
                            RL (xy+1)

              2.2.7. Конструкции для проверки регистров и адресов.
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              106. Проверка аккумулятора. Выставляются флаги в  соответ-
         ствии с содержимым, которое при этом не изменяется.
                            AND A      или      OR A
              Оба варианта сбрасывают флаг переноса.
              107. Проверка состояния регистра с выставлением флагов.
                            INC reg
                            DEC reg
              108. Проверка состояния заданного адреса.
                            LD HL,ADDR
                            INC (HL)
                            DEC (HL)
              109. Проверка содержимого регистра.
                            LD A,rph
                            OR rpl
              110. Проверка содержимого индексного регистра.
                            PUSH xy
                            POP rp
                            LD A,rph
                            OR rpl
              111. Проверка 16-битного числа, находящегося по  заданному
         адресу.
                            LD HL,(ADDR)
                            LD A,H
                            OR L

+                                  - 142 -

                      2.3. КОНСТРУКЦИИ ДЛЯ ПЕРЕДАЧИ ДАННЫХ

              В этом разделе мы рассмотрим конструкции, выполняющие сле-
         дующие манипуляции с данными: копирование, хранение, перемеще-
         ние, обмен, ввод, вывод, удаление и установку.

              2.3.1. Конструкции копирования и загрузки данных.
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              112. Копирование из адреса в регистр.
         LD reg,(ADDR)      LD A,(ADDR)
         ~~~~~~~~~~~~~      LD reg,A
         ИЛИ
                            LD HL,ADDR
                            LD reg,(HL)
              113. Загрузка числа во флаговый регистр.
         LD F,N             LD rpl,N
         ~~~~~~             PUSH HL
                            POP AF
              114. Копировать данные из адреса во флаговый регистр.
         LD F,(ADDR)        LD HL,(ADDR)
         ~~~~~~~~~~~        PUSH HL
                            POP AF
              115. Скопировать в HL данные из адреса, содержащегося в
         HL.
         LD HL,(HL)         LD A,(HL)
         ~~~~~~~~~~         INC HL
                            LD H,(HL)
                            LD L,A
              116. Загрузить в BC или DE данные из адреса, содержащегося
         в HL.
         LD rp,(HL)         LD rpl,(HL)
         ~~~~~~~~~~         INC HL
                            LD rph,(HL)
                            DEC HL

              2.3.2. Конструкции, предназначенные для сохранения данных.
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              117.  Копировать содержимое регистра в память.
+                                  - 143 -

         LD (ADDR),reg      LD A,reg
         ~~~~~~~~~~~~~      LD (ADDR),A
         ИЛИ
                            LD HL,ADDR
                            LD (HL),reg
              118. Копировать содержимое флагового регистра в память.
         LD (ADDR),F        PUSH AF
         ~~~~~~~~~~~        POP HL
                            LD (ADDR),HL
         ИЛИ
                            PUSH AF
                            POP HL
                            LD A,L
                            LD (ADDR),A
              119.  Копировать  содержимое  регистровой  пары  в  ячейку
         памяти, адрес которой находится в HL.
         LD (HL),rp         LD (HL),rpl
         ~~~~~~~~~~         INC HL
                            LD (HL),rph
                            DEC HL

                  2.3.3. Конструкции перемещения данных.
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              120. Перенос аккумулятора во флаговый регистр.
         LD F,A             LD rpl,A
         ~~~~~~             PUSH rp
                            POP AF
              121. Перенос флагового регистра в аккумулятор.
         LD A,F             PUSH AF
         ~~~~~~             POP rp
                            LD A,rpl
              122. Перенос данных из одной регистровой пары в другую.
         LD rp2,rp1         LD rp2l,rp1l
         ~~~~~~~~~~         LD rp2h,rp1h
              123. Перенос указателя стека в HL.
         LD HL,SP           LD HL,0
         ~~~~~~~~           ADD HL,SP

+                                  - 144 -

              124. Перенос указателя стека в индексный регистр.
         LD xy,SP           LD xy,0
         ~~~~~~~~           ADD xy,SP
              125.  Перенос  содержимого  регистровой  пары  в индексный
         регистр.
         LD xy,rp           PUSH rp
         ~~~~~~~~           POP xy
              126. Перенос содержимого индексного регистра в регистровую
         пару.
         LD rp,xy           PUSH xy
         ~~~~~~~~           POP rp
              127. а) Перенос из IX в IY.

         LD IY,IX           PUSH IX
         ~~~~~~~~           POP IY
                   б) Перенос из IY в IX.
         LD IX,IY           PUSH IY
         ~~~~~~~~           POP IX
              128. Перенос данных из HL в программный счетчик.
         LD PC,HL           JP (HL)
         ~~~~~~~~
              129. Перенос данных из индексного регистра в программный
         счетчик.
         LD PC,xy           JP (xy)
         ~~~~~~~~
              130. Перенос  данных из  двух байтов  памяти в программный
         счетчик (косвенный переход).
         LD PC,(ADDR)       LD HL,(ADDR)
         ~~~~~~~~~~~~       JP (HL)
              131. Заполнение области памяти данными, содержащимися в
         аккумуляторе. Адрес начала области - в HL. Длина области - в
         регистре В.
                    FILL:   LD (HL),A     - копирование акк-ра в память
                            INC HL        - переход к следующему адресу
                            DJNZ FILL     - повторить, если В<>0



+                                  - 145 -

                        2.3.4. Команды обмена.
                        ~~~~~~~~~~~~~~~~~~~~~~
              132. Обмен между регистрами через аккумулятор.

         EX reg1, reg2      LD A,reg1
         ~~~~~~~~~~~~~      LD reg1, reg2
                            LD reg2,A
              133. Другие пути обмена между регистрами.
              а) между BC и HL:
         EX BC,HL           PUSH BC
         ~~~~~~~~           EX HL,(SP)
                            POP BC
              б) между произвольными регистровыми парами:
         EX reg1, reg2      PUSH rp1,
         ~~~~~~~~~~~~~      PUSH rp2
                            POP rp1
                            POP rp2
              134. Обмен между указателями стека и HL.
         EX SP,HL           EX DE,HL  - сохранить HL в DE
         ~~~~~~~~           LD HL,0   - поместить указатель стека
                            ADD HL,SP   в регистр HL
                            EX DE,HL  - восстановить HL
                            LD SP,HL  - поместить HL в SP
                            EX DE,HL  - восстановить в HL значение SP
              Эта процедура может применяться, если пользователь органи-
         зует свой машинный стек, отличный от системного, например,  при
         одновременной работе с двумя программами. Они "прозрачны"  друг
         для друга.
              135. Обмен индексного регистра с регистровой парой.
         EX xy,rp           PUSH xy
         ~~~~~~~~           PUSH rp
                            POP xy
                            POP rp
              136. Обмен индексных регистров.
         EX IX,IY           PUSH IX
         ~~~~~~~~           PUSH IY
                            POP IX
                            POP IY
+                                  - 146 -

                   2.3.5. Конструкции удаления данных.
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              137. Очистка аккумулятора.
              SUB A        или        XOR A       или       LD A,0
              Третий вариант работает медленнее, чем два первых и  зани-
         мает больше памяти, но зато не влияет на флаги. Применяйте тот
         вариант, который Вам больше подходит.
              138. Очистка регистра.
                            LD reg,0
              139. Очистка заданной ячейки памяти.
                            SUB A
                            LD (ADDR),A
              ИЛИ
                            LD HL,ADDR
                            LD (HL),0
              Второй вариант более медленный, но зато не затрагивает  ни
         содержимое аккумулятора, ни флаги.
              140. Очистка флага переноса.
                            AND A
              ИЛИ           OR A
              ИЛИ           SCF
                            CCF

              2.3.6. Конструкции установления заданного значения.
              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              141. Установить в аккумулятре FF. (Аналог LD A,FF).
                            SUB A
                            DEC A
              142. Установить FF в заданном адресе.
         LD (ADDR),FF       LD A,FF
         ~~~~~~~~~~~~       LD (ADDR),A
         ИЛИ
                            LD HL,ADDR
                            LD (HL),FF




+                                  - 147 -

                          2.4. КОНСТРУКЦИИ ВЕТВЛЕНИЯ

                  2.4.1. Конструкции безусловного ветвления.
                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              143. Переход к адресу, находящемуся на вершине стека.

         JP (SP)            RET
         ~~~~~~~
              144. Переход к адресу, находящемуся в DE.
         JP (DE)            EX DE,HL
         ~~~~~~~            JP (HL)
              145. Переход к адресу, находящемуся в BC.
         JP (BC)            LD H,B
         ~~~~~~~            LD L,C
                            JP (HL)
         или
                            PUSH BC
                            RET
              Второй вариант значительно  медленнее первого, но  зато не
         затрагивает регистра HL.
              146. Переход к адресу, находящемуся в заданном адресе.

         JP (ADDR)          LD HL,(ADDR)
         ~~~~~~~~~          JP (HL)
              147. Многовариантное  ветвление. Предполагается,  что есть
         таблица адресов,  в которой  находятся адреса  переходов. Адрес
         начала этой таблицы  находится в HL,  а индекс, указывающий  на
         порядковый номер элемента в таблице, находится в аккумуляторе.
                ADD A,A   - индекс надо удвоить, т.к. элементами таблицы
                           являются адреса, а они занимают по два байта.
                LD E,A    - перевод индекса в 16-битную
                LD D,0      форму
                ADD HL,DE - определяется адрес элемента
                LD E,(HL) - вводится сам элемент,
                INC HL        состоящий их
                LD D,(HL)        двух байтов
                EX DE,HL  - ввод адреса перехода
                JP (HL)   - переход по адресу, взятому из таблицы.
+                                  - 148 -

                    2.4.2. Конструкции условного ветвления.
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
              147. Переход, если в аккумуляторе 0.
                            AND A         - проверка аккумулятора
                            JR Z,ADDR     - переход, если 0
              148. Переход, если в регистре 0.
                            INC reg
                            DEC reg       - проверка регистра
                            JR Z,ADDR     - переход, если 0
              149. Переход, если в заданном адресе 0.
                            LD HL,ADDR    - указание на адрес
                            INC (HL)
                            DEC (HL)      - проверка на 0
                            JR Z,ADDR1    - переход, если 0
              ИЛИ
                            LD A,(ADDR)
                            AND A
                            JR Z,ADDR1
              150. Переход, если в регистровой паре 0.
                            LD A,rph
                            OR rpl        - проверка на 0
                            JR Z,ADDR     - переход, если 0
              151. Переход, если в индексном регистре 0.
                            PUSH xy
                            POP reg
                            LD A,rph
                            OR rpl
                            JR Z,ADDR
              152. Переход, если двухбайтный адрес содержит 0.
                            LD HL,(ADDR)
                            LD A,H
                            OR L
                            JR Z,ADDR1
              153. Переход, если заданный бит регистра равен 0.
                            BIT N,reg
                            JR Z,ADDR


+                                  - 149 -

              154. Переход, если бит 7 аккумулятора равен 0.
                            AND A
                            JP P,ADDR
              ИЛИ
                            RLA
                            JR NC,ADDR
              155. Переход, если бит 6 аккумулятора равен нулю.
                            ADD A,A
                            JP P,ADDR
              156. Переход, если бит 0 аккумулятора равен нулю.
                            RRA
                            JP NC,ADDR
              157. Переход, если заданный бит в адресе равен нулю.