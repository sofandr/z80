

             КАК ОРИЕНТИРОВАТЬСЯ В МАШИННОМ ЯЗЫКЕ

                            НАЧАЛО

         Эта    книга   создана   в   качестве   введения   в
программирование на машинном языке и языке ассемблера для ЭВМ
"Синклер ZX Спектрум". 
         Может  оказаться,  что до чтения этой книги у вас не
было  ясного  представления  о  программировании  на машинном
языке.  Вы  можете даже не знать что такое машинный язык. Вам
может  быть  даже неизвестно, что есть разница между машинным
языком  и  языком  ассемблера,  и  чем  они оба отличаются от
программирования на языке "Бейсик". 
         Не  беспокойтесь  и  не  пугайтесь профессионального
жаргона - мы все постепенно объясним. 
         Прежде всего давайте посмотрим как работает ЭВМ: 

             1 PROGRAMMER-------------- 2KEYBOARD
                  |                        |
                  |                        |
             5TV SCREEN---------------- 3OPERATING SISTEM
                                           |
                                           |
                                  4CENTRAL PROCESSING UNIT

  1 - программист, 2 - клавиатура, 3 - операционная система,
     4 - центральный процессор, 5 - телевизионный экран.

         Цель этой диаграммы в том, чтобы показать, что между
программистом  и  мозгом "Спектрум", центральным процессором,
имеется  барьер.  В процессе обычной обработки программист не
может  задать центральному процессору, обычно называемому ЦП,
что тот должен делать. 
         В  ЭВМ "Синклер" выбран ЦП типа Z80A, представляющий
собой более быстродействующий вариант популярного типа Z80. 4
чипа  Z80, 6502, 6809 и 8088 стали широко распространенными в
качестве ЦП для микро-ЭВМ. Z80 - самый популярный из них. 
         Вас  не  удивит,  что Z80 не понимает слова на языке
"Бейсик".  На  самом деле ни один чип не был разработан таким
образом,  чтобы мы могли непосредственно связываться с мозгом
ЭВМ. 
         Если достаточно глубоко вдуматься, можно понять, что
было  бы  очень  трудно, если вообще возможно, в любом случае
задать  для  чипа  ЭВМ  команду,  имеющую смысл для человека.
Снимите крышку вашего "Синклера" (если решитесь) и посмотрите
на  ближайший к громкоговорителю чип - это ЦП Z80A. Очевидно,
этот  чип вашей ЭВМ может реагировать только на электрические
сигналы, передаваемые ему остальными частями схемы. 

                   Что такое машинный язык?

         Чип  Z80  сконструирован таким образом, что он может
принимать сигналы одновременно с восьми подсоединенных к нему
контактов. 
         Разработчики  чипа  Z80  сконструировали  его  таким
образом,  что  разные  комбинации  поступающих на него с этих
восьми  контактов  сигналов будут "командовать" Z80 выполнять
разные  функции.  Помня  о том, что на самом деле есть только
электрические   сигналы,   давайте  примем  систему  условных
обозначений  этих  сигналов  -  например,  ставя "1", если на
одном из контактов есть сигнал, и "0", если сигнала нет. 
         Типичная команда тогда могла бы выглядеть так: 

                       0 0 1 1 1 1 0 0

                  Это существенно отличается от: 

                       "LET A = A + 1"

         Тем  не  менее,  именно  это  и  есть машинный язык.
Название  говорит  само за себя. Это - язык для машин. Каждый
производитель   различных   чипов  сконструировал  для  своей
продукции свой особый язык. 
         Здесь  вы можете задать себе вопрос, если это и есть
машинный  язык,  то в чем проблема? Почему не воспользоваться
проделанной    кем-то    другим    работой,    что   позволит
программировать  на  эВМ  на  языке, который я легко понимаю,
таком как "Бейсик" или "Кобол"? 
         В  этом  есть  определенный  смысл  из-за  следующих
преимуществ машинных языков: 
    - более быстрое выполнение программы; 
    - более эффективное использование памяти; 
    - более короткие программы (в памяти); 
    - независимость от операционной системы. 
         Все     перечисленные     выше     преимущества    -
непосредственное следствие программирования на языке, который
ЦП  воспринимает  без  предварительной  трансляции,  когда вы
программируете  на  "Бейсике", то на самом деле ЭВМ выполняет
программу операционной системы, написанную на машинном языке.
Эта программа выглядит примерно так: 

      NEXT  ВЗЯТЬ СЛЕДУЮЩУЮ КОМАНДУ
            ПЕРЕВЕСТИ ЕЕ В ПОСЛЕДОВАТЕЛЬНОСТЬ 
            КОМАНД МАШИННОГО ЯЗЫКА 
            ВЫПОЛНИТЬ КАЖДУЮ КОМАНДУ 
            ЗАПИСАТЬ РЕЗУЛЬТАТ, ЕСЛИ ЭТО НУЖНО 
            СНОВА ПЕРЕЙТИ НА NEXT 

         Если  вас  интересует,  где ЭВМ берет эту программу,
операционную  систему,  то она хранится в ПЗУ. Иными словами,
она  встроена  в  "Спектрум",  (ПЗУ  -  сокращенное  название
постоянного  запоминающего устройства машинной памяти, ячейки
которой   вы   не  можете  менять,  а  можете  только  читать
(REED/PEEKED). 
         Программа  на языке "Бейсик" может выполняться почти
в 60 раз медленнее, чем программа, написанная непосредственно
на машинном языке. 
         Причина  этого в том, что трансляция отнимает время,
получающиеся  в  результате  команды  машинного  языка  менее
эффективны.   Аналогичным   образом,   обычно  более  быстрым
оказывается  личный  автомобиль, а не общественный транспорт;
вы  можете  сократить  путь  по  известным  вам дорогам, а не
следовать   маршрутом   общественного   транспорта,  которому
приходится  удовлетворять  общественные  потребности.  Тем не
менее нам приходится первыми признать, что у программирования
на машинном языке есть свои недостатки: 
    - программы трудно читать и отлаживать; 
    - их невозможно перенести на другие ЭВМ; 
    - программы оказываются длиннее (в командах); 
    - трудно выполнять арифметические вычисления. 
         Это  означает,  что  вам  следует  очень  продуманно
принимать решение о том, какой метод программирования следует
использовать для каждой конкретной задачи. 
         Очень  большую программу из области финансов следует
писать   на   языке,  разработанным  для  обработки  чисел  и
таком,что   программы  в  случае  необходимости  можно  легко
модифицировать. 
         С  другой  стороны,  нет  ничего  хуже, чем игра для
аркады  (аркада  -  помещение  для игры на ЭВМ),написанная на
языке  "Бейсик". Когда вы сядете играть, она окажется слишком
медленной. 
         Ваш  выбор языка программирования будет определяться
вашими собственными потребностями, объемом памяти вашей ЭВМ ,
требующимся   временем   реакции,  отпущенным  на  разработку
временем и т.д. 
         Итак,     подведя     итог,    машинный    язык    -
последовательность  команд  понятных  для  ЦП  и  поддающихся
представлению в виде чисел. 

                  ЧТО ТАКОЕ ЯЗЫК АССЕМБЛЕРА?

         Совершенно очевидно, что если бы машинный язык можно
было представлять только с помощью чисел, очень немногие люди
были  бы способны писать программы на машинном языке. В конце
концов, кто смог бы понять смысл программы, имеющей следующий
вид: 

                       0 0 1 0 0 0 0 1
                       0 0 0 0 0 0 0 0
                       0 1 0 0 0 0 0 0
                            и т.д.

         К счастью мы можем придумать ряд имен для каждого из
этих   чисел.  Язык  ассемблера  как  раз  и  является  таким
представлением машинного языка. Так что люди могут читать его
в более понятной форме, чем: 0 1 1 1 0 1 1 1 
         Между  языком  ассемблера  и  машинным  языком  есть
только  одно  различие: язык ассемблера на один уровень выше,
чем  машинный  язык.  Его легче читать человеку, чем машинный
язык,   но  с  другой  стороны,  ЭВМ  не  может  читать  язык
ассемблера. Он не является адаптацией машинного языка подобно
"Бейсику".   Для  каждой  команды  языка  ассемблера  имеется
идентичная  (по  функции) команда машинного языка и наоборот,
иными   словами,   между  ними  имеется  взаимно  однозначное
соответствие.  Поэтому  можно  сказать,  что  язык ассемблера
эквивалентен машинному языку. 
         Язык    ассемблера    использует    мнемонику   (или
сокращения)   для  повышения  удобочитаемости.  Например,  на
данной  стадии  обучения команда INC HL может почти ничего не
означать   для  вас,  но,  по  крайней  мере,  вы  можете  ее
прочитать.  Если  бы  вы  сказали,  что  "INC"  - стандартное
сокращение    (или    мнемоническое   обозначение)   INCREASE
(увеличить),  а  "HL"  - "переменная", то просто посмотрев на
эту  команду  вы  можете  получить  представление  о том, что
происходит. 
         Та же самая команда на машинном языке имеет вид: 

                       0 0 1 0 0 0 1 1

         Теперь,очевидно,  вы  можете  также  "прочитать" эту
команду  в  том  смысле, в котором вы можете прочитать число.
Это  не  будет  много для вас означать, если только у вас нет
справочной таблицы или ваш мозг не действует почти как ЭВМ. 
         Язык     ассемблера    может    быть    преобразован
непосредственно  в машинную программу с помощью программы или
вами  самими.  Такая  программа  называется "АССЕМБЛЕР"ом. Вы
можете  рассматривать  ее как программу, выполняющую довольно
утомительную  задачу  трансляции  вашей  написанной  на языке
ассемблера  программы  в  последовательность команд машинного
языка,  понятных "Спектрум" и мы считаем, что "ассемблер" для
"ZX Спектрум" уже имеется. 
         Тем  не  менее,  такие  ассемблеры обычно требуют 6К
памяти  и  имеют  ограниченное  применение  на  ЭВМ с объемом
памяти  16К.Дисплей  "Спектрум"  отнимает  7К памяти, и после
загрузки  ассемблера у вас может остаться всего 4К памяти для
программы  на  языке  ассемблера. (Это означает примерно 1/2К
программы на машинном языке). 
         Альтернативный  способ  работы  -  вместо применения
программы  ассемблера  самому  транслировать  мнемонику языка
ассемблера  в  машинный  язык вручную, применяя приведенные в
этой книге таблицы. 
         Это  трудно, по началу кажется безнадежно, неудобно,
но  это-  прекрасная  практика  и дает вам глубокое понимание
того, как работает ЦП "Спектрум". 
         Мы  на  самом  деле рекомендуем, чтобы вы попытались
написать  таким способом короткую программу на машинном языке
-   т.е.   написать   ее   на   языке  ассемблера  и  вручную
транслировать на машинный язык прежде, чем покупать программу
ассемблера. 

                          ЗАКЛЮЧЕНИЕ

                              ЦП

         Центральный  процессор  ЭВМ - это чип, выполняющий в
ЭВМ вычислительные и управляющие функции. 

                        Машинный язык

         Язык,  воспринимаемый  ЦП.  Для  ЦП "Спектрум" - это
машинный язык Z80, содержащий приблизительно 200 команд. 

                        Язык "Бейсик"

         Язык программирования, разработанный так, чтобы быть
понятным человеку. Когда ЭВМ выполняет команду на этом языке,
ей  приходится транслировать эту команду в последовательность
команд  машинного  языка. Поэтому программы на языке "Бейсик"
значительно  медленнее  работают,  чем  программы на машинном
языке, но их легче писать. 

                       Язык ассемблера

         Представление  команд машинного языка в сокращенной,
понятной  человеку  записи,  например,  HALT  -  ассемблерный
эквивалент команды машинного языка 0 1 1 1 0 1 1 0. 

                     Программа ассемблера

         Программа,  транслирующая  команды  языка ассемблера
(удобочитаемые и понятные человеку) в команды машинного языка
(воспринимаемые ЭВМ). 

              Постоянное запоминающее устройство

         Большая   программа   на   машинном   языке,  обычно
называемая  программируемым  оборудованием. Программа, жестко
встроенная   в  аппаратуру  ЭВМ.  Она  сохраняется  даже  при
отключении  питания.  Для  "Спектрум" ПЗУ запрограммировано в
машинных  кодах  Z80  и  написано  специально  для  него. ПЗУ
"Спектрум"  занимает  ячейки  памяти  с 0 по 16383. Вы можете
только   обращаться  к  содержимому  этих  ячеек,  тогда  как
остальную память вы можете не только читать, но и изменять. 

               ОСНОВНЫЕ ПОНЯТИЯ МАШИННОГО ЯЗЫКА
               ЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇ
                   Ч т о  т а к о е  Ц П ?

         Если мы хотим обмениваться информацией с ЭВМ, то нам
необходимо знать какого типа команды она будет воспринимать и
на каком языке разговаривает мозг ЭВМ (ЦП). 
         Если   мы   не   знаем,   информацию   какого   типа
воспринимает  ЦП,  то  мы  не  сможем  как  следует объяснить
ЭВМ,какие замечательные задачи она должна для нас решать - от
соперничества  в  шахматной  игре  до бухгалтера,следящего за
нашими счетами. 
         В   ЦП   нет   ничего   загадочного.   Мне  нравится
представлять  ЦП  в виде одинокого человечка, сидящего внутри
вашего  "Спектрума", которого все время просят что-то делать.
В  особенности  -  вычислять. Но у бедного человечка нет даже
карандаша и бумаги для записи происходящего. Как же он делает
это? 

                 К о н с т р у к ц и я   Ц П

         Сейчас  мне  следует рассказать вам как конструкторы
Z80 представляют объекты и как ЦП полагается обрабатывать их.
ЦП сконструирован для выполнения очень простых заданий, но он
способен  выполнять  их  очень быстро. Мы упомянули, что у ЦП
нет  даже карандаша и бумаги, и именно так он сконструирован.
Любое  число,  которое  он  не  может запомнить или найти, ЦП
должен  положить  в  какой-нибудь  ящик  на хранение. Давайте
рассмотрим один пример. Вы хотите, чтобы ЦП определил время в
Нью-Йорке,  зная  время  в  Лондоне. Считая, что ЦП ничего не
знает,  вам  прежде  всего придется сказать ему который час в
Лондоне.  Скажем, 10 часов. ЦП негде запомнить эту информацию
и  неизвестно, что вы попросите его делать дальше. Так что он
откладывает  эту  информацию  в  ящик,  скажем,  N1. Затем вы
должны  сообщить  ему  разницу  во времени между Нью-Йорком и
Лондоном,  скахем,  на пять часов раньше. Он откладывает ее в
ящик N2. Приходит время для вычислений. Он спешит к ящику N1,
достает  число,  идет  к  ящику  N2,  выполняет  вычисления и
откладывает результат в ящик N3. 

                  10 - 5 = 5

             Ответ, конечно, 5 часов.

         Вся  эта беготня между ящиками, сложение , вычитание
и  т.  д.  были бы очень утомительными, если бы ЦП нужно было
все  делать  в  уме.  Поэтому  он  поступает точно как и вы -
считает на пальцах рук и ног. 
         Руки и ноги ЦП называются регистрами. 
         Чип  Z80  в  вашем "Спектруме" отличается тем, что у
него масса рук и ног, но мы остановимся на этом позже. 
         Чтобы  показать, как в точности ЦП вычисляет разницу
во  времени  в  приведенном  выше упражнении, давайте назовем
одну из рук ЦП "рука А". Как ЦП управляет содержимым ящика N1
и ящика N2? Приводимая ниже последовательность довольно точно
соответствует  тому, что на самом деле делает ЦП при заданных
выше командах: 
       - отложить значение из ящика N1 на пальцах руки А; 
       -  вычесть содержимое ящика N2 из того, что у него уже
          отложено на пальцах; 
       - взять количество пальцев на руке А и поместить его в
         ящик N3. 
         Итак,  если  именно  так происходит, отсюда вытекают
довольно неожиданные выводы: 
         1.ЦП  не  сможет обрабатывать числа подобные 11,53 -
он может обрабатывать только целые числа. 
         2.ЦП  в  своих  вычислениях будет ограничен числами,
которые он откладывает на своих пальцах. 
         Это, конечно, верно. 
         Есть,  однако,  утешение, что у ЦП масса рук и ног и
он  может  на  всех  из  них считать по отдельности, и что он
может считать до 255 с помощью всего 8 пальцев на руке А. 
         В  следующей главе мы подробнее рассмотрим почему ЦП
может считать больше, чем до 8 на каждой руке, тогда как мы с
помощью двух рук - только до 10. Пока достаточно сказать, что
на каждой руке можно считать до 255, а на каждой ноге - более
чем до 64000. 
         Упражнение  с  разницей  во  времени  до  сих пор не
представлено на чем-либо похожем на язык, воспринимаемый ЦП,-
мы только описали процесс. 
         Чтобы    вы   заранее   получили   представление   о
захватывающих  аспектах  программирования  на машинном языке,
давайте  теперь  применим  мнемонику  (сокращения),  чтобы на
каждом шаге давать команду ЦП. 

                      У с т а н о в к а:

         LD   (BOX N1),  10      1:LOAD BOX 1 WITH 10
         LD   (BOX N2),   5      2:LOAD BOX 1 WITH  5

    1 - загрузить 10 в ящик N1; 2 - загрузить 5 в ящик N2

                     В ы ч и с л е н и я:

     LD     A, (BOX N1)      1:LOAD A WITH BOX 1 CONTENTS
    SUB     A, (BOX N2)      2:SUBTRACT CONTENTS OF BOX 2

 1  -  загрузить  содержимое  ящика  N1  в  А;  2  -  вычесть
                     содержимое ящика N2

         З а п о м и н а н и е  р е з у л ь т а т а:

      LD    (BOX N3),  A      1:LOAD BOX 3 WITH A VALUE

              1 - загрузить значение А в ящик N3

         Эти   команды   сначала   могут  показаться  излишне
краткими, но, в конце концов, мнемоника есть мнемоника. 
         "LD" - сокращенное LOAD (загрузить), так что
          LD   A,1
         означает загрузить 1 в А, т.е. отложить "единицу" на
пальцах руки А. 
         В этих мнемонических обозначениях используется также
довольно  разумный  образ,  основанный  на применении скобок:
скобки   используются,   чтобы   показать,   что   мы   хотим
использовать  содержимое  того,  что  стоит  в  скобках.  Это
нетрудно   запомнить   с  помощью  наглядного  представления,
поскольку скобки выглядят так, что напоминают контейнер. 
         Таким     образом,    проходя    приведенные    выше
мнемонические  обозначения,  мы загружаем в ящик N1 и N2 10 и
5, и т.д.... и получаем конечный результат, равный 5, в ящике
N3. 
         Все это достаточно просто для понимания и, я уверен,
вы  понимаете,  что  пока  вы выполняете вычисления, числа на
руке  А  используются  для представления времени в Нью-Йорке.
Минутой  позже  они  могут  использоваться  для представления
количества  служащих  в  фирме, а в некоторый другой момент -
количества имеющихся у вас денег. 
         Если  вы привыкли к понятию переменной, программируя
на  языке "Бейсик", то при программировании на машинном языке
вы должны отказаться от него. 
         Пальцы на руке А - это не переменная в том смысле, в
котором она используется в программе на "Бейсике". Это просто
то,  с помощью чего ЦП считает. Одно из существенных различий
между программированием на машинном языке и на языке "Бейсик"
- это отсутствие переменных. 
         Вы  можете  считать, что ящики, испльзуемые нами для
запоминания  информации, аналогичны переменным "Бейсик", если
мы каждому дадим имя. Да, вы абсолютно правы, но это все-таки
не переменные. Они могут быть очень полезны и выполнять те же
функции  хранения, что и переменные, но имейте ввиду, что эти
ящики   -   не  более,  чем  ячейки  памяти,  отведенные  для
конкретных целей. 
         Несколько иначе ЦП обрабатывает отрицательные числа,
но этот вопрос мы рассмотрим позднее. 
         Ч т о  е с л и   Ц П  н е  х в а т и т  р у к? 
         Нужно  сказать,  что  ЦП,  встреть  вы его на улице,
показался  бы  вам очень странным субъектом. На каждой из его
рук  по  8 пальцев, а самих рук 8; у него только две ноги, но
на  каждой  по  16  пальцев  и  он ими очень живо перебирает.
Поэтому   он   хорошо   подходит   для   большого  количества
вычислений, для которых он предназначен, откладывая все числа
на  пальцах рук и ног. Тем не менее возможно, что в некоторых
случаях   у  ЦП  окажется  недостаточно  рук  для  выполнения
необходимых  вычислений или по некоторым причинам программист
захочет  остановить  ЦП  посреди  вычислений, чтобы выполнить
что-то  другое.  ЦП Z80 выходит из положения , применяя стек,
т.е.  одну  из  тех  высоких  колючих  вещей,  на  которые вы
накалываете сначала один кусок бумаги, потом следующий и т.д.
Это  удобная  система хранения, если вам нужен только верхний
клочок  бумаги,  но  очень  неудобная,  если  нужен клочок из
середины,  так  как  придется  перерыть  все  бумаги в стеке.
Получилось,  что  это очень удобная система для ЦП, поскольку
ему всегда нужна верхняя порция информации. Каждый раз, когда
прерывание заставляет ЦП прервать вычисления, он "вталкивает"
всю  информацию  со  своих  рук  в  стек.  А когда прерывание
закончено,   "выталкивает"   верхние   порции   информации  и
продолжает  свою  работу. В терминологии ЭВМ мы называем иглу
стеком.  Когда  мы  помещаем  порцию  информации  в  стек, мы
"вталкиваем" ее, а извлекая - "выталкиваем". Втолкнуть в стек
и  вытолкнуть  можно  информацию  любого  типа,  например,  в
середине  сложных вычислений ЦП может потребоваться запомнить
всю  информацию  с  его  многочисленных рук и ног и для этого
потребуется много отдельных "вталкиваний". По причинам, лучше
известным разработчикам Z80, наш ЦП предпочитает держать стек
кверху   ногами.   Это  значит,  что  чем  больше  информации
"вталкивается"  в стек, тем дальше вниз растет стек. Основное
преимущество  применения стека для храниения временных порций
информации  состоит  в том, что ЦП не приходится запоминать в
каком   ящике  находится  информация  -  он  знает,  что  это
последняя порция информации "втолкнутая" в стек. Естественно,
требуется   некоторый  порядок,  если  нужно  "вталкивать"  и
"выталкивать" много порций информации. 

                   Ч т о  м о ж е т  Ц П ?

         Я  думаю,  на  этом  этапе стоит рассмотреть команды
какого  типа  разработчики  посчитали полезным встроить в чип
Z80. 
         Поскольку  ЦП  должен  иметь возможность отслеживать
все  свои  вычисления  на  пальцах рук и ног, есть только два
типа чисел, с которыми может работать ЦП: 
         -  числа  для одной руки - т.е. чмсла, которые можно
            отложить на пальцах одной руки; 
         -  числа  для  двух  рук - т.е. числа, которые можно
            отложить на пальцах двух рук; 
         -  вам  может оказаться трудно в это поверить, но ЦП
            не  может  обрабатывать  числа, превосходящие те,
            которые он может отложить на двух руках; 
         -  типы  команд,  которые  может выполнят ЦП, так хе
            ограничены; 
         -  откладывание чисел на одной руке; 
         -  откладывание чисел на двух руках; 
         -  сложение,  вычитание,  увеличение, уменьшение или
            сравнение чисел для одной руки; 
         -  сложение, вычитание, увеличение, уменьшение чисел
            для двух рук; 
         -  различные  преобразования  чисел  для одной руки,
            например, изменение знака числа; 
         -  указание ЦП перейти к другой части программы; 
         -  попытка  обмена  числами для одной руки с внешним
            миром. 
         Согласитесь,   что   это  очень  ограниченный  набор
команд.  И все же применяя такой ограниченный набор вы можете
заставить  ЦП  играть  в  шахматы  и  считать  свою зарплату.
Обратите  внимание,  что  нет  даже таких простых команд, как
умножение.  Если  вам нужно перемножить два числа на машинном
языке,  вам  придется  для  этого  писать  программу.  Именно
поэтому  написание  программ  на  машинном  языке значительно
медленнее,  чем  написание  программ  на "Бейсике"- вы можете
добиваться результата только крохотными шажками. 

                         В Ы В О Д Ы

                       Р е г и с т р ы

         У ЦП имеются регистры, которые он может использовать
для  вычислений. Восемь из них можно считать руками ЦП, а два
- его ногами. На каждой руке по 7 пальцев, а на каждой ноге -
по 16. 

                   Я ч е й к и  п а м я т и

         ЦП может передавать информацию с одной своей руки на
другую,  а также в память и из нее. Программист может отвести
конкретные   ячейки   памяти   для  представления  конкретной
информации. 

                           С т е к

         ЦП  может использовать стек для передачи информации,
которую  программист  хочет  временно  запомнить.  Информация
передается  в  стек путем "вталкивания" в него, а извлекается
путем "выталкивания". 

               В о з м о ж н ы е  к о м а н д ы

         ЦП  может  выполнять только команды такого типа, как
простейшие   передачи  информации  и  простые  арифметические
действия.   Все   программы   должны   быть   составлены   из
последовательности этих простейших команд. 

                К А К   С Ч И Т А Е Т   Э В М
            ЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇЇ
         Выше  упоминали,  что  ЦП  может  считать  до  255 с
помощью всего лишь 8 пальцев. Как это выходит, если с помощью
десяти пальцев нам удается считать только до 10? 
         Так  получается,  конечно, не потому , что ЭВМ умнее
нас  ,  а  потому,  что  информация  в ЦП лучше организована.
Почему   загнутый   указательный  палец  имеет  то  же  самое
значение,  что  и  мизинец  (=1)?  Кажется очевидным, что при
желании  вы таким способом могли бы представить два различных
числа.  Это во многом похоже на понимание того, что число 0 0
1  отличается  от  числа 1 0 0. Простая истина состоит в том,
что  люди не очень эффективно используют пальцы для счета. ЦП
понимает, что отсутствие пальца несет некоторую информацию, и
то, какой палец отогнут - ценная порция информации. С помощью
всего  двух  пальцев мохно разработать способ счета от 0 до 3
таким методом: 

          0 0  - 0   1.WE CAN INDICATE NOT HAVING A
                       FINGER RAISED AS "0"
          0 1  - 1     AND HAVING A FINGER RAISED AS "1"
          1 0  - 2   2.THIS DOES NOT MEAN  11 - 3
          1 1  - 3     IT MEANS WE SHOSE TO LET THE
                       REPRESENTATION  11 (OR TWO
                       FINGERS) HAVE THE VALUE   3

         1  -  мы можем отмечать загнутый палец цифрой "0", а
поднятый  палец  - цифрой "1"; 2 - это не означает, что 1 1 =
3,  просто  мы  решили,  что  комбинация 1 1 (или два пальца)
будет  иметь  значение 3. Так же просто мы могли бы выбрать и
другой способ обозначения. 
         Между   этим   представлением  и  двоичной  системой
счисления  имеется  непосредственная  связь.  Пальцы ЦП - это
ячейки  памяти  и  можно  сделать  так,  чтобы они обозначали
"включено"  и "выключено" (или "0" и "1", как требует система
обозначений). 
         Если  бы  в  приведенном  выше  примере  мы добавили
третий палец, то мы могли бы представить все числа от 0 до 7.
Три пальца на все числа от 0 до 7! 
         С  помощью  четырех  пальцев  можно  представить все
числа  от  0 до 15! Если вы этому не верите, то будет хорошим
упражнением выписать все возможные комбинации из 4 пальцев. 
         Чтобы  упростить  систему  обозначений таких чисел и
избежать путаницы при попытке записать число одиннадцать так,
чтобы  оно  отличалось  от установки двух битов, было принято
общее  соглашение. Числа от 10 до 15 обозначаются буквами A -
F 
                десятичное  10 = A
                            11 = B
                            12 = C
                            13 = D
                            14 = E
                            15 = F

         Это  означает,  что  мы следующим образом записываем
десятичные числа от 0 до 15 

               0 1 2 3 4 5 6 7 8 9 A B C D E F

         Не правда ли, просто? 
         Такой    способ    обозначения    чисел   называется
шестнадцатеричным форматом. 
         Чтобы  избежать  путвницы  некоторые пишут "H" после
шестнадца-  теричного числа (например, 10H). Это "H" не имеет
значения,  а  служит  просто  для  напоминания пользователю о
шестнадцатеричной  системе счисления. При программировании на
машинном    языке    удобно    иметь   дело   с   числами   в
шестнадцатеричном формате. 
         Это  только  система  обозначений  и  при желании вы
могли  бы  записать  все  ваши  команды  в обычном десятичном
формате.  Нам удобно использовать шестнадцатеричный формат по
следующим причинам: 
         1.  Из  этой  формы числа легко перевести в двоичный
формат,  который  говорит  нам,  что означает каждый бит (или
палец). 
         2.  Он  дает нам возможность легко определить, будет
ли   число   для   одной   руки   или   для  двух  рук,  т.е.
восьмиразрядное или шестнадцатиразрядное. 
         3.  Он  дает  стандартное представление всех чисел в
виде последовательности двухразрядных чисел. 
         4. Это общепринятая система обозначений и знакомство
с шестнадцатеричной системой позволит вам с большей легкостью
читать другие книги и ркуоводства. 
         5.   Поскольку   ЦП   сконструирован  для  обработки
информации,  представленной  двоичными числами, которые людям
для    чтения   неудобны,   требуется   более   удобочитаемое
представление. 
         Но  это  только  система обозначений, а не священное
правило. 
         Шестнадцатеричная   система,  как  отмечалось  выше,
позволяет  представлять  числа  от  0 до 15 с помощью всего 4
битов.  Любая  8-разрядная  ячейка  памяти  (или  8-разрядный
регистр)  может  быть  описана  как два набора по 4 бита. Нас
интересуют  8-разрядные  ячейки памяти и 8-разрядные регистры
потому, что такова структура "ZX Спектрум". Все ячейки памяти
и все одинарные регистры имеют по 8 разрядов. 
         Продвигаясь постепенно, давайте познакомимся сначала
с комбинациями из 4 пальцев: 

         1 1 1 1     2**3 2**2 2**1 2**0
                       8    4    2    1
                      1.    DECIMAL 15
                      2.    F  (IN HEXADECIMAL NOTATION)

         1  -десятичное  15;  2-  в шестнадцатеричной системе
обозначений  имеющие  склонность к математике могут заметить,
что   представляемое   каждым   пальцем   число   каждый  раз
увеличивается  в  2  раза, если двигаться справа налево. Если
перенумеровать пальцы : 

                           3 2 1 0

то  значение  каждого пальца равно "2 в степени N", где "N" -
номер пальца. Будем называть руку с 4 пальцами "ручонкой". 
