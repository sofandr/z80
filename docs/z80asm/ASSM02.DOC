
                     У п р а ж н е н и е

         Какие   десятичные   и   шестнадцатеричные  значения
представляют следующие комбинации битов (или пальцев)? 

                           десятичное      шестнадцатеричное
              0 0 1 0
              0 1 1 0
              1 0 0 1
              1 0 1 0
              1 1 0 0

         Вам важно познакомиться с шестнадцатеричной системой
обозначений,  и  если  это  понятие  вызвало у выс трудности,
прочтите еще раз несколько последних страниц прежде, чем идти
дальше. 
         Рассмотрим,  что  получится  , если нам нужно число,
превышающее  15,  скажем,  16.  Мы используем следующий палец
слева так: 

              7 6 5 4 3 2 1 0
                 = 16 десятичное  =  10Н (шестнадцатеричное)

причина, по которой мы пишем число в виде 10Н, состоит в том,
что  мы  делим  руку на две "4-разрядные ручонки". Поэтому мы
легко    можем    обозначить    каждую   ручонку   одной   из
шестнадцатеричных цифр от 0 до 15 (0-9 и A-F). 
         Таким  способом  произвольную 8-разрядную руку можно
записать в виде ровно двух шестнадцатеричных ручонок: 
                     ____________________
                    |  7 6 5 4 3 2 1 0  |
                  _____|______  ____|______
                 |  3  2  1  0|| 3  2  1  0|
                        |            |
                       ONE          ONE
                   HEXADECIMAL  HEXADECIMAL
                      DIGIT        DIGIT
                        |____________|
                              |
                             TWO
                         HEXADECIMAL
                            DIGITS

1  -  одна шестнадцатеричная цифра; 2 - две шестнадцатеричных
                           цифры. 

         Значение "ручонки" слева в 16 раз превышает значение
"ручонки" справа. Это во многом напоминает десятичную систему
счисления,  где  цифра  в  разряде "десятков" значит в 10 раз
больше, чем цифра в разряде "единиц". 
         Мы   машинально   преобразуем   числа  в  десятичной
системе, такие как 15 к виду: 

                       15 = (1*10) + 0
                          = 16 десятичное

         Именно   таким   способом  мы  получаем  возможность
считать  до  255  с  помощью  всего  8  пальцев. Максимальное
значение получается, когда все пальцы подняты: 

                    7  6  5  4  3  2  1  0
                    ----------  ----------
                        |____________|
                              |
                             F F
      FFH = (F*16) + F
          = (15*16) + 15 (IN DECIMAL)
          = 255 (DECIMAL)  1 

             1 - десятичное

         Наименьшее   число   получается,  когда  все  пальцы
согнуты: 
                     00H = 0 десятичное 
         Обратите  внимание, что все числа, от наименьшего до
наибольшего,   требуют   двух   и  только  двух  цифр,  чтобы
определить число. 
         Возьмите  сами  произвольную  комбинацию  8 двоичных
разрядов   и   попытайтесь   преобразовать   ее   сначала   в
шестнадцатеричную, а потом в десятичную систему счисления. 
         Сначала  это может показаться странно и неудобно, но
вы скоро к этому привыкните. 
         Точно   так  же  счет  в  шестнадцатеричной  системе
происходит тем же способом, что и в десятичной: 

десятичная        26 27 28 29 30 и т.д. 
шеснадцатеричная 26 27 28 29 2A 2B 2C 2D 2E 2F 30 и т.д. 

         Значения  чисел  в  приведенной  выше  десятичной  и
шестнадцатеричной   последовательностях,  конечно,  различны.
Обратите внимание, что после 29Н у вас идет 2АН, а не 30н. 
         Следующая  программа  на языке "Бейсик" позволит вам
ввести  в ваш "Спектрум" десятичное число и преобразовать его
в шестнадцате- ричное значение. 

1 0 0  REM DECIMAL TO HEXADECIMAL CONVERSION
1 1 0  PRINT "PLEASE INPUT DECIMAL VALUE"
1 2 0  INPUT N : PRINT N
1 3 0  LET S& -''': LET N2 = INT(N/16)
1 4 0  LET N1 - INT(N - N2*16)
1 5 0  LET S& - CHR& ((N1<=9)*(N1+48)+(N1>9)*(55+N1)+S&
1 6 0  IF N2 = 0 THEN PRINT : PRINT "HEXADECIMAL - 0" : S&
       :"H": FOR I = 1 TO 200: NEXT I: RUN
1 7 0  LET N = N2 : GO TO 140

     1 - преобразование десятичных в шестнадцатеричные;
     2 - введите, пожалуйста, десятичное значение;
     3 - знак заменен на знак &.

         Попробуйте преобразовать в шестнадцатеричную систему
следующие  числа  и  с  помощью  программы  на языке "Бейсик"
проверьте свой ответ. 

     1. 16484  адрес начала дисплейного файла "Спектрум";
     2. 22528  адрес начала файла атрибутов "Спектрум";
     3. 15360  адрес начала набора литер "Спектрум";
     4. 15616  адрес начала литер в коде ASCII "Спектрум".

                         В ы в о д ы

         Десятичная   система  -  это  условные  обозначения,
позволяющие  записывать группами по десять единиц. Эти группы
представляются цифрами 0,1,2,3,4,5,6,7,8,9. 
         Шестнадцатеричная    система    -    это    условные
обозначения,  позволяющие  записывать  группами по 16 единиц.
Эти  группы представляются цифрами 0, 1, 2, 3, 4, 5, 6, 7, 8,
9, A, B, C, D, E, F. 
         Иногда  в конце шестнадцатеричного числа добавляется
литера   "H"   как   напоминание   о   формате  представления
числа,например,1800Н. 

                 8- разрядные ячейки памяти 

         Конструкция  "ZX  Спектрум"  такова,  что  в  каждой
ячейке  памяти  содержится  по  8  битов  (пальцев). В каждой
ячейке памяти может храниться число от 0 до 255 (десятичное).
Его  удобно  представлять  в шестнадцатеричном формате в виде
двухразрядного числа. 

   К а к  п р е д с т а в л я е т с я  и н ф о р м а ц и я

         В  представлении  информации человеком и ЭВМ имеется
существенная   разница.  У  человека  информация  в  основном
состоит  из  чисел  и  литер (алфавитно-цифровая информация),
тогда как вся информация в ЭВМ хранится в виде групп битов. 
         Бит означает двоичный разряд (BINARI DIG JT. "0" или
"1");  в  микропроцессоре  Z80A  эти биты сгруппированы по 8.
Группа В из 8 битов называется байтом. 
         Такой  способ  представления  информацци  с  помощью
двоичных   разрядов   называется  двоичным  форматом.  Такова
структура  языка,  на котором разговаривает Z80 и большинство
ЦП   микро-ЭВМ.  В  основном  имеется  два  типа  информации,
представляемой  внутри  "Спектрум".  Первый  - это программа.
Второй  -  данные, над которыми программа будет действовать и
которые могут включать числа или алфавитно-цифровой текст. Мы
так  и  будем рассматривать эти три представления: программа,
числа, алфавитно-цифровой текст. 

        П р е д с т а в л е н и е   п р о г р а м м ы

         Программа  -  последовательность команд ЦП выполнить
конкретное  задание, которое можно разбить на некоторое число
"подразделений".   В   Z80   все   команды  имеют  внутреннее
представление  в виде одного или нескольких байтов. Команды ,
представленные  одним байтом, называются короткими командами.
Более  длинные  команды  представляются двумя или несколькими
байтами. 
         Поскольку  Z80  - восьмиразрядный микропроцессор, он
может  за  один раз обрабатывать только один байт, и если ему
требуется  более  одного,  он  ведет  последовательный  поиск
байтов  в памяти. Поэтому в общем случае однобайтовая команда
будет  выполняться быстрее, чем двух- или трехбайтовая. Таким
образом,  как  правило  выгодно  писать программу на машинном
языке,  применяя  (где можно) однобайтовые команды. Вы можете
посмотреть  короткие и длинные команды в таблице кодов команд
в  приложении.  Пусть  вас  не  беспокоит, что они непонятны.
Позже мы рассмотрим каждую команду более глубоко. 

              Представление числовой информации
              ---------------------------------
       П р е д с т а в л е н и е  ц е л ы х  ч и с е л

         Выше  мы отмечали, что из-зи способа конструирования
Z80 мы не можем представлять такие числа, как 11,53. ЦП может
работать  только  с  целыми  числами.  Кроме  того, используя
только  8  пальцев  (т.е.  8-разрядные  числа),  мы  могли бы
представлять  все  числа  из диапазона от 0 до 255. Например,
десятичное  255 представляется как FFH, или в  двоичном  виде
1 1 1 1 1 1 1 1 . 
         Ну а как с отрицательными числами? 

       П р е д с т а в л е н и е  ц е л ы х  ч и с е л 
                       с о  з н а к о м

         Напомним,  что  байт - это рука с 8 пальцами и число
представляется   с   помощью   отгибания  различных  пальцев.
Очевидно,  чтобы представить целое число со знаком в двоичном
формате,   нам   необходим   некоторый  способ  представления
положительных и отрицательных чисел. Давайте считать, что для
представления  отрицательного  числа  мы  принимаем следующую
систему  обозначений: число, представленное на руке ЦП, будет
считаться  отрицательным,  если у ЦП отогнут большой палец. В
терминологии ЭВМ старший бит - бит 7 - установлен. 
         Итак,  у  нас  остается  всего 7 пальцев (битов) для
представления  значения  числа.  Это  значит,  что наибольшим
числом, которое можно представить, уже не будет 255. На самом
деле  половина чисел, которые могут содержаться на одной руке
(в  одном  байте),  будут отрицательными, а другая половина -
положительными,  в  зависимости от того, загнут большой палец
или нет. 
         Полный диапазон чисел, представленных на одной руке,
если  допускаются отрицательные числа, будет тогда от -128 до
+127.  Обратите  внимание,  что  весь диапазон чисел, которые
можно представить, по прежнему будет состоять из 256 чисел. И
вот здесь возникает трудность: когда число с поднятым большим
пальцем будет положительным числом, а когда - отрицательным? 
         Ответ:  все  зависит  от вас. Вы сами должны сделать
выбор:  числа могут лежать либо в диапазоне от 0 до 255, либо
от -128 до +127, но никак не в двух диапазонах сразу. Это вы,
программист,   должны   решить,   какую  систему  обозначений
применять  в конкретный момент. Все команды будут действовать
одинаково хорошо независимо от того, предпочтете ли вы, чтобы
все  числа в регистрах памяти были положительны или чтобы они
были и положительными и отрицательными. 

           ВЫБОР ПРЕДСТАВЛЕНИЯ ОТРИЦАТЕЛЬНЫХ ЧИСЕЛ

         Мы  уже  решили,  что  подъем  большого пальца будет
обозначать   отрицательное   число,   а   его   загибание   -
положительное. Достаточно ли этого? 
         Нет.  Мы  должны  решить,  какая  из  127  возможных
комбинаций  остальных 7 пальцев будет обозначать -1, какая -2
и  т.д.  Нам  необходимо  представление  отрицательных  чисел
такое,  что  при  сложении  числа с противоположным ему будет
получаться  0.  В качестве упражнения давайте подумаем, какое
число  при  сложении с 1 дает 0. Это, очевидно, будет -1 и мы
уже знаем, что большой палец - бит 7 - будет поднят: 

     0 0 0 0  0 0 0 0                    0 0 0 0  0 0 0 1
     1 ? ? ?  ? ? ? ?  ( COULD IT BE=)?  1 0 0 0  0 0 0 1
    ----------------         1          -----------------
     0 0 0 0  0 0 0 0                    1 0 0 0  0 0 1 0
                      1 - можно ли так?

         Давайте попробуем 1 0 0 0 0 0 0 1, иными словами, то
же  самое,  что  и  +1,  но с поднятым большим пальцем. Чтобы
проверить  будет  ли  это  -1, попробуем сложить его с +1. Из
вышеизложенного следует, что сумма 1 0 0 0 0 0 1 0, очевидно,
не  даст  правильного  ответа.  Если  бы  это было нужное нам
число,  то  ответ  равнялся бы 0 0 0 0 0 0 0 0. Очевидно, нам
нужно  число,  принимающее  перенос из бита 0 и преобразующее
его  в  последовательность  нулей. Вы можете сами попробовать
проделать  это  и вы увидите, что единственным числом, дающим
правильный  ответ,  будет  1 1 1 1 1 1 1 1 (шестнадцатеричное
FFH). Удостоверимся в этом: 

                       0 0 0 0  0 0 0 1
                       1 1 1 1  1 1 1 1
          1       -    -----------------
          (CARRY)      0 0 0 0  0 0 0 0
          1 - перенос

         Существует  ли  способ выработать на основании этого
примера   общее  правило  для  любого  отрицательного  числа?
Похоже, что нужно взять отрицание числа и добавить 1 в конце.
Испробуем это правило на другом числе, таком скажем, как 3: 

             3 =       0 0 0 0  0 0 1 1
       1     OPPOSITE  1 1 1 1  1 1 0 0
       2     ADD 1 =>  1 1 1 1  1 1 0 1    (FDH)
       1 - отрицание; 2 - добавлена единица

         Давайте  сложим  это  число  с  3  и  посмотрим, что
получится: 

                       0 0 0 0  0 0 1 1
                     / 1 1 1 1  1 1 0 1
          1         /   -----------------
           (CARRY)-/     0 0 0 0  0 0 0 0
          1 - перенос
                         Получилось!
         Мы нашли способ представления отрицательных чисел: 

                          -01 => FF
                          -02 => FE
                          -03 => FD и т.д.

      Наибольшее положительное число будет

      0 1 1 1  1 1 1 1   =  7F => 127 десятичное

      а противоположное ему будет

      1 0 0 0  0 0 0 1   =  81 => -127 десятичное

         Настоящей  проверкой этого правила будет посмотреть,
вернемся  ли  мы  к  положительному  числу,  применив  его  к
отрицательному  числу. Давайте попробуем это на числе -3, для
которого выше мы получили значение FDH. 

      1  NUMBER     1 1 1 1  1 1 1 1
      2  OPPOSITE   0 0 0 0  0 0 1 0
      3  ADD 1 =>   0 0 0 0  0 0 1 1
 1 - число; 2 - его отицание; 3 - добавлена 1

         Итак,   это   представление  срабатывает.  Мы  можем
применять    его,    чтобы    получить   для   любого   числа
противоположное ему. 

               16-разрядные отрицательные числа

         В точности те же самые рассуждения приложим к числам
для двух рук (16-разрядным числам), но только нужно поднимать
большой  палец  одной  руки,  чтобы  показать отрицательно ли
число (т.е. бит 7 старшего байта). 

                     Условное обозначение

         В   терминологии   ЭВМ   это   условное  обозначение
называется   "дополнением   до   двойки".   Таблицы  значений
дополнений  до  двойки  для отрицательных десятичных чисел вы
можете  найти  в  приложении  к  этой книге. Помните, что это
только  условные обозначения. Вам все-таки придется все время
решать, должны ли используемые вами числа обозначать числа от
0 до 255 или от -128 до +127. 

                          Упражнение
         1.  Если  127  (0  1  1  1  1  1  1  1) - наибольшее
положительное число, которое можно представить с помощью этих
условных обозначений, то как вы представите -128? 
         2.  Найдите  наибольшее  положительное  и наименьшее
отрицательное 16-разрядные числа (из двух рук /байтов/). 
         3.    Найдите   дополнение   до   двух   наименьшего
16-разрядного  отрицательного  чмсла  8000H. Почему это будет
8000Н? 

           ПРЕДСТАВЛЕНИЕ АЛФАВИТНО-ЦИФРОВЫХ ДАННЫХ

         Иногда  мы  не  хотим,  чтобы в машинном языке числа
представляли   команды   ЭВМ   или   были  предназначены  для
вычислений.   Мы  можем  хотеть,  чтобы  они  просто  служили
символами  литер и чисел. Например, заглавием вашей последней
программы,  возможно  названной "1-ая в мире программа". Наша
система  обозначений  алфавитно-цифровых  данных,т.е.  литер,
достаточно   прямолинейна:   все   литеры   и   числа   могут
представляться на одной руке (т.е. в 8-разрядном коде). 
         В   мире   ЭВМ   есть  два  стандарта  представления
алфавитно- цифровых литер: код ASCII и код ABCDIC. 
         ASCII   -  означает  "Американский  стандартный  код
обмена  информацией",  широко  применяется  в  промышленности
микро-ЭВМ. 
         ABCDIC - вариант ASCII, применяемый фирмой IBM. 
         В    "ZX    Спектрум"    алфавитно-цифровые   литеры
удовлетворяют  стандарту  ASCII,  за  исключением  литер ФУНТ
(61Н) и авторское право (7Н). Таблицу преобразования ASCII вы
мохете  найти  в  приложении.  Сравните  ее с таблицей набора
литер   в   приложении   А   руководства  вашего  "Спектрум",
стр.183-186. 
         Попробуйте задать предложение: 
                       PRINT CHR&  33 
и   получите   в   результате   (!),   поскольку   внутренним
представлением (!) будет 21Н. 
         Помощь:  мы только что показали, что можно говорить,
что рука ЦП представляет самые разные вещи. Это может быть: 
         -  команда ЦП из программы; 
         -  число из диапазона от 0 до 255; 
         -  число из диапазона от -128 до +127; 
         -  часть числа для двух рук; 
         -  алфавитно-цифровая литера. 
         Все   это  верно,  и  это  вы,  программист,  должны
помнить, что именно должно храниться на руке ЦП. 

                       В  Ы  В  О  Д  Ы

                      Содержимиое памяти

         В  памяти  "Спектрум"  могут  по  желанию  храниться
программы, числа или текст. Нет никакого способа сказать, что
есть  что,  просто  анализируя  содержимое  отдельной  ячейки
памяти. 

                          Программы

         Команды   программ   храняться   в   памяти  в  виде
последовательнос-  тей  байтов.  Некоторым командам треюуется
всего один байт. А другим - до 4 байтов. 

                            Числа

         Каждая  ячейка  памяти может использоваться либо для
хранения  положительных  целых  чисел,  либо  целых  чисел со
знаком   (чисел,   которые  могут  быть  и  положительными  и
отрицательными)  по  вашему выбору. Диапазон чисел может быть
либо от 0 до 255, либо от -128 до +127. 

                     Отрицательные числа

         Было  принято соглашение, что когда мы решаем, что в
памяти будет храниться число со знаком (+ или -), применяется
следующее правило: 
         -  если бит 7 установлен, то число отрицательно;
         -  если бит 7 не установлен, число положительно.
         Чтобы   получить   число,   противоположное   любому
заданному числу, нужно взять "дополнение до двух" и прибавить
1. 

                      Дополнение до двух

         Дополнение  любого числа до двух - это его отрицание
в  двоичном  формате.  Любой установленный бит сбрасывается и
наоборот. 

                    З А Г Л Я Н Е М  В  ЦП

                    В  В  Е  Д  Е  Н  И  Е

         Мы  говорили,  что  мозг  "Спектрум"  - ЦП процессор
Z80A.  Это  более  быстродействующий  вариант процессора Z80,
производимый   по   лицензии  фирмой  "ЗАЙЛОГ".  Единственное
отличие  между  процессорами  Z80  и  Z80A состоит в том, что
первый    процессор    работает    при   частоте   генератора
синхроимпульсов 2 МГц, а второй - 3,5 МГц. 
         Частота генератора синхроимпульсов - это просто мера
скорости  выполнения  вычислений  ЦП. В "Спектрум" за секунду
генерируется   3,5   миллиона   синхросигналов,   т.е.   один
синхроимпульс каждые 0,000000286 секунды. 
         Cамая  быстрая  команда,  выполняемая ЦП, занимает 4
синхроимпульса,  а  самая  долгая  -  21  синхроимпульс.  Это
означает,  что  даже  если  будут  выполняться  только  самые
медленные  команды,  все  равно  за секунду будет выполняться
около 160 000 команд. 

                    Физическая карта мозга

         Процессор   "Спектрум"   -   кремниевый   чип  с  40
контактами, пронумерованными от 1 до 40. Эти контакты - линии
связи  между процессором и остальной ЭВМ. Например, процессор
получает  питание  от  источника  питания  через  контакт 11,
получает синхроимпульсы через контакт 6, получает и принимает
адреса  через  контакты  с  1  по  5 и с 30 по 40, посылает и
принимает  данные через контакты с 7 по 15 за исключением 11.
Остальные   контакты   предназначены  для  передачи  сигналов
управления. 
         На этом этапе вам может показаться, что вы полностью
запутались. Но не стоит приходить в недоумение. На самом деле
наше  счастье в том, что мы не знаем внутренней структуры ЭВМ
и нам не нужно ее знать, чтобы пользоваться ее возможностями.
Здесь  то же самое, что с калькулятором. Физическая структура
ЭВМ  "прозрачна" для пользователя (иными словами, мы не видим
ее).  Нас интересует только логическая структура калькулятора
или,  в  данном случае, чипа Z80, и как мы можем использовать
его для наших целей. 

                   Логическая картина мозга

         Логически  Z80  можно  разделить на 5 функциональных
частей: 
      1. Устройство управления; 
      2. Регистр команд; 
      3. Счетчик команд; 
      4. Арифметико-логическое устройство; 
      5. 24 регистра пользователя (используемые руки и ноги
         ЦП). 

                    Устройство управления

         Мы  можем  рассматривать  устройство  управления как
некий  супервизор, управляющий работой ЦП. Его задача состоит
в  синхронизации  и координации ввода, обработки и вывода для
конкретного  задания, полученного ЦП вне зависимости от того,
исходят  ли  команды из ПЗУ с записанной в нем программой или
из вашей программы. 

                        Регистр команд

         Это  -  рука,  используемая  ЦП для хранения текущей
команды,  которую  он  собирается исполнять. Задание, в целом
составляющее  программу,  должно находиться гле-то в памяти -
либо  в  ПЗУ, либо в памяти с произвольным доступом. Вы может
быть  помните, что программа - это последовательность команд.
Так, чтобы выполнить задание, устройство управления должно по
очереди  отыскивать каждую команду в памяти (либо в ПЗУ, либо
в  памяти  с  произвольным  доступом) и перемещать ее в руку,
называемую "регистр команд". 

                        Счетчик команд

         Это  действительно  одна  из ног Z80, сообщающая ЦП,
где  находится  следующая  часть  программы  (адрес следующей
ячейки  памяти,  в котором устройство управления должно найти
команду).  Он  подобен  управдому  для  команд,  следящему за
расположением следующей команды. 

            Арифметико-логическое устройство (АЛУ)

         Это  калькулятор  внутри  ЦП. Он может выполнять как
арифмети- ческие, так и логические операции. Из всех основных
арифметических  функций, известных нам с вами, это устройство
может   выполнять   только   простые  сложение  и  вычитание,
увеличение  (добавление  1) и уменьшение (вычитание 1), но не
умножение  и  деление.  Это устройство может также сравнивать
числа  для одной руки и выполнять "побитовые" операции, такие
как  перемещение  пальцев  по  кругу,  выставление и прижатие
определенных пальцев и т.д. 
         Как  побочный  результат вычислений, поручаемых АЛУ,
обычно  меняется состояние различных "флагов" в регисте FLAG.
Ниже этот вопрос рассматривается более подробно. 

                   Регистры  пользователей

         Это руки и ноги ЦП, которыми вы, программист, можете
управлять.   В   микропроцессоре   Z80  имеются  24  регистра
пользователей.  Некоторые  из  них  будут руки, а некоторые -
ноги.   Образ,   созданный   нами   с   помощью  рук,  ног  и
прямоугольников,  позволяет  нам  легко зрительно представить
себе процессы и дает хорошее представление о происходящем, но
знатоки  программирования  будут в недоумении, если вы будете
говорить  что-то  вроде:"...и затем ЭВМ перемещает информацию
из правой руки в левую". 
         Теперь  мы  дадим  вам правильные названия для рук и
ног  ЦП,  так что столкнувшись с подобной ситуацией вы можете
сказать: 
                          "LD  B,A" 
         Во-первых,  знатоки программирования называют руки и
ноги ЦП РЕГИСТРАМИ. Выше мы говорили, что у ЦП имеется 8 рук:
они  называются  A,  B,  C,  D, E,... В построенном нами мире
рука, по определению, это нечто с 8 пальцами. 
         У  ЦП  есть  две  ноги:  они  называются IX и IY. По
определению нога - это все, что угодно с 16 пальцами. 
         Названия   рук  и  ног  легко  запомнить.  Поскольку
название  регистра состоит из одной буквы, то это должна быть
рука  (т.е.  он  содержит  8 битов). Тогда как, если название
состоит  из двух букв, то это будет нога (т.е. он содержит 16
битов). 
         Вы обратили внимание как легко мы перешли от пальцев
рук и ног к битам? Мы очень быстро приучим вас к терминологии
программирования. 
         На  самом  деле, остальные две руки ЦП, следующие за
D, E... назывются не "G" и "H", как можно было ожидать, а "H"
и "L". 
         Ниже  приводится  традиционный  способ представления
всех этих регистров: 
                   ЇЇЇЇЇЇЇЇЇЇЇЄЇЇЇЇЇЇЇЇЇЇЇ 
                        A     -     F
                        B     -     C
                        D     -     E
                        H     -     L
                              IX
                              IY

         Обратите  внимание,  что "F" соответствует "A", зато
порядок   остальных   достаточно  естественнен.  Причина,  по
которой  регистры сгруппированы таким образом, состоит в том,
что иногда можно из двух рук составить ногу. 
         В  конце  концов, если по определению нога - нечто с
16  битами, то возможно мы можем иногда использовать подделку
и  применять  две  8-битовые  руки  вместо  ноги.  Поэтому мы
говорим  о "парах регистров" таких, как BC, DE и HL. Причина,
по  которой  пара  регистров  "HL" называется так, а не "GN",
например,  состоит в том, чтобы помочь запоминать, в каком из
регистров  старшее  число,  а в каком младшее. Это аналогично
тому,  как если бы вы хотели представить числа от 0 до 100 на
руках   и   ногах.  Вы  легко  можете  составить  из  пальцев
представление чисел 0 и 10, и аналогично будет с пальцами ног
(при  условии,  что вы достаточно подвижны). Один из способов
обозначить  таким  методом число 37 - отложить 3 на руках и 7
на  ногах,  но  нужно  как-то договориться, какое число будет
старшим  разрядом,  а  какое младшим. Иначе кто-нибудь другой
решит, что вы хотели представить число 73. 
         "H"  в  "HL" означает старший (HIGHT), а "L" младший
(LOW), так что нет возможности перепутать. 
         Эта  схема  пар  регистров  позволяет также указать,
какой из регистров в двух парах содержит старшее число: 

                           B  C  BC
                           D  E  DE

поскольку   все   старшие   и  младшие  числа  размещаются  в
одинаковом порядке. 
         Ноги (IX и IY) также имеют специальное название: они
называются  индексными  регистрами.  Это  связано во многом с
тем,  что они применяются для организации информации так, как
организуют  указатель  в  книге.  С другой стороны, вы можете
рассматривать  их как указатели таблиц. Теперь все в порядке.
Вы  поняли  терминологию  и  можно  остановиться на некоторых
частных вопросах. 

              НАКАПЛИВАЮЩИЙ РЕГИСТР (РЕГИСТР А)

         Это  8-битовый регистр (однобайтовый) - самый важный
в  Z80.  Его название восходит к первым поколениям ЭВМ, когда
был   лишь   один   регистр,   применявшийся  для  накопления
результата.  И  хотя  мы ушли вперед от первых поколений ЭВМ,
накапливающий  регистр  по-прежнему  широко  применяется  для
логических  и  арифметических  операций. На самом деле многие
ЭВМ все еще конструируются таким образом, что многие операции
можно  выполнять только с помощью регистра А. Это имеет место
и  для  чипа  Z80  и регистр А - привилегированный. Вы можете
представлять  себе  регистр  А  как правую руку ЦП аналогично
тому, что многие люди некоторую работу легче выполняют правой
рукой, чем левой. 

                            ФЛАГИ

         Обратите,  пожалуйста , внимание, что "AF" обычно не
рассматривается   как  пара  регистров.  "F"  в  этом  случае
применяется  для  обозначения  "регистр флагов". Это рука с 8
пальцами,  так  что  каждый палец указывает выполнено или нет
определенное условие. Мы вернемся к этому вопросу в отдельной
главе. 

                        ПАРА РЕГИСТРОВ

         Из  трех  пар  регистров  (BC,  DE,  HL)  пара  HL ,
возможно,  наиболее  важная.  Помимо  того,  что пользователю
предоставлен  выбор,  применять  ли  ее в виде двух отдельных
регистров  или  как  пару регистров. Z80 сконструирован таким
образом,    что   есть   определенные   операции   16-битовой
арифметики,  которые  можно  выполнять  только с помощью пары
регистров HL. 
         Из-за  такого  привилегированного,  с  точки  зрения
аппаратуры,  положения,  операции  над  парой общих регистров
будут  обычно  быстрее  выполняться  для  регистров HL. Из-за
этого  HL  оказывается  предпочтение  в  программировании  на
машинном языке. 
